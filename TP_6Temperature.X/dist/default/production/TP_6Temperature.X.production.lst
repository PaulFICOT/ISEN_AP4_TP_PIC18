

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb  5 14:55:54 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 05/05/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F46K22 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _ANSELCbits	set	3898
    70  0000                     _LATD	set	3980
    71  0000                     _PORTD	set	3971
    72  0000                     _LATDbits	set	3980
    73  0000                     _TRISDbits	set	3989
    74  0000                     _SSP1BUF	set	4041
    75  0000                     _SSP1CON2bits	set	4037
    76  0000                     _SSP1CON2	set	4037
    77  0000                     _PIR2bits	set	4001
    78  0000                     _PIR1bits	set	3998
    79  0000                     _SSP1CON3bits	set	4043
    80  0000                     _SSP1STATbits	set	4039
    81  0000                     _SSP1ADD	set	4040
    82  0000                     _SSP1CON1	set	4038
    83  0000                     _TRISCbits	set	3988
    84                           
    85                           	psect	smallconst
    86  001000                     __psmallconst:
    87                           	callstack 0
    88  001000  00                 	db	0
    89  001001  30                 	db	48	;'0'
    90  001002  31                 	db	49	;'1'
    91  001003  32                 	db	50	;'2'
    92  001004  33                 	db	51	;'3'
    93  001005  34                 	db	52	;'4'
    94  001006  35                 	db	53	;'5'
    95  001007  36                 	db	54	;'6'
    96  001008  37                 	db	55	;'7'
    97  001009  38                 	db	56	;'8'
    98  00100A  39                 	db	57	;'9'
    99  00100B  41                 	db	65	;'A'
   100  00100C  42                 	db	66	;'B'
   101  00100D  43                 	db	67	;'C'
   102  00100E  44                 	db	68	;'D'
   103  00100F  45                 	db	69	;'E'
   104  001010  46                 	db	70	;'F'
   105  001011  00                 	db	0
   106  001012                     STR_1:
   107  001012  54                 	db	84	;'T'
   108  001013  65                 	db	101	;'e'
   109  001014  6D                 	db	109	;'m'
   110  001015  70                 	db	112	;'p'
   111  001016  65                 	db	101	;'e'
   112  001017  72                 	db	114	;'r'
   113  001018  61                 	db	97	;'a'
   114  001019  74                 	db	116	;'t'
   115  00101A  75                 	db	117	;'u'
   116  00101B  72                 	db	114	;'r'
   117  00101C  65                 	db	101	;'e'
   118  00101D  20                 	db	32
   119  00101E  3A                 	db	58	;':'
   120  00101F  20                 	db	32
   121  001020  00                 	db	0
   122  001021                     STR_2:
   123  001021  20                 	db	32
   124  001022  43                 	db	67	;'C'
   125  001023  00                 	db	0
   126  001024  00                 	db	0	; dummy byte at the end
   127  0000                     
   128                           ; #config settings
   129                           
   130                           	psect	cinit
   131  001606                     __pcinit:
   132                           	callstack 0
   133  001606                     start_initialization:
   134                           	callstack 0
   135  001606                     __initialization:
   136                           	callstack 0
   137  001606                     end_of_initialization:
   138                           	callstack 0
   139  001606                     __end_of__initialization:
   140                           	callstack 0
   141  001606  0E00               	movlw	low (__Lmediumconst shr (0+16))
   142  001608  6EF8               	movwf	tblptru,c
   143  00160A  0100               	movlb	0
   144  00160C  EF01  F00A         	goto	_main	;jump to C main() function
   145                           
   146                           	psect	cstackCOMRAM
   147  000001                     __pcstackCOMRAM:
   148                           	callstack 0
   149  000001                     ??_i2c_waitForIdle:
   150  000001                     ?___awdiv:
   151                           	callstack 0
   152  000001                     ?___awmod:
   153                           	callstack 0
   154  000001                     ReadByte@status:
   155                           	callstack 0
   156  000001                     WriteNibble@data:
   157                           	callstack 0
   158  000001                     ___awdiv@dividend:
   159                           	callstack 0
   160  000001                     ___awmod@dividend:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x0
   164  000001                     	ds	1
   165  000002                     ??_WriteNibble:
   166  000002                     i2c_read@i2cReadData:
   167                           	callstack 0
   168  000002                     i2c_write@i2cWriteData:
   169                           	callstack 0
   170  000002                     WaitLCD@status:
   171                           	callstack 0
   172                           
   173                           ; 1 bytes @ 0x1
   174  000002                     	ds	1
   175  000003                     ?_getTemperature:
   176                           	callstack 0
   177  000003                     WriteNibble@cmd:
   178                           	callstack 0
   179  000003                     ___awdiv@divisor:
   180                           	callstack 0
   181  000003                     ___awmod@divisor:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0x2
   185  000003                     	ds	1
   186  000004                     ??_LCDInit:
   187  000004                     WriteByte@data:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x3
   191  000004                     	ds	1
   192  000005                     ??_getTemperature:
   193  000005                     WriteByte@cmd:
   194                           	callstack 0
   195  000005                     ___awdiv@counter:
   196                           	callstack 0
   197  000005                     ___awmod@counter:
   198                           	callstack 0
   199                           
   200                           ; 1 bytes @ 0x4
   201  000005                     	ds	1
   202  000006                     ??_LCDClear:
   203  000006                     LCDGoto@row:
   204                           	callstack 0
   205  000006                     LCDPutChar@data:
   206                           	callstack 0
   207  000006                     ___awdiv@sign:
   208                           	callstack 0
   209  000006                     ___awmod@sign:
   210                           	callstack 0
   211  000006                     getTemperature@temperature:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0x5
   215  000006                     	ds	1
   216  000007                     ??_LCDGoto:
   217  000007                     LCDWriteStr@string:
   218                           	callstack 0
   219  000007                     ___awdiv@quotient:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x6
   223  000007                     	ds	2
   224  000009                     ??_LCDWriteStr:
   225  000009                     _LCDGoto$682:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0x8
   229  000009                     	ds	2
   230  00000B                     LCDGoto@column:
   231                           	callstack 0
   232  00000B                     LCDWriteStr@i:
   233                           	callstack 0
   234                           
   235                           ; 1 bytes @ 0xA
   236  00000B                     	ds	1
   237  00000C                     LCDWriteInt@row:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0xB
   241  00000C                     	ds	1
   242  00000D                     LCDWriteInt@value:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0xC
   246  00000D                     	ds	1
   247  00000E                     LCDWriteInt@column:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0xD
   251  00000E                     	ds	1
   252  00000F                     LCDWriteInt@string:
   253                           	callstack 0
   254                           
   255                           ; 3 bytes @ 0xE
   256  00000F                     	ds	3
   257  000012                     main@temperature:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0x11
   261  000012                     	ds	2
   262                           
   263 ;;
   264 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   265 ;;
   266 ;; *************** function _main *****************
   267 ;; Defined at:
   268 ;;		line 99 in file "main.c"
   269 ;; Parameters:    Size  Location     Type
   270 ;;		None
   271 ;; Auto vars:     Size  Location     Type
   272 ;;  temperature     2   17[COMRAM] int 
   273 ;; Return value:  Size  Location     Type
   274 ;;                  1    wreg      void 
   275 ;; Registers used:
   276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   277 ;; Tracked objects:
   278 ;;		On entry : 0/0
   279 ;;		On exit  : 0/0
   280 ;;		Unchanged: 0/0
   281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   286 ;;Total ram usage:        2 bytes
   287 ;; Hardware stack levels required when called:    5
   288 ;; This function calls:
   289 ;;		_LCDClear
   290 ;;		_LCDInit
   291 ;;		_LCDWriteInt
   292 ;;		_LCDWriteStr
   293 ;;		_getTemperature
   294 ;; This function is called by:
   295 ;;		Startup code after reset
   296 ;; This function uses a non-reentrant model
   297 ;;
   298                           
   299                           	psect	text0
   300  001402                     __ptext0:
   301                           	callstack 0
   302  001402                     _main:
   303                           	callstack 26
   304  001402                     
   305                           ;main.c: 100:     LCDInit();
   306  001402  EC13  F008         	call	_LCDInit	;wreg free
   307                           
   308                           ;main.c: 101:     LCDClear();
   309  001406  EC94  F00A         	call	_LCDClear	;wreg free
   310  00140A                     
   311                           ;main.c: 102:     LCDWriteStr("Temperature : ");
   312  00140A  0E12               	movlw	low STR_1
   313  00140C  6E07               	movwf	LCDWriteStr@string^0,c
   314  00140E  0E10               	movlw	high STR_1
   315  001410  6E08               	movwf	(LCDWriteStr@string+1)^0,c
   316  001412  EC41  F009         	call	_LCDWriteStr	;wreg free
   317  001416                     l1441:
   318                           
   319                           ;main.c: 104:         int temperature = getTemperature();
   320  001416  EC22  F00A         	call	_getTemperature	;wreg free
   321  00141A  C003  F012         	movff	?_getTemperature,main@temperature
   322  00141E  C004  F013         	movff	?_getTemperature+1,main@temperature+1
   323                           
   324                           ;main.c: 105:         LCDWriteInt(0,1,temperature);
   325  001422  0E01               	movlw	1
   326  001424  6E0C               	movwf	LCDWriteInt@row^0,c
   327  001426  C012  F00D         	movff	main@temperature,LCDWriteInt@value
   328  00142A  0E00               	movlw	0
   329  00142C  ECB4  F009         	call	_LCDWriteInt
   330                           
   331                           ;main.c: 106:         LCDWriteStr(" C");
   332  001430  0E21               	movlw	low STR_2
   333  001432  6E07               	movwf	LCDWriteStr@string^0,c
   334  001434  0E10               	movlw	high STR_2
   335  001436  6E08               	movwf	(LCDWriteStr@string+1)^0,c
   336  001438  EC41  F009         	call	_LCDWriteStr	;wreg free
   337  00143C  EF0B  F00A         	goto	l1441
   338  001440  EF00  F000         	goto	start
   339  001444                     __end_of_main:
   340                           	callstack 0
   341                           
   342 ;; *************** function _getTemperature *****************
   343 ;; Defined at:
   344 ;;		line 81 in file "main.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;  temperature     2    5[COMRAM] int 
   349 ;; Return value:  Size  Location     Type
   350 ;;                  2    2[COMRAM] int 
   351 ;; Registers used:
   352 ;;		wreg, status,2, status,0, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : 0/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   358 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   361 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   362 ;;Total ram usage:        5 bytes
   363 ;; Hardware stack levels used:    1
   364 ;; Hardware stack levels required when called:    2
   365 ;; This function calls:
   366 ;;		_i2c_NAK
   367 ;;		_i2c_init
   368 ;;		_i2c_read
   369 ;;		_i2c_repStart
   370 ;;		_i2c_start
   371 ;;		_i2c_stop
   372 ;;		_i2c_write
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text1
   379  001444                     __ptext1:
   380                           	callstack 0
   381  001444                     _getTemperature:
   382                           	callstack 28
   383  001444                     
   384                           ;main.c: 84:     i2c_init();
   385  001444  EC6E  F00A         	call	_i2c_init	;wreg free
   386  001448                     
   387                           ;main.c: 86:     i2c_start();
   388  001448  ECF0  F00A         	call	_i2c_start	;wreg free
   389  00144C                     
   390                           ;main.c: 87:     i2c_write(0b01001101<<1);
   391  00144C  0E9A               	movlw	154
   392  00144E  ECA4  F00A         	call	_i2c_write
   393  001452                     
   394                           ;main.c: 88:     i2c_write(0x00);
   395  001452  0E00               	movlw	0
   396  001454  ECA4  F00A         	call	_i2c_write
   397  001458                     
   398                           ;main.c: 89:     i2c_repStart();
   399  001458  ECD9  F00A         	call	_i2c_repStart	;wreg free
   400  00145C                     
   401                           ;main.c: 90:     i2c_write((0b01001101<<1)|1);
   402  00145C  0E9B               	movlw	155
   403  00145E  ECA4  F00A         	call	_i2c_write
   404  001462                     
   405                           ;main.c: 91:     int temperature = i2c_read();
   406  001462  EC84  F00A         	call	_i2c_read	;wreg free
   407  001466  6E05               	movwf	??_getTemperature^0,c
   408  001468  5005               	movf	??_getTemperature^0,w,c
   409  00146A  6E06               	movwf	getTemperature@temperature^0,c
   410  00146C  6A07               	clrf	(getTemperature@temperature+1)^0,c
   411  00146E                     
   412                           ;main.c: 92:     i2c_NAK();
   413  00146E  ECE5  F00A         	call	_i2c_NAK	;wreg free
   414  001472                     
   415                           ;main.c: 93:     i2c_stop();
   416  001472  ECCD  F00A         	call	_i2c_stop	;wreg free
   417  001476                     
   418                           ;main.c: 95:     return temperature;
   419  001476  C006  F003         	movff	getTemperature@temperature,?_getTemperature
   420  00147A  C007  F004         	movff	getTemperature@temperature+1,?_getTemperature+1
   421  00147E  0012               	return		;funcret
   422  001480                     __end_of_getTemperature:
   423                           	callstack 0
   424                           
   425 ;; *************** function _i2c_write *****************
   426 ;; Defined at:
   427 ;;		line 102 in file "i2c.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;  i2cWriteData    1    wreg     unsigned char 
   430 ;; Auto vars:     Size  Location     Type
   431 ;;  i2cWriteData    1    1[COMRAM] unsigned char 
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, status,2, status,0, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;Total ram usage:        1 bytes
   446 ;; Hardware stack levels used:    1
   447 ;; Hardware stack levels required when called:    1
   448 ;; This function calls:
   449 ;;		_i2c_waitForIdle
   450 ;; This function is called by:
   451 ;;		_getTemperature
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           	psect	text2
   456  001548                     __ptext2:
   457                           	callstack 0
   458  001548                     _i2c_write:
   459                           	callstack 28
   460                           
   461                           ;incstack = 0
   462                           ;i2c_write@i2cWriteData stored from wreg
   463  001548  6E02               	movwf	i2c_write@i2cWriteData^0,c
   464  00154A                     
   465                           ;i2c.c: 104:     i2c_waitForIdle();
   466  00154A  EC58  F00A         	call	_i2c_waitForIdle	;wreg free
   467  00154E                     
   468                           ;i2c.c: 106:     PIR1bits.SSP1IF = 0;
   469  00154E  969E               	bcf	158,3,c	;volatile
   470  001550                     
   471                           ;i2c.c: 107:     SSP1BUF = i2cWriteData;
   472  001550  C002  FFC9         	movff	i2c_write@i2cWriteData,4041	;volatile
   473  001554                     l105:
   474  001554  A69E               	btfss	158,3,c	;volatile
   475  001556  EFAF  F00A         	goto	u71
   476  00155A  EFB1  F00A         	goto	u70
   477  00155E                     u71:
   478  00155E  EFAA  F00A         	goto	l105
   479  001562                     u70:
   480  001562  0012               	return		;funcret
   481  001564                     __end_of_i2c_write:
   482                           	callstack 0
   483                           
   484 ;; *************** function _i2c_stop *****************
   485 ;; Defined at:
   486 ;;		line 64 in file "i2c.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, status,2, status,0, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;Total ram usage:        0 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; Hardware stack levels required when called:    1
   507 ;; This function calls:
   508 ;;		_i2c_waitForIdle
   509 ;; This function is called by:
   510 ;;		_getTemperature
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text3
   515  00159A                     __ptext3:
   516                           	callstack 0
   517  00159A                     _i2c_stop:
   518                           	callstack 28
   519  00159A                     
   520                           ;i2c.c: 66:     i2c_waitForIdle();
   521  00159A  EC58  F00A         	call	_i2c_waitForIdle	;wreg free
   522  00159E                     
   523                           ;i2c.c: 68:     PIR1bits.SSP1IF = 0;
   524  00159E  969E               	bcf	158,3,c	;volatile
   525  0015A0                     
   526                           ;i2c.c: 69:     SSP1CON2bits.PEN = 1;
   527  0015A0  84C5               	bsf	197,2,c	;volatile
   528  0015A2                     l81:
   529  0015A2  A69E               	btfss	158,3,c	;volatile
   530  0015A4  EFD6  F00A         	goto	u111
   531  0015A8  EFD8  F00A         	goto	u110
   532  0015AC                     u111:
   533  0015AC  EFD1  F00A         	goto	l81
   534  0015B0                     u110:
   535  0015B0  0012               	return		;funcret
   536  0015B2                     __end_of_i2c_stop:
   537                           	callstack 0
   538                           
   539 ;; *************** function _i2c_start *****************
   540 ;; Defined at:
   541 ;;		line 48 in file "i2c.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		None
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   559 ;;Total ram usage:        0 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_getTemperature
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text4
   569  0015E0                     __ptext4:
   570                           	callstack 0
   571  0015E0                     _i2c_start:
   572                           	callstack 29
   573  0015E0                     
   574                           ;i2c.c: 50:     PIR1bits.SSP1IF = 0;
   575  0015E0  969E               	bcf	158,3,c	;volatile
   576                           
   577                           ;i2c.c: 51:     SSP1CON2bits.SEN = 1;
   578  0015E2  80C5               	bsf	197,0,c	;volatile
   579  0015E4                     l69:
   580  0015E4  A69E               	btfss	158,3,c	;volatile
   581  0015E6  EFF7  F00A         	goto	u61
   582  0015EA  EFF9  F00A         	goto	u60
   583  0015EE                     u61:
   584  0015EE  EFF2  F00A         	goto	l69
   585  0015F2                     u60:
   586  0015F2  0012               	return		;funcret
   587  0015F4                     __end_of_i2c_start:
   588                           	callstack 0
   589                           
   590 ;; *************** function _i2c_repStart *****************
   591 ;; Defined at:
   592 ;;		line 55 in file "i2c.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, status,2, status,0, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   610 ;;Total ram usage:        0 bytes
   611 ;; Hardware stack levels used:    1
   612 ;; Hardware stack levels required when called:    1
   613 ;; This function calls:
   614 ;;		_i2c_waitForIdle
   615 ;; This function is called by:
   616 ;;		_getTemperature
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text5
   621  0015B2                     __ptext5:
   622                           	callstack 0
   623  0015B2                     _i2c_repStart:
   624                           	callstack 28
   625  0015B2                     
   626                           ;i2c.c: 57:     i2c_waitForIdle();
   627  0015B2  EC58  F00A         	call	_i2c_waitForIdle	;wreg free
   628  0015B6                     
   629                           ;i2c.c: 59:     PIR1bits.SSP1IF = 0;
   630  0015B6  969E               	bcf	158,3,c	;volatile
   631  0015B8                     
   632                           ;i2c.c: 60:     SSP1CON2bits.RSEN = 1;
   633  0015B8  82C5               	bsf	197,1,c	;volatile
   634  0015BA                     l75:
   635  0015BA  A69E               	btfss	158,3,c	;volatile
   636  0015BC  EFE2  F00A         	goto	u81
   637  0015C0  EFE4  F00A         	goto	u80
   638  0015C4                     u81:
   639  0015C4  EFDD  F00A         	goto	l75
   640  0015C8                     u80:
   641  0015C8  0012               	return		;funcret
   642  0015CA                     __end_of_i2c_repStart:
   643                           	callstack 0
   644                           
   645 ;; *************** function _i2c_read *****************
   646 ;; Defined at:
   647 ;;		line 88 in file "i2c.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  i2cReadData     1    1[COMRAM] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      unsigned char 
   654 ;; Registers used:
   655 ;;		wreg, status,2, status,0, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   664 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;Total ram usage:        1 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    1
   668 ;; This function calls:
   669 ;;		_i2c_waitForIdle
   670 ;; This function is called by:
   671 ;;		_getTemperature
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text6
   676  001508                     __ptext6:
   677                           	callstack 0
   678  001508                     _i2c_read:
   679                           	callstack 28
   680  001508                     
   681                           ;i2c.c: 91:     i2c_waitForIdle();
   682  001508  EC58  F00A         	call	_i2c_waitForIdle	;wreg free
   683  00150C                     
   684                           ;i2c.c: 93:     PIR1bits.SSP1IF = 0;
   685  00150C  969E               	bcf	158,3,c	;volatile
   686  00150E                     
   687                           ;i2c.c: 94:     SSP1CON2bits.RCEN = 1;
   688  00150E  86C5               	bsf	197,3,c	;volatile
   689  001510                     l99:
   690  001510  A0C7               	btfss	199,0,c	;volatile
   691  001512  EF8D  F00A         	goto	u91
   692  001516  EF8F  F00A         	goto	u90
   693  00151A                     u91:
   694  00151A  EF88  F00A         	goto	l99
   695  00151E                     u90:
   696  00151E                     
   697                           ;i2c.c: 97:     PIR1bits.SSP1IF = 0;
   698  00151E  969E               	bcf	158,3,c	;volatile
   699                           
   700                           ;i2c.c: 98:     i2cReadData = SSP1BUF;
   701  001520  CFC9 F002          	movff	4041,i2c_read@i2cReadData	;volatile
   702  001524                     
   703                           ;i2c.c: 99:     return i2cReadData;
   704  001524  5002               	movf	i2c_read@i2cReadData^0,w,c
   705  001526  0012               	return		;funcret
   706  001528                     __end_of_i2c_read:
   707                           	callstack 0
   708                           
   709 ;; *************** function _i2c_waitForIdle *****************
   710 ;; Defined at:
   711 ;;		line 42 in file "i2c.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, status,2, status,0
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   729 ;;Total ram usage:        1 bytes
   730 ;; Hardware stack levels used:    1
   731 ;; This function calls:
   732 ;;		Nothing
   733 ;; This function is called by:
   734 ;;		_i2c_repStart
   735 ;;		_i2c_stop
   736 ;;		_i2c_read
   737 ;;		_i2c_write
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           	psect	text7
   742  0014B0                     __ptext7:
   743                           	callstack 0
   744  0014B0                     _i2c_waitForIdle:
   745                           	callstack 28
   746  0014B0                     l907:
   747  0014B0  B4C7               	btfsc	199,2,c	;volatile
   748  0014B2  EF5D  F00A         	goto	u41
   749  0014B6  EF61  F00A         	goto	u40
   750  0014BA                     u41:
   751  0014BA  6A01               	clrf	??_i2c_waitForIdle^0,c
   752  0014BC  2A01               	incf	??_i2c_waitForIdle^0,f,c
   753  0014BE  EF62  F00A         	goto	u48
   754  0014C2                     u40:
   755  0014C2  6A01               	clrf	??_i2c_waitForIdle^0,c
   756  0014C4                     u48:
   757  0014C4  50C5               	movf	197,w,c	;volatile
   758  0014C6  0B1F               	andlw	31
   759  0014C8  1001               	iorwf	??_i2c_waitForIdle^0,w,c
   760  0014CA  0900               	iorlw	0
   761  0014CC  A4D8               	btfss	status,2,c
   762  0014CE  EF6B  F00A         	goto	u51
   763  0014D2  EF6D  F00A         	goto	u50
   764  0014D6                     u51:
   765  0014D6  EF58  F00A         	goto	l907
   766  0014DA                     u50:
   767  0014DA  0012               	return		;funcret
   768  0014DC                     __end_of_i2c_waitForIdle:
   769                           	callstack 0
   770                           
   771 ;; *************** function _i2c_init *****************
   772 ;; Defined at:
   773 ;;		line 19 in file "i2c.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, status,2
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_getTemperature
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text8
   801  0014DC                     __ptext8:
   802                           	callstack 0
   803  0014DC                     _i2c_init:
   804                           	callstack 29
   805  0014DC                     
   806                           ;i2c.c: 21:     TRISCbits.TRISC3 = 1;
   807  0014DC  8694               	bsf	148,3,c	;volatile
   808                           
   809                           ;i2c.c: 22:     TRISCbits.TRISC4 = 1;
   810  0014DE  8894               	bsf	148,4,c	;volatile
   811                           
   812                           ;i2c.c: 23:     ANSELCbits.ANSC3 = 0;
   813  0014E0  010F               	movlb	15	; () banked
   814  0014E2  973A               	bcf	58,3,b	;volatile
   815                           
   816                           ;i2c.c: 24:     ANSELCbits.ANSC4 = 0;
   817  0014E4  993A               	bcf	58,4,b	;volatile
   818  0014E6                     
   819                           ; BSR set to: 15
   820                           ;i2c.c: 26:     SSP1CON1 = 0b00101000;
   821  0014E6  0E28               	movlw	40
   822  0014E8  6EC6               	movwf	198,c	;volatile
   823  0014EA                     
   824                           ; BSR set to: 15
   825                           ;i2c.c: 27:     __nop();
   826  0014EA  F000               	nop	
   827  0014EC                     
   828                           ;i2c.c: 28:     __nop();
   829  0014EC  F000               	nop	
   830  0014EE                     
   831                           ;i2c.c: 29:     __nop();
   832  0014EE  F000               	nop	
   833                           
   834                           ;i2c.c: 30:     SSP1ADD = 9;
   835  0014F0  0E09               	movlw	9
   836  0014F2  6EC8               	movwf	200,c	;volatile
   837  0014F4                     
   838                           ;i2c.c: 31:     __nop();
   839  0014F4  F000               	nop	
   840  0014F6                     
   841                           ;i2c.c: 32:     __nop();
   842  0014F6  F000               	nop	
   843  0014F8                     
   844                           ;i2c.c: 33:     __nop();
   845  0014F8  F000               	nop	
   846  0014FA                     
   847                           ;i2c.c: 34:     SSP1STATbits.SMP = 1;
   848  0014FA  8EC7               	bsf	199,7,c	;volatile
   849  0014FC                     
   850                           ;i2c.c: 35:     SSP1STATbits.CKE = 1;
   851  0014FC  8CC7               	bsf	199,6,c	;volatile
   852  0014FE                     
   853                           ;i2c.c: 36:     SSP1CON3bits.SCIE = 0;
   854  0014FE  9ACB               	bcf	203,5,c	;volatile
   855  001500                     
   856                           ;i2c.c: 37:     SSP1CON3bits.PCIE = 0;
   857  001500  9CCB               	bcf	203,6,c	;volatile
   858  001502                     
   859                           ;i2c.c: 38:     PIR1bits.SSP1IF = 0;
   860  001502  969E               	bcf	158,3,c	;volatile
   861  001504                     
   862                           ;i2c.c: 39:     PIR2bits.BCL1IF = 0;
   863  001504  96A1               	bcf	161,3,c	;volatile
   864  001506  0012               	return		;funcret
   865  001508                     __end_of_i2c_init:
   866                           	callstack 0
   867                           
   868 ;; *************** function _i2c_NAK *****************
   869 ;; Defined at:
   870 ;;		line 80 in file "i2c.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		None
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   888 ;;Total ram usage:        0 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; This function calls:
   891 ;;		Nothing
   892 ;; This function is called by:
   893 ;;		_getTemperature
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text9
   898  0015CA                     __ptext9:
   899                           	callstack 0
   900  0015CA                     _i2c_NAK:
   901                           	callstack 29
   902  0015CA                     
   903                           ;i2c.c: 82:     PIR1bits.SSP1IF = 0;
   904  0015CA  969E               	bcf	158,3,c	;volatile
   905                           
   906                           ;i2c.c: 83:     SSP1CON2bits.ACKDT = 1;
   907  0015CC  8AC5               	bsf	197,5,c	;volatile
   908                           
   909                           ;i2c.c: 84:     SSP1CON2bits.ACKEN = 1;
   910  0015CE  88C5               	bsf	197,4,c	;volatile
   911  0015D0                     l93:
   912  0015D0  A69E               	btfss	158,3,c	;volatile
   913  0015D2  EFED  F00A         	goto	u101
   914  0015D6  EFEF  F00A         	goto	u100
   915  0015DA                     u101:
   916  0015DA  EFE8  F00A         	goto	l93
   917  0015DE                     u100:
   918  0015DE  0012               	return		;funcret
   919  0015E0                     __end_of_i2c_NAK:
   920                           	callstack 0
   921                           
   922 ;; *************** function _LCDWriteInt *****************
   923 ;; Defined at:
   924 ;;		line 199 in file "lcd.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;  column          1    wreg     unsigned char 
   927 ;;  row             1   11[COMRAM] unsigned char 
   928 ;;  value           1   12[COMRAM] unsigned char 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  column          1   13[COMRAM] unsigned char 
   931 ;;  string          3   14[COMRAM] unsigned char [3]
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;Total ram usage:        6 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    4
   948 ;; This function calls:
   949 ;;		_LCDGoto
   950 ;;		_LCDWriteStr
   951 ;;		___awdiv
   952 ;;		___awmod
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text10
   959  001368                     __ptext10:
   960                           	callstack 0
   961  001368                     _LCDWriteInt:
   962                           	callstack 26
   963                           
   964                           ;incstack = 0
   965                           ;LCDWriteInt@column stored from wreg
   966  001368  6E0E               	movwf	LCDWriteInt@column^0,c
   967  00136A                     
   968                           ;lcd.c: 200:     char string[3];;lcd.c: 202:     string[0] = value / 10 + '0';
   969  00136A  C00D  F001         	movff	LCDWriteInt@value,___awdiv@dividend
   970  00136E  6A02               	clrf	(___awdiv@dividend+1)^0,c
   971  001370  0E00               	movlw	0
   972  001372  6E04               	movwf	(___awdiv@divisor+1)^0,c
   973  001374  0E0A               	movlw	10
   974  001376  6E03               	movwf	___awdiv@divisor^0,c
   975  001378  EC87  F008         	call	___awdiv	;wreg free
   976  00137C  5001               	movf	?___awdiv^0,w,c
   977  00137E  0F30               	addlw	48
   978  001380  6E0F               	movwf	LCDWriteInt@string^0,c
   979                           
   980                           ;lcd.c: 203:     string[1] = value % 10 + '0';
   981  001382  C00D  F001         	movff	LCDWriteInt@value,___awmod@dividend
   982  001386  6A02               	clrf	(___awmod@dividend+1)^0,c
   983  001388  0E00               	movlw	0
   984  00138A  6E04               	movwf	(___awmod@divisor+1)^0,c
   985  00138C  0E0A               	movlw	10
   986  00138E  6E03               	movwf	___awmod@divisor^0,c
   987  001390  ECE9  F008         	call	___awmod	;wreg free
   988  001394  5001               	movf	?___awmod^0,w,c
   989  001396  0F30               	addlw	48
   990  001398  6E10               	movwf	(LCDWriteInt@string+1)^0,c
   991  00139A                     
   992                           ;lcd.c: 204:     string[2] = '\0';
   993  00139A  0E00               	movlw	0
   994  00139C  6E11               	movwf	(LCDWriteInt@string+2)^0,c
   995  00139E                     
   996                           ;lcd.c: 206:     LCDGoto(column, row);
   997  00139E  C00C  F006         	movff	LCDWriteInt@row,LCDGoto@row
   998  0013A2  500E               	movf	LCDWriteInt@column^0,w,c
   999  0013A4  EC7F  F009         	call	_LCDGoto
  1000  0013A8                     
  1001                           ;lcd.c: 207:     LCDWriteStr(string);
  1002  0013A8  0E0F               	movlw	low LCDWriteInt@string
  1003  0013AA  6E07               	movwf	LCDWriteStr@string^0,c
  1004  0013AC  0E00               	movlw	high LCDWriteInt@string
  1005  0013AE  6E08               	movwf	(LCDWriteStr@string+1)^0,c
  1006  0013B0  EC41  F009         	call	_LCDWriteStr	;wreg free
  1007  0013B4  0012               	return		;funcret
  1008  0013B6                     __end_of_LCDWriteInt:
  1009                           	callstack 0
  1010                           
  1011 ;; *************** function ___awmod *****************
  1012 ;; Defined at:
  1013 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awmod.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  dividend        2    0[COMRAM] int 
  1016 ;;  divisor         2    2[COMRAM] int 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  sign            1    5[COMRAM] unsigned char 
  1019 ;;  counter         1    4[COMRAM] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  2    0[COMRAM] int 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;Total ram usage:        6 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; This function calls:
  1036 ;;		Nothing
  1037 ;; This function is called by:
  1038 ;;		_LCDWriteInt
  1039 ;;		_LCDPutByte
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text11
  1044  0011D2                     __ptext11:
  1045                           	callstack 0
  1046  0011D2                     ___awmod:
  1047                           	callstack 29
  1048  0011D2  0E00               	movlw	0
  1049  0011D4  6E06               	movwf	___awmod@sign^0,c
  1050  0011D6  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1051  0011D8  EFF2  F008         	goto	u470
  1052  0011DC  EFF0  F008         	goto	u471
  1053  0011E0                     u471:
  1054  0011E0  EFF8  F008         	goto	l1327
  1055  0011E4                     u470:
  1056  0011E4  6C01               	negf	___awmod@dividend^0,c
  1057  0011E6  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1058  0011E8  B0D8               	btfsc	status,0,c
  1059  0011EA  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1060  0011EC  0E01               	movlw	1
  1061  0011EE  6E06               	movwf	___awmod@sign^0,c
  1062  0011F0                     l1327:
  1063  0011F0  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1064  0011F2  EFFF  F008         	goto	u480
  1065  0011F6  EFFD  F008         	goto	u481
  1066  0011FA                     u481:
  1067  0011FA  EF03  F009         	goto	l1331
  1068  0011FE                     u480:
  1069  0011FE  6C03               	negf	___awmod@divisor^0,c
  1070  001200  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1071  001202  B0D8               	btfsc	status,0,c
  1072  001204  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1073  001206                     l1331:
  1074  001206  5003               	movf	___awmod@divisor^0,w,c
  1075  001208  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1076  00120A  B4D8               	btfsc	status,2,c
  1077  00120C  EF0A  F009         	goto	u491
  1078  001210  EF0C  F009         	goto	u490
  1079  001214                     u491:
  1080  001214  EF30  F009         	goto	l1347
  1081  001218                     u490:
  1082  001218  0E01               	movlw	1
  1083  00121A  6E05               	movwf	___awmod@counter^0,c
  1084  00121C  EF14  F009         	goto	l1337
  1085  001220                     l1335:
  1086  001220  90D8               	bcf	status,0,c
  1087  001222  3603               	rlcf	___awmod@divisor^0,f,c
  1088  001224  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1089  001226  2A05               	incf	___awmod@counter^0,f,c
  1090  001228                     l1337:
  1091  001228  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1092  00122A  EF19  F009         	goto	u501
  1093  00122E  EF1B  F009         	goto	u500
  1094  001232                     u501:
  1095  001232  EF10  F009         	goto	l1335
  1096  001236                     u500:
  1097  001236                     l1339:
  1098  001236  5003               	movf	___awmod@divisor^0,w,c
  1099  001238  5C01               	subwf	___awmod@dividend^0,w,c
  1100  00123A  5004               	movf	(___awmod@divisor+1)^0,w,c
  1101  00123C  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1102  00123E  A0D8               	btfss	status,0,c
  1103  001240  EF24  F009         	goto	u511
  1104  001244  EF26  F009         	goto	u510
  1105  001248                     u511:
  1106  001248  EF2A  F009         	goto	l1343
  1107  00124C                     u510:
  1108  00124C  5003               	movf	___awmod@divisor^0,w,c
  1109  00124E  5E01               	subwf	___awmod@dividend^0,f,c
  1110  001250  5004               	movf	(___awmod@divisor+1)^0,w,c
  1111  001252  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1112  001254                     l1343:
  1113  001254  90D8               	bcf	status,0,c
  1114  001256  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1115  001258  3203               	rrcf	___awmod@divisor^0,f,c
  1116  00125A  2E05               	decfsz	___awmod@counter^0,f,c
  1117  00125C  EF1B  F009         	goto	l1339
  1118  001260                     l1347:
  1119  001260  5006               	movf	___awmod@sign^0,w,c
  1120  001262  B4D8               	btfsc	status,2,c
  1121  001264  EF36  F009         	goto	u521
  1122  001268  EF38  F009         	goto	u520
  1123  00126C                     u521:
  1124  00126C  EF3C  F009         	goto	l1351
  1125  001270                     u520:
  1126  001270  6C01               	negf	___awmod@dividend^0,c
  1127  001272  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1128  001274  B0D8               	btfsc	status,0,c
  1129  001276  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1130  001278                     l1351:
  1131  001278  C001  F001         	movff	___awmod@dividend,?___awmod
  1132  00127C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1133  001280  0012               	return		;funcret
  1134  001282                     __end_of___awmod:
  1135                           	callstack 0
  1136                           
  1137 ;; *************** function ___awdiv *****************
  1138 ;; Defined at:
  1139 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awdiv.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  dividend        2    0[COMRAM] int 
  1142 ;;  divisor         2    2[COMRAM] int 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  quotient        2    6[COMRAM] int 
  1145 ;;  sign            1    5[COMRAM] unsigned char 
  1146 ;;  counter         1    4[COMRAM] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  2    0[COMRAM] int 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, status,0
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;Total ram usage:        8 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_LCDWriteInt
  1166 ;;		_LCDPutByte
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           	psect	text12
  1171  00110E                     __ptext12:
  1172                           	callstack 0
  1173  00110E                     ___awdiv:
  1174                           	callstack 29
  1175  00110E  0E00               	movlw	0
  1176  001110  6E06               	movwf	___awdiv@sign^0,c
  1177  001112  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1178  001114  EF90  F008         	goto	u410
  1179  001118  EF8E  F008         	goto	u411
  1180  00111C                     u411:
  1181  00111C  EF96  F008         	goto	l1283
  1182  001120                     u410:
  1183  001120  6C03               	negf	___awdiv@divisor^0,c
  1184  001122  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1185  001124  B0D8               	btfsc	status,0,c
  1186  001126  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1187  001128  0E01               	movlw	1
  1188  00112A  6E06               	movwf	___awdiv@sign^0,c
  1189  00112C                     l1283:
  1190  00112C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1191  00112E  EF9D  F008         	goto	u420
  1192  001132  EF9B  F008         	goto	u421
  1193  001136                     u421:
  1194  001136  EFA3  F008         	goto	l1289
  1195  00113A                     u420:
  1196  00113A  6C01               	negf	___awdiv@dividend^0,c
  1197  00113C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1198  00113E  B0D8               	btfsc	status,0,c
  1199  001140  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1200  001142  0E01               	movlw	1
  1201  001144  1A06               	xorwf	___awdiv@sign^0,f,c
  1202  001146                     l1289:
  1203  001146  0E00               	movlw	0
  1204  001148  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1205  00114A  0E00               	movlw	0
  1206  00114C  6E07               	movwf	___awdiv@quotient^0,c
  1207  00114E  5003               	movf	___awdiv@divisor^0,w,c
  1208  001150  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1209  001152  B4D8               	btfsc	status,2,c
  1210  001154  EFAE  F008         	goto	u431
  1211  001158  EFB0  F008         	goto	u430
  1212  00115C                     u431:
  1213  00115C  EFD8  F008         	goto	l1311
  1214  001160                     u430:
  1215  001160  0E01               	movlw	1
  1216  001162  6E05               	movwf	___awdiv@counter^0,c
  1217  001164  EFB8  F008         	goto	l1297
  1218  001168                     l1295:
  1219  001168  90D8               	bcf	status,0,c
  1220  00116A  3603               	rlcf	___awdiv@divisor^0,f,c
  1221  00116C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1222  00116E  2A05               	incf	___awdiv@counter^0,f,c
  1223  001170                     l1297:
  1224  001170  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1225  001172  EFBD  F008         	goto	u441
  1226  001176  EFBF  F008         	goto	u440
  1227  00117A                     u441:
  1228  00117A  EFB4  F008         	goto	l1295
  1229  00117E                     u440:
  1230  00117E                     l1299:
  1231  00117E  90D8               	bcf	status,0,c
  1232  001180  3607               	rlcf	___awdiv@quotient^0,f,c
  1233  001182  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1234  001184  5003               	movf	___awdiv@divisor^0,w,c
  1235  001186  5C01               	subwf	___awdiv@dividend^0,w,c
  1236  001188  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1237  00118A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1238  00118C  A0D8               	btfss	status,0,c
  1239  00118E  EFCB  F008         	goto	u451
  1240  001192  EFCD  F008         	goto	u450
  1241  001196                     u451:
  1242  001196  EFD2  F008         	goto	l1307
  1243  00119A                     u450:
  1244  00119A  5003               	movf	___awdiv@divisor^0,w,c
  1245  00119C  5E01               	subwf	___awdiv@dividend^0,f,c
  1246  00119E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1247  0011A0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1248  0011A2  8007               	bsf	___awdiv@quotient^0,0,c
  1249  0011A4                     l1307:
  1250  0011A4  90D8               	bcf	status,0,c
  1251  0011A6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1252  0011A8  3203               	rrcf	___awdiv@divisor^0,f,c
  1253  0011AA  2E05               	decfsz	___awdiv@counter^0,f,c
  1254  0011AC  EFBF  F008         	goto	l1299
  1255  0011B0                     l1311:
  1256  0011B0  5006               	movf	___awdiv@sign^0,w,c
  1257  0011B2  B4D8               	btfsc	status,2,c
  1258  0011B4  EFDE  F008         	goto	u461
  1259  0011B8  EFE0  F008         	goto	u460
  1260  0011BC                     u461:
  1261  0011BC  EFE4  F008         	goto	l1315
  1262  0011C0                     u460:
  1263  0011C0  6C07               	negf	___awdiv@quotient^0,c
  1264  0011C2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1265  0011C4  B0D8               	btfsc	status,0,c
  1266  0011C6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1267  0011C8                     l1315:
  1268  0011C8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1269  0011CC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1270  0011D0  0012               	return		;funcret
  1271  0011D2                     __end_of___awdiv:
  1272                           	callstack 0
  1273                           
  1274 ;; *************** function _LCDWriteStr *****************
  1275 ;; Defined at:
  1276 ;;		line 163 in file "lcd.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  string          2    6[COMRAM] PTR const unsigned char 
  1279 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_2(3), 
  1280 ;;		 -> STR_1(15), 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  i               1   10[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;Total ram usage:        5 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    3
  1299 ;; This function calls:
  1300 ;;		_LCDPutChar
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;;		_LCDWriteInt
  1304 ;;		_LCDWriteHexa
  1305 ;;		_LCDWriteFloat
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text13
  1310  001282                     __ptext13:
  1311                           	callstack 0
  1312  001282                     _LCDWriteStr:
  1313                           	callstack 27
  1314  001282                     
  1315                           ;lcd.c: 163: void LCDWriteStr(const char *string);lcd.c: 164: {;lcd.c: 165:   UINT8_T i 
      +                          = 0;
  1316  001282  0E00               	movlw	0
  1317  001284  6E0B               	movwf	LCDWriteStr@i^0,c
  1318                           
  1319                           ;lcd.c: 167:   while (string[i])
  1320  001286  EF5F  F009         	goto	l1259
  1321  00128A                     l1255:
  1322                           
  1323                           ;lcd.c: 168:     LCDPutChar(string[i++]);
  1324  00128A  500B               	movf	LCDWriteStr@i^0,w,c
  1325  00128C  2407               	addwf	LCDWriteStr@string^0,w,c
  1326  00128E  6E09               	movwf	??_LCDWriteStr^0,c
  1327  001290  0E00               	movlw	0
  1328  001292  2008               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1329  001294  6E0A               	movwf	(??_LCDWriteStr+1)^0,c
  1330  001296  C009  FFF6         	movff	??_LCDWriteStr,tblptrl
  1331  00129A  C00A  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1332  00129E  0E00               	movlw	low (__smallconst shr (0+16))
  1333  0012A0  6EF8               	movwf	tblptru,c
  1334  0012A2  0E0F               	movlw	(high __ramtop+-1)
  1335  0012A4  64F7               	cpfsgt	tblptrh,c
  1336  0012A6  D003               	bra	u357
  1337  0012A8  0008               	tblrd		*
  1338  0012AA  50F5               	movf	tablat,w,c
  1339  0012AC  D005               	bra	u350
  1340  0012AE                     u357:
  1341  0012AE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1342  0012B2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1343  0012B6  50EF               	movf	indf0,w,c
  1344  0012B8                     u350:
  1345  0012B8  ECFA  F00A         	call	_LCDPutChar
  1346  0012BC  2A0B               	incf	LCDWriteStr@i^0,f,c
  1347  0012BE                     l1259:
  1348                           
  1349                           ;lcd.c: 167:   while (string[i])
  1350  0012BE  500B               	movf	LCDWriteStr@i^0,w,c
  1351  0012C0  2407               	addwf	LCDWriteStr@string^0,w,c
  1352  0012C2  6E09               	movwf	??_LCDWriteStr^0,c
  1353  0012C4  0E00               	movlw	0
  1354  0012C6  2008               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1355  0012C8  6E0A               	movwf	(??_LCDWriteStr+1)^0,c
  1356  0012CA  C009  FFF6         	movff	??_LCDWriteStr,tblptrl
  1357  0012CE  C00A  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1358  0012D2  0E00               	movlw	low (__smallconst shr (0+16))
  1359  0012D4  6EF8               	movwf	tblptru,c
  1360  0012D6  0E0F               	movlw	(high __ramtop+-1)
  1361  0012D8  64F7               	cpfsgt	tblptrh,c
  1362  0012DA  D003               	bra	u367
  1363  0012DC  0008               	tblrd		*
  1364  0012DE  50F5               	movf	tablat,w,c
  1365  0012E0  D005               	bra	u360
  1366  0012E2                     u367:
  1367  0012E2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1368  0012E6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1369  0012EA  50EF               	movf	indf0,w,c
  1370  0012EC                     u360:
  1371  0012EC  0900               	iorlw	0
  1372  0012EE  A4D8               	btfss	status,2,c
  1373  0012F0  EF7C  F009         	goto	u371
  1374  0012F4  EF7E  F009         	goto	u370
  1375  0012F8                     u371:
  1376  0012F8  EF45  F009         	goto	l1255
  1377  0012FC                     u370:
  1378  0012FC  0012               	return		;funcret
  1379  0012FE                     __end_of_LCDWriteStr:
  1380                           	callstack 0
  1381                           
  1382 ;; *************** function _LCDPutChar *****************
  1383 ;; Defined at:
  1384 ;;		line 150 in file "lcd.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  data            1    wreg     unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  data            1    5[COMRAM] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;Total ram usage:        1 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    2
  1405 ;; This function calls:
  1406 ;;		_WaitLCD
  1407 ;;		_WriteByte
  1408 ;; This function is called by:
  1409 ;;		_LCDWriteStr
  1410 ;;		_LCDPutByte
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text14
  1415  0015F4                     __ptext14:
  1416                           	callstack 0
  1417  0015F4                     _LCDPutChar:
  1418                           	callstack 27
  1419                           
  1420                           ;incstack = 0
  1421                           ;LCDPutChar@data stored from wreg
  1422  0015F4  6E06               	movwf	LCDPutChar@data^0,c
  1423  0015F6                     
  1424                           ;lcd.c: 150: void LCDPutChar(UINT8_T data);lcd.c: 151: {;lcd.c: 152:     WriteByte(0, da
      +                          ta);
  1425  0015F6  C006  F004         	movff	LCDPutChar@data,WriteByte@data
  1426  0015FA  0E00               	movlw	0
  1427  0015FC  ECC0  F00A         	call	_WriteByte
  1428                           
  1429                           ;lcd.c: 153:     WaitLCD();
  1430  001600  ECB2  F00A         	call	_WaitLCD	;wreg free
  1431  001604  0012               	return		;funcret
  1432  001606                     __end_of_LCDPutChar:
  1433                           	callstack 0
  1434                           
  1435 ;; *************** function _LCDGoto *****************
  1436 ;; Defined at:
  1437 ;;		line 141 in file "lcd.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  column          1    wreg     unsigned char 
  1440 ;;  row             1    5[COMRAM] unsigned char 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  column          1   10[COMRAM] unsigned char 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1452 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;Total ram usage:        6 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    2
  1459 ;; This function calls:
  1460 ;;		_WaitLCD
  1461 ;;		_WriteByte
  1462 ;; This function is called by:
  1463 ;;		_LCDWriteInt
  1464 ;;		_LCDWriteHexa
  1465 ;;		_LCDWriteFloat
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text15
  1470  0012FE                     __ptext15:
  1471                           	callstack 0
  1472  0012FE                     _LCDGoto:
  1473                           	callstack 27
  1474                           
  1475                           ;incstack = 0
  1476                           ;LCDGoto@column stored from wreg
  1477  0012FE  6E0B               	movwf	LCDGoto@column^0,c
  1478  001300                     
  1479                           ;lcd.c: 141: void LCDGoto(UINT8_T column, UINT8_T row);lcd.c: 142: {;lcd.c: 143:     if 
      +                          ((row > (2 - 1)) || (column > (16 - 1)))
  1480  001300  0E02               	movlw	2
  1481  001302  6006               	cpfslt	LCDGoto@row^0,c
  1482  001304  EF86  F009         	goto	u381
  1483  001308  EF88  F009         	goto	u380
  1484  00130C                     u381:
  1485  00130C  EFB3  F009         	goto	l146
  1486  001310                     u380:
  1487  001310  0E0F               	movlw	15
  1488  001312  640B               	cpfsgt	LCDGoto@column^0,c
  1489  001314  EF8E  F009         	goto	u391
  1490  001318  EF90  F009         	goto	u390
  1491  00131C                     u391:
  1492  00131C  EF92  F009         	goto	l1265
  1493  001320                     u390:
  1494  001320  EFB3  F009         	goto	l146
  1495  001324                     l1265:
  1496                           
  1497                           ;lcd.c: 146:     WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1498  001324  0406               	decf	LCDGoto@row^0,w,c
  1499  001326  B4D8               	btfsc	status,2,c
  1500  001328  EF98  F009         	goto	u401
  1501  00132C  EF9A  F009         	goto	u400
  1502  001330                     u401:
  1503  001330  EFA4  F009         	goto	l1269
  1504  001334                     u400:
  1505  001334  0E80               	movlw	128
  1506  001336  C00B  F007         	movff	LCDGoto@column,??_LCDGoto
  1507  00133A  6A08               	clrf	(??_LCDGoto+1)^0,c
  1508  00133C  1007               	iorwf	??_LCDGoto^0,w,c
  1509  00133E  6E09               	movwf	_LCDGoto$682^0,c
  1510  001340  5008               	movf	(??_LCDGoto+1)^0,w,c
  1511  001342  6E0A               	movwf	(_LCDGoto$682+1)^0,c
  1512  001344  EFAC  F009         	goto	l1271
  1513  001348                     l1269:
  1514  001348  0EC0               	movlw	192
  1515  00134A  C00B  F007         	movff	LCDGoto@column,??_LCDGoto
  1516  00134E  6A08               	clrf	(??_LCDGoto+1)^0,c
  1517  001350  1007               	iorwf	??_LCDGoto^0,w,c
  1518  001352  6E09               	movwf	_LCDGoto$682^0,c
  1519  001354  5008               	movf	(??_LCDGoto+1)^0,w,c
  1520  001356  6E0A               	movwf	(_LCDGoto$682+1)^0,c
  1521  001358                     l1271:
  1522  001358  C009  F004         	movff	_LCDGoto$682,WriteByte@data
  1523  00135C  0E01               	movlw	1
  1524  00135E  ECC0  F00A         	call	_WriteByte
  1525  001362                     
  1526                           ;lcd.c: 147:     WaitLCD();
  1527  001362  ECB2  F00A         	call	_WaitLCD	;wreg free
  1528  001366                     l146:
  1529  001366  0012               	return		;funcret
  1530  001368                     __end_of_LCDGoto:
  1531                           	callstack 0
  1532                           
  1533 ;; *************** function _LCDInit *****************
  1534 ;; Defined at:
  1535 ;;		line 94 in file "lcd.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;Total ram usage:        1 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    2
  1556 ;; This function calls:
  1557 ;;		_WaitLCD
  1558 ;;		_WriteNibble
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text16
  1565  001026                     __ptext16:
  1566                           	callstack 0
  1567  001026                     _LCDInit:
  1568                           	callstack 28
  1569  001026                     
  1570                           ;lcd.c: 96:     TRISDbits.TRISD7 = 0;
  1571  001026  9E95               	bcf	149,7,c	;volatile
  1572                           
  1573                           ;lcd.c: 97:     TRISDbits.TRISD6 = 0;
  1574  001028  9C95               	bcf	149,6,c	;volatile
  1575                           
  1576                           ;lcd.c: 98:     TRISDbits.TRISD5 = 0;
  1577  00102A  9A95               	bcf	149,5,c	;volatile
  1578                           
  1579                           ;lcd.c: 99:     TRISDbits.TRISD4 = 0;
  1580  00102C  9895               	bcf	149,4,c	;volatile
  1581                           
  1582                           ;lcd.c: 100:     TRISDbits.TRISD0 = 0;
  1583  00102E  9095               	bcf	149,0,c	;volatile
  1584                           
  1585                           ;lcd.c: 101:     TRISDbits.TRISD1 = 0;
  1586  001030  9295               	bcf	149,1,c	;volatile
  1587                           
  1588                           ;lcd.c: 102:     TRISDbits.TRISD2 = 0;
  1589  001032  9495               	bcf	149,2,c	;volatile
  1590                           
  1591                           ;lcd.c: 103:     TRISDbits.TRISD3 = 0;
  1592  001034  9695               	bcf	149,3,c	;volatile
  1593                           
  1594                           ;lcd.c: 105:     LATDbits.LATD7 = 1;
  1595  001036  8E8C               	bsf	140,7,c	;volatile
  1596  001038                     
  1597                           ;lcd.c: 106:     _delay(30000);
  1598  001038  0E27               	movlw	39
  1599  00103A  6E04               	movwf	??_LCDInit^0,c
  1600  00103C  0EF5               	movlw	245
  1601  00103E                     u547:
  1602  00103E  2EE8               	decfsz	wreg,f,c
  1603  001040  D7FE               	bra	u547
  1604  001042  2E04               	decfsz	??_LCDInit^0,f,c
  1605  001044  D7FC               	bra	u547
  1606  001046  F000               	nop	
  1607  001048                     
  1608                           ;lcd.c: 107:     WriteNibble(1, 0x03);
  1609  001048  0E03               	movlw	3
  1610  00104A  6E01               	movwf	WriteNibble@data^0,c
  1611  00104C  0E01               	movlw	1
  1612  00104E  ECDB  F009         	call	_WriteNibble
  1613  001052                     
  1614                           ;lcd.c: 108:     _delay(3000);
  1615  001052  0E04               	movlw	4
  1616  001054  6E04               	movwf	??_LCDInit^0,c
  1617  001056  0EE4               	movlw	228
  1618  001058                     u557:
  1619  001058  2EE8               	decfsz	wreg,f,c
  1620  00105A  D7FE               	bra	u557
  1621  00105C  2E04               	decfsz	??_LCDInit^0,f,c
  1622  00105E  D7FC               	bra	u557
  1623  001060  D000               	nop2	
  1624                           
  1625                           ;lcd.c: 109:     WriteNibble(1, 0x03);
  1626  001062  0E03               	movlw	3
  1627  001064  6E01               	movwf	WriteNibble@data^0,c
  1628  001066  0E01               	movlw	1
  1629  001068  ECDB  F009         	call	_WriteNibble
  1630  00106C                     
  1631                           ;lcd.c: 110:     _delay(100);
  1632  00106C  0E21               	movlw	33
  1633  00106E                     u567:
  1634  00106E  2EE8               	decfsz	wreg,f,c
  1635  001070  D7FE               	bra	u567
  1636  001072  F000               	nop	
  1637  001074                     
  1638                           ;lcd.c: 111:     WriteNibble(1, 0x03);
  1639  001074  0E03               	movlw	3
  1640  001076  6E01               	movwf	WriteNibble@data^0,c
  1641  001078  0E01               	movlw	1
  1642  00107A  ECDB  F009         	call	_WriteNibble
  1643                           
  1644                           ;lcd.c: 112:     _delay(100);
  1645  00107E  0E21               	movlw	33
  1646  001080                     u577:
  1647  001080  2EE8               	decfsz	wreg,f,c
  1648  001082  D7FE               	bra	u577
  1649  001084  F000               	nop	
  1650  001086                     
  1651                           ;lcd.c: 113:     WriteNibble(1, 0b00000010);
  1652  001086  0E02               	movlw	2
  1653  001088  6E01               	movwf	WriteNibble@data^0,c
  1654  00108A  0E01               	movlw	1
  1655  00108C  ECDB  F009         	call	_WriteNibble
  1656  001090                     
  1657                           ;lcd.c: 114:     WaitLCD();
  1658  001090  ECB2  F00A         	call	_WaitLCD	;wreg free
  1659  001094                     
  1660                           ;lcd.c: 115:     WriteNibble(1, 0b00000010);
  1661  001094  0E02               	movlw	2
  1662  001096  6E01               	movwf	WriteNibble@data^0,c
  1663  001098  0E01               	movlw	1
  1664  00109A  ECDB  F009         	call	_WriteNibble
  1665  00109E                     
  1666                           ;lcd.c: 116:     WriteNibble(1, 0b00001000);
  1667  00109E  0E08               	movlw	8
  1668  0010A0  6E01               	movwf	WriteNibble@data^0,c
  1669  0010A2  0E01               	movlw	1
  1670  0010A4  ECDB  F009         	call	_WriteNibble
  1671  0010A8                     
  1672                           ;lcd.c: 117:     WaitLCD();
  1673  0010A8  ECB2  F00A         	call	_WaitLCD	;wreg free
  1674  0010AC                     
  1675                           ;lcd.c: 118:     WriteNibble(1, 0b00000000);
  1676  0010AC  0E00               	movlw	0
  1677  0010AE  6E01               	movwf	WriteNibble@data^0,c
  1678  0010B0  0E01               	movlw	1
  1679  0010B2  ECDB  F009         	call	_WriteNibble
  1680  0010B6                     
  1681                           ;lcd.c: 119:     WriteNibble(1, 0b00001000);
  1682  0010B6  0E08               	movlw	8
  1683  0010B8  6E01               	movwf	WriteNibble@data^0,c
  1684  0010BA  0E01               	movlw	1
  1685  0010BC  ECDB  F009         	call	_WriteNibble
  1686  0010C0                     
  1687                           ;lcd.c: 120:     WaitLCD();
  1688  0010C0  ECB2  F00A         	call	_WaitLCD	;wreg free
  1689  0010C4                     
  1690                           ;lcd.c: 121:     WriteNibble(1, 0b00000000);
  1691  0010C4  0E00               	movlw	0
  1692  0010C6  6E01               	movwf	WriteNibble@data^0,c
  1693  0010C8  0E01               	movlw	1
  1694  0010CA  ECDB  F009         	call	_WriteNibble
  1695  0010CE                     
  1696                           ;lcd.c: 122:     WriteNibble(1, 0b00001100);
  1697  0010CE  0E0C               	movlw	12
  1698  0010D0  6E01               	movwf	WriteNibble@data^0,c
  1699  0010D2  0E01               	movlw	1
  1700  0010D4  ECDB  F009         	call	_WriteNibble
  1701  0010D8                     
  1702                           ;lcd.c: 125:     WaitLCD();
  1703  0010D8  ECB2  F00A         	call	_WaitLCD	;wreg free
  1704  0010DC                     
  1705                           ;lcd.c: 126:     WriteNibble(1, 0b00000000);
  1706  0010DC  0E00               	movlw	0
  1707  0010DE  6E01               	movwf	WriteNibble@data^0,c
  1708  0010E0  0E01               	movlw	1
  1709  0010E2  ECDB  F009         	call	_WriteNibble
  1710  0010E6                     
  1711                           ;lcd.c: 127:     WriteNibble(1, 0b00000001);
  1712  0010E6  0E01               	movlw	1
  1713  0010E8  6E01               	movwf	WriteNibble@data^0,c
  1714  0010EA  0E01               	movlw	1
  1715  0010EC  ECDB  F009         	call	_WriteNibble
  1716  0010F0                     
  1717                           ;lcd.c: 128:     WaitLCD();
  1718  0010F0  ECB2  F00A         	call	_WaitLCD	;wreg free
  1719  0010F4                     
  1720                           ;lcd.c: 129:     WriteNibble(1, 0b00000000);
  1721  0010F4  0E00               	movlw	0
  1722  0010F6  6E01               	movwf	WriteNibble@data^0,c
  1723  0010F8  0E01               	movlw	1
  1724  0010FA  ECDB  F009         	call	_WriteNibble
  1725  0010FE                     
  1726                           ;lcd.c: 130:     WriteNibble(1, 0b00000110);
  1727  0010FE  0E06               	movlw	6
  1728  001100  6E01               	movwf	WriteNibble@data^0,c
  1729  001102  0E01               	movlw	1
  1730  001104  ECDB  F009         	call	_WriteNibble
  1731  001108                     
  1732                           ;lcd.c: 131:     WaitLCD();
  1733  001108  ECB2  F00A         	call	_WaitLCD	;wreg free
  1734  00110C  0012               	return		;funcret
  1735  00110E                     __end_of_LCDInit:
  1736                           	callstack 0
  1737                           
  1738 ;; *************** function _LCDClear *****************
  1739 ;; Defined at:
  1740 ;;		line 134 in file "lcd.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg, status,2, status,0, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        1 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		_WaitLCD
  1763 ;;		_WriteByte
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text17
  1770  001528                     __ptext17:
  1771                           	callstack 0
  1772  001528                     _LCDClear:
  1773                           	callstack 28
  1774  001528                     
  1775                           ;lcd.c: 136:      WriteByte(1, 0x01);
  1776  001528  0E01               	movlw	1
  1777  00152A  6E04               	movwf	WriteByte@data^0,c
  1778  00152C  0E01               	movlw	1
  1779  00152E  ECC0  F00A         	call	_WriteByte
  1780  001532                     
  1781                           ;lcd.c: 137:      _delay(12500);
  1782  001532  0E11               	movlw	17
  1783  001534  6E06               	movwf	??_LCDClear^0,c
  1784  001536  0E3A               	movlw	58
  1785  001538                     u587:
  1786  001538  2EE8               	decfsz	wreg,f,c
  1787  00153A  D7FE               	bra	u587
  1788  00153C  2E06               	decfsz	??_LCDClear^0,f,c
  1789  00153E  D7FC               	bra	u587
  1790  001540  D000               	nop2	
  1791  001542                     
  1792                           ;lcd.c: 138:      WaitLCD();
  1793  001542  ECB2  F00A         	call	_WaitLCD	;wreg free
  1794  001546  0012               	return		;funcret
  1795  001548                     __end_of_LCDClear:
  1796                           	callstack 0
  1797                           
  1798 ;; *************** function _WriteByte *****************
  1799 ;; Defined at:
  1800 ;;		line 88 in file "lcd.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  cmd             1    wreg     unsigned char 
  1803 ;;  data            1    3[COMRAM] unsigned char 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  cmd             1    4[COMRAM] unsigned char 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1815 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;Total ram usage:        2 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    1
  1822 ;; This function calls:
  1823 ;;		_WriteNibble
  1824 ;; This function is called by:
  1825 ;;		_LCDClear
  1826 ;;		_LCDGoto
  1827 ;;		_LCDPutChar
  1828 ;;		_LCDShiftDisplay
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text18
  1833  001580                     __ptext18:
  1834                           	callstack 0
  1835  001580                     _WriteByte:
  1836                           	callstack 27
  1837                           
  1838                           ;incstack = 0
  1839                           ;WriteByte@cmd stored from wreg
  1840  001580  6E05               	movwf	WriteByte@cmd^0,c
  1841  001582                     
  1842                           ;lcd.c: 88: void WriteByte(UINT8_T cmd, UINT8_T data);lcd.c: 89: {;lcd.c: 90:     WriteN
      +                          ibble(cmd, data >> 4);
  1843  001582  3804               	swapf	WriteByte@data^0,w,c
  1844  001584  0B0F               	andlw	15
  1845  001586  6E01               	movwf	WriteNibble@data^0,c
  1846  001588  5005               	movf	WriteByte@cmd^0,w,c
  1847  00158A  ECDB  F009         	call	_WriteNibble
  1848                           
  1849                           ;lcd.c: 91:     WriteNibble(cmd, data);
  1850  00158E  C004  F001         	movff	WriteByte@data,WriteNibble@data
  1851  001592  5005               	movf	WriteByte@cmd^0,w,c
  1852  001594  ECDB  F009         	call	_WriteNibble
  1853  001598  0012               	return		;funcret
  1854  00159A                     __end_of_WriteByte:
  1855                           	callstack 0
  1856                           
  1857 ;; *************** function _WriteNibble *****************
  1858 ;; Defined at:
  1859 ;;		line 71 in file "lcd.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  cmd             1    wreg     unsigned char 
  1862 ;;  data            1    0[COMRAM] unsigned char 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;  cmd             1    2[COMRAM] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1874 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;Total ram usage:        3 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_WriteByte
  1884 ;;		_LCDInit
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text19
  1889  0013B6                     __ptext19:
  1890                           	callstack 0
  1891  0013B6                     _WriteNibble:
  1892                           	callstack 27
  1893                           
  1894                           ;incstack = 0
  1895                           ;WriteNibble@cmd stored from wreg
  1896  0013B6  6E03               	movwf	WriteNibble@cmd^0,c
  1897  0013B8                     
  1898                           ;lcd.c: 71: void WriteNibble(UINT8_T cmd, UINT8_T data);lcd.c: 72: {;lcd.c: 73:     LATD
      +                          bits.LATD4 = (cmd ? 0 : 1);
  1899  0013B8  5003               	movf	WriteNibble@cmd^0,w,c
  1900  0013BA  B4D8               	btfsc	status,2,c
  1901  0013BC  EFE2  F009         	goto	u321
  1902  0013C0  EFE6  F009         	goto	u320
  1903  0013C4                     u321:
  1904  0013C4  6A02               	clrf	??_WriteNibble^0,c
  1905  0013C6  2A02               	incf	??_WriteNibble^0,f,c
  1906  0013C8  EFE7  F009         	goto	u338
  1907  0013CC                     u320:
  1908  0013CC  6A02               	clrf	??_WriteNibble^0,c
  1909  0013CE                     u338:
  1910  0013CE  3A02               	swapf	??_WriteNibble^0,f,c
  1911  0013D0  508C               	movf	140,w,c	;volatile
  1912  0013D2  1802               	xorwf	??_WriteNibble^0,w,c
  1913  0013D4  0BEF               	andlw	-17
  1914  0013D6  1802               	xorwf	??_WriteNibble^0,w,c
  1915  0013D8  6E8C               	movwf	140,c	;volatile
  1916  0013DA                     
  1917                           ;lcd.c: 74:     LATDbits.LATD5 = 0;
  1918  0013DA  9A8C               	bcf	140,5,c	;volatile
  1919  0013DC                     
  1920                           ;lcd.c: 75:     LATDbits.LATD6 = 1;
  1921  0013DC  8C8C               	bsf	140,6,c	;volatile
  1922  0013DE                     
  1923                           ;lcd.c: 77:     LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1924  0013DE  968C               	bcf	140,3,c	;volatile
  1925  0013E0  948C               	bcf	140,2,c	;volatile
  1926  0013E2  928C               	bcf	140,1,c	;volatile
  1927  0013E4  908C               	bcf	140,0,c	;volatile
  1928  0013E6                     
  1929                           ;lcd.c: 78:     __nop();
  1930  0013E6  F000               	nop	
  1931  0013E8                     
  1932                           ;lcd.c: 79:     __nop();
  1933  0013E8  F000               	nop	
  1934                           
  1935                           ;lcd.c: 81:     LATD = (LATD & 0xF0) | (data & 0x0F);
  1936  0013EA  C001  F002         	movff	WriteNibble@data,??_WriteNibble
  1937  0013EE  0E0F               	movlw	15
  1938  0013F0  1602               	andwf	??_WriteNibble^0,f,c
  1939  0013F2  508C               	movf	140,w,c	;volatile
  1940  0013F4  0BF0               	andlw	240
  1941  0013F6  1002               	iorwf	??_WriteNibble^0,w,c
  1942  0013F8  6E8C               	movwf	140,c	;volatile
  1943  0013FA                     
  1944                           ;lcd.c: 82:     __nop();
  1945  0013FA  F000               	nop	
  1946  0013FC                     
  1947                           ;lcd.c: 83:     __nop();
  1948  0013FC  F000               	nop	
  1949  0013FE                     
  1950                           ;lcd.c: 85:     LATDbits.LATD6 = 0;
  1951  0013FE  9C8C               	bcf	140,6,c	;volatile
  1952  001400  0012               	return		;funcret
  1953  001402                     __end_of_WriteNibble:
  1954                           	callstack 0
  1955                           
  1956 ;; *************** function _WaitLCD *****************
  1957 ;; Defined at:
  1958 ;;		line 57 in file "lcd.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  status          1    1[COMRAM] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;Total ram usage:        1 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    1
  1979 ;; This function calls:
  1980 ;;		_ReadByte
  1981 ;; This function is called by:
  1982 ;;		_LCDInit
  1983 ;;		_LCDClear
  1984 ;;		_LCDGoto
  1985 ;;		_LCDPutChar
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text20
  1990  001564                     __ptext20:
  1991                           	callstack 0
  1992  001564                     _WaitLCD:
  1993                           	callstack 27
  1994  001564                     
  1995                           ;lcd.c: 59:     UINT8_T status;;lcd.c: 61:     LATDbits.LATD4 = 0;
  1996  001564  988C               	bcf	140,4,c	;volatile
  1997                           
  1998                           ;lcd.c: 62:     LATDbits.LATD5 = 1;
  1999  001566  8A8C               	bsf	140,5,c	;volatile
  2000  001568                     l1245:
  2001                           
  2002                           ;lcd.c: 65:         status = ReadByte();
  2003  001568  EC40  F00A         	call	_ReadByte	;wreg free
  2004  00156C  6E02               	movwf	WaitLCD@status^0,c
  2005  00156E                     
  2006                           ;lcd.c: 66:     } while (status & 0x80);
  2007  00156E  BE02               	btfsc	WaitLCD@status^0,7,c
  2008  001570  EFBC  F00A         	goto	u341
  2009  001574  EFBE  F00A         	goto	u340
  2010  001578                     u341:
  2011  001578  EFB4  F00A         	goto	l1245
  2012  00157C                     u340:
  2013  00157C                     
  2014                           ;lcd.c: 68:     LATDbits.LATD5 = 0;
  2015  00157C  9A8C               	bcf	140,5,c	;volatile
  2016  00157E  0012               	return		;funcret
  2017  001580                     __end_of_WaitLCD:
  2018                           	callstack 0
  2019                           
  2020 ;; *************** function _ReadByte *****************
  2021 ;; Defined at:
  2022 ;;		line 26 in file "lcd.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  status          1    0[COMRAM] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      unsigned char 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;Total ram usage:        1 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_WaitLCD
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text21
  2050  001480                     __ptext21:
  2051                           	callstack 0
  2052  001480                     _ReadByte:
  2053                           	callstack 27
  2054  001480                     
  2055                           ;lcd.c: 28:     UINT8_T status;;lcd.c: 30:     TRISDbits.TRISD0 = 1;
  2056  001480  8095               	bsf	149,0,c	;volatile
  2057                           
  2058                           ;lcd.c: 31:     TRISDbits.TRISD1 = 1;
  2059  001482  8295               	bsf	149,1,c	;volatile
  2060                           
  2061                           ;lcd.c: 32:     TRISDbits.TRISD2 = 1;
  2062  001484  8495               	bsf	149,2,c	;volatile
  2063                           
  2064                           ;lcd.c: 33:     TRISDbits.TRISD3 = 1;
  2065  001486  8695               	bsf	149,3,c	;volatile
  2066                           
  2067                           ;lcd.c: 35:     LATDbits.LATD6 = 1;
  2068  001488  8C8C               	bsf	140,6,c	;volatile
  2069                           
  2070                           ;lcd.c: 36:     __nop();
  2071  00148A  F000               	nop	
  2072                           
  2073                           ;lcd.c: 37:     __nop();
  2074  00148C  F000               	nop	
  2075  00148E                     
  2076                           ;lcd.c: 39:     status = PORTD << 4;
  2077  00148E  3883               	swapf	131,w,c	;volatile
  2078  001490  0BF0               	andlw	240
  2079  001492  6E01               	movwf	ReadByte@status^0,c
  2080  001494                     
  2081                           ;lcd.c: 40:     LATDbits.LATD6 = 0;
  2082  001494  9C8C               	bcf	140,6,c	;volatile
  2083  001496                     
  2084                           ;lcd.c: 42:     LATDbits.LATD6 = 1;
  2085  001496  8C8C               	bsf	140,6,c	;volatile
  2086  001498                     
  2087                           ;lcd.c: 43:     __nop();
  2088  001498  F000               	nop	
  2089  00149A                     
  2090                           ;lcd.c: 44:     __nop();
  2091  00149A  F000               	nop	
  2092                           
  2093                           ;lcd.c: 46:     status |= PORTD & 0x0F;
  2094  00149C  5083               	movf	131,w,c	;volatile
  2095  00149E  0B0F               	andlw	15
  2096  0014A0  1201               	iorwf	ReadByte@status^0,f,c
  2097  0014A2                     
  2098                           ;lcd.c: 47:     LATDbits.LATD6 = 0;
  2099  0014A2  9C8C               	bcf	140,6,c	;volatile
  2100  0014A4                     
  2101                           ;lcd.c: 49:     TRISDbits.TRISD0 = 0;
  2102  0014A4  9095               	bcf	149,0,c	;volatile
  2103  0014A6                     
  2104                           ;lcd.c: 50:     TRISDbits.TRISD1 = 0;
  2105  0014A6  9295               	bcf	149,1,c	;volatile
  2106  0014A8                     
  2107                           ;lcd.c: 51:     TRISDbits.TRISD2 = 0;
  2108  0014A8  9495               	bcf	149,2,c	;volatile
  2109  0014AA                     
  2110                           ;lcd.c: 52:     TRISDbits.TRISD3 = 0;
  2111  0014AA  9695               	bcf	149,3,c	;volatile
  2112  0014AC                     
  2113                           ;lcd.c: 54:     return(status);
  2114  0014AC  5001               	movf	ReadByte@status^0,w,c
  2115  0014AE  0012               	return		;funcret
  2116  0014B0                     __end_of_ReadByte:
  2117                           	callstack 0
  2118                           
  2119                           	psect	rparam
  2120  0000                     
  2121                           	psect	idloc
  2122                           
  2123                           ;Config register IDLOC0 @ 0x200000
  2124                           ;	unspecified, using default values
  2125  200000                     	org	2097152
  2126  200000  FF                 	db	255
  2127                           
  2128                           ;Config register IDLOC1 @ 0x200001
  2129                           ;	unspecified, using default values
  2130  200001                     	org	2097153
  2131  200001  FF                 	db	255
  2132                           
  2133                           ;Config register IDLOC2 @ 0x200002
  2134                           ;	unspecified, using default values
  2135  200002                     	org	2097154
  2136  200002  FF                 	db	255
  2137                           
  2138                           ;Config register IDLOC3 @ 0x200003
  2139                           ;	unspecified, using default values
  2140  200003                     	org	2097155
  2141  200003  FF                 	db	255
  2142                           
  2143                           ;Config register IDLOC4 @ 0x200004
  2144                           ;	unspecified, using default values
  2145  200004                     	org	2097156
  2146  200004  FF                 	db	255
  2147                           
  2148                           ;Config register IDLOC5 @ 0x200005
  2149                           ;	unspecified, using default values
  2150  200005                     	org	2097157
  2151  200005  FF                 	db	255
  2152                           
  2153                           ;Config register IDLOC6 @ 0x200006
  2154                           ;	unspecified, using default values
  2155  200006                     	org	2097158
  2156  200006  FF                 	db	255
  2157                           
  2158                           ;Config register IDLOC7 @ 0x200007
  2159                           ;	unspecified, using default values
  2160  200007                     	org	2097159
  2161  200007  FF                 	db	255
  2162                           
  2163                           	psect	config
  2164                           
  2165                           ; Padding undefined space
  2166  300000                     	org	3145728
  2167  300000  FF                 	db	255
  2168                           
  2169                           ;Config register CONFIG1H @ 0x300001
  2170                           ;	Oscillator Selection bits
  2171                           ;	FOSC = INTIO7, Internal oscillator block, CLKOUT function on OSC2
  2172                           ;	4X PLL Enable
  2173                           ;	PLLCFG = OFF, Oscillator used directly
  2174                           ;	Primary clock enable bit
  2175                           ;	PRICLKEN = ON, Primary clock is always enabled
  2176                           ;	Fail-Safe Clock Monitor Enable bit
  2177                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2178                           ;	Internal/External Oscillator Switchover bit
  2179                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2180  300001                     	org	3145729
  2181  300001  29                 	db	41
  2182                           
  2183                           ;Config register CONFIG2L @ 0x300002
  2184                           ;	Power-up Timer Enable bit
  2185                           ;	PWRTEN = OFF, Power up timer disabled
  2186                           ;	Brown-out Reset Enable bits
  2187                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2188                           ;	Brown Out Reset Voltage bits
  2189                           ;	BORV = 190, VBOR set to 1.90 V nominal
  2190  300002                     	org	3145730
  2191  300002  1F                 	db	31
  2192                           
  2193                           ;Config register CONFIG2H @ 0x300003
  2194                           ;	Watchdog Timer Enable bits
  2195                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2196                           ;	Watchdog Timer Postscale Select bits
  2197                           ;	WDTPS = 32768, 1:32768
  2198  300003                     	org	3145731
  2199  300003  3C                 	db	60
  2200                           
  2201                           ; Padding undefined space
  2202  300004                     	org	3145732
  2203  300004  FF                 	db	255
  2204                           
  2205                           ;Config register CONFIG3H @ 0x300005
  2206                           ;	CCP2 MUX bit
  2207                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  2208                           ;	PORTB A/D Enable bit
  2209                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  2210                           ;	P3A/CCP3 Mux bit
  2211                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  2212                           ;	HFINTOSC Fast Start-up
  2213                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  2214                           ;	Timer3 Clock input mux bit
  2215                           ;	T3CMX = PORTC0, T3CKI is on RC0
  2216                           ;	ECCP2 B output mux bit
  2217                           ;	P2BMX = PORTD2, P2B is on RD2
  2218                           ;	MCLR Pin Enable bit
  2219                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  2220  300005                     	org	3145733
  2221  300005  BF                 	db	191
  2222                           
  2223                           ;Config register CONFIG4L @ 0x300006
  2224                           ;	Stack Full/Underflow Reset Enable bit
  2225                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2226                           ;	Single-Supply ICSP Enable bit
  2227                           ;	LVP = OFF, Single-Supply ICSP disabled
  2228                           ;	Extended Instruction Set Enable bit
  2229                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2230                           ;	Background Debug
  2231                           ;	DEBUG = 0x1, unprogrammed default
  2232  300006                     	org	3145734
  2233  300006  81                 	db	129
  2234                           
  2235                           ; Padding undefined space
  2236  300007                     	org	3145735
  2237  300007  FF                 	db	255
  2238                           
  2239                           ;Config register CONFIG5L @ 0x300008
  2240                           ;	Code Protection Block 0
  2241                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2242                           ;	Code Protection Block 1
  2243                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2244                           ;	Code Protection Block 2
  2245                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2246                           ;	Code Protection Block 3
  2247                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2248  300008                     	org	3145736
  2249  300008  0F                 	db	15
  2250                           
  2251                           ;Config register CONFIG5H @ 0x300009
  2252                           ;	Boot Block Code Protection bit
  2253                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2254                           ;	Data EEPROM Code Protection bit
  2255                           ;	CPD = OFF, Data EEPROM not code-protected
  2256  300009                     	org	3145737
  2257  300009  C0                 	db	192
  2258                           
  2259                           ;Config register CONFIG6L @ 0x30000A
  2260                           ;	Write Protection Block 0
  2261                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2262                           ;	Write Protection Block 1
  2263                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2264                           ;	Write Protection Block 2
  2265                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2266                           ;	Write Protection Block 3
  2267                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2268  30000A                     	org	3145738
  2269  30000A  0F                 	db	15
  2270                           
  2271                           ;Config register CONFIG6H @ 0x30000B
  2272                           ;	Configuration Register Write Protection bit
  2273                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2274                           ;	Boot Block Write Protection bit
  2275                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2276                           ;	Data EEPROM Write Protection bit
  2277                           ;	WRTD = OFF, Data EEPROM not write-protected
  2278  30000B                     	org	3145739
  2279  30000B  E0                 	db	224
  2280                           
  2281                           ;Config register CONFIG7L @ 0x30000C
  2282                           ;	Table Read Protection Block 0
  2283                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2284                           ;	Table Read Protection Block 1
  2285                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2286                           ;	Table Read Protection Block 2
  2287                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2288                           ;	Table Read Protection Block 3
  2289                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2290  30000C                     	org	3145740
  2291  30000C  0F                 	db	15
  2292                           
  2293                           ;Config register CONFIG7H @ 0x30000D
  2294                           ;	Boot Block Table Read Protection bit
  2295                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2296  30000D                     	org	3145741
  2297  30000D  40                 	db	64
  2298                           tosu	equ	0xFFF
  2299                           tosh	equ	0xFFE
  2300                           tosl	equ	0xFFD
  2301                           stkptr	equ	0xFFC
  2302                           pclatu	equ	0xFFB
  2303                           pclath	equ	0xFFA
  2304                           pcl	equ	0xFF9
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           indf0	equ	0xFEF
  2312                           postinc0	equ	0xFEE
  2313                           postdec0	equ	0xFED
  2314                           preinc0	equ	0xFEC
  2315                           plusw0	equ	0xFEB
  2316                           fsr0h	equ	0xFEA
  2317                           fsr0l	equ	0xFE9
  2318                           wreg	equ	0xFE8
  2319                           indf1	equ	0xFE7
  2320                           postinc1	equ	0xFE6
  2321                           postdec1	equ	0xFE5
  2322                           preinc1	equ	0xFE4
  2323                           plusw1	equ	0xFE3
  2324                           fsr1h	equ	0xFE2
  2325                           fsr1l	equ	0xFE1
  2326                           bsr	equ	0xFE0
  2327                           indf2	equ	0xFDF
  2328                           postinc2	equ	0xFDE
  2329                           postdec2	equ	0xFDD
  2330                           preinc2	equ	0xFDC
  2331                           plusw2	equ	0xFDB
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8

Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      19
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 15
		 -> LCDWriteInt@string(COMRAM[3]), LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), STR_2(CODE[3]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_LCDWriteInt
    _getTemperature->_i2c_read
    _getTemperature->_i2c_write
    _i2c_write->_i2c_waitForIdle
    _i2c_stop->_i2c_waitForIdle
    _i2c_repStart->_i2c_waitForIdle
    _i2c_read->_i2c_waitForIdle
    _LCDWriteInt->_LCDGoto
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11346
                                             17 COMRAM     2     2      0
                           _LCDClear
                            _LCDInit
                        _LCDWriteInt
                        _LCDWriteStr
                     _getTemperature
 ---------------------------------------------------------------------------------
 (1) _getTemperature                                       5     3      2      53
                                              2 COMRAM     5     3      2
                            _i2c_NAK
                           _i2c_init
                           _i2c_read
                       _i2c_repStart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _i2c_write                                            1     1      0      15
                                              1 COMRAM     1     1      0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_repStart                                         0     0      0       0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (2) _i2c_read                                             1     1      0      15
                                              1 COMRAM     1     1      0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (3) _i2c_waitForIdle                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_NAK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                          6     4      2    6073
                                             11 COMRAM     6     4      2
                            _LCDGoto
                        _LCDWriteStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCDWriteStr                                          5     3      2    2191
                                              6 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           1     1      0    1721
                                              5 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (2) _LCDGoto                                              6     5      1    2061
                                              5 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1307
                                              3 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             1     1      0    1699
                                              5 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _WriteByte                                            2     1      1    1652
                                              3 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (4) _WriteNibble                                          3     2      1    1260
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _WaitLCD                                              1     1      0      47
                                              1 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (4) _ReadByte                                             1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDClear
     _WaitLCD
       _ReadByte
     _WriteByte
       _WriteNibble
   _LCDInit
     _WaitLCD
       _ReadByte
     _WriteNibble
   _LCDWriteInt
     _LCDGoto
       _WaitLCD
         _ReadByte
       _WriteByte
         _WriteNibble
     _LCDWriteStr
       _LCDPutChar
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
     ___awdiv
     ___awmod
   _LCDWriteStr
     _LCDPutChar
       _WaitLCD
         _ReadByte
       _WriteByte
         _WriteNibble
   _getTemperature
     _i2c_NAK
     _i2c_init
     _i2c_read
       _i2c_waitForIdle
     _i2c_repStart
       _i2c_waitForIdle
     _i2c_start
     _i2c_stop
       _i2c_waitForIdle
     _i2c_write
       _i2c_waitForIdle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     13      13       1       20.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
ABS                  0      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BIGRAM             F37      0       0      37        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb  5 14:55:54 2021

                       l25 147E                ?_LCDPutChar 0001                         l60 1506  
                       l72 15F2                         l81 15A2                         l66 14DA  
                       l75 15BA                         l84 15B0                         l93 15D0  
                       l69 15E4                         l78 15C8                         l96 15DE  
                       l99 1510                         u40 14C2                         u41 14BA  
                       u50 14DA                         u51 14D6                         u60 15F2  
                       u61 15EE                         u70 1562                         u71 155E  
                       u48 14C4                         u80 15C8                         u81 15C4  
                       u90 151E                         u91 151A               ___awdiv@sign 0006  
         ??_getTemperature 0005       __size_of_WriteNibble 004C                        l101 151E  
                      l102 1526                        l105 1554                        l123 14AE  
                      l131 1400                        l140 1546                        l108 1562  
                      l134 1598                        l127 157C                        l128 157E  
                      l137 110C                        l153 1604                        l146 1366  
                      l162 12FC                        l411 11D0                        l171 13B4  
                      l424 1280                        l911 14DC                        l921 14F4  
                      l913 14E6                        l905 14B0                        l931 14FE  
                      l923 14F6                        l915 14EA                        l907 14B0  
                      l933 1500                        l925 14F8                        l917 14EC  
                      l941 154A                        l935 1502                        l927 14FA  
                      l919 14EE                        l951 15B8                        l943 154E  
                      l937 1504                        l929 14FC                        l961 1524  
                      l953 1508                        l945 1550                        l955 1508  
                      l947 15B2                        l939 15E0                        l971 15A0  
                      l965 15CA                        l957 150C                        l949 15B6  
                      l959 150E                        l967 159A                        l969 159E  
                      u100 15DE                        u101 15DA                        u110 15B0  
                      u111 15AC                        u320 13CC                        u400 1334  
                      u321 13C4                        u401 1330                        u410 1120  
                      u411 111C                        u340 157C                        u420 113A  
                      u500 1236                        u341 1578                        u421 1136  
                      u501 1232                        u350 12B8                        u430 1160  
                      u510 124C                        u431 115C                        u511 1248  
                      u360 12EC                        u440 117E                        u520 1270  
                      u441 117A                        u521 126C                        u338 13CE  
                      u370 12FC                        u450 119A                        u371 12F8  
                      u451 1196                        u380 1310                        u460 11C0  
                      u381 130C                        u357 12AE                        u461 11BC  
                      u390 1320                        u470 11E4                        u391 131C  
                      u367 12E2                        u471 11E0                        u480 11FE  
                      u481 11FA                        u490 1218                        u547 103E  
                      u491 1214                        u557 1058                        u567 106E  
                      u577 1080                        u587 1538               ___awmod@sign 0006  
                      wreg 000FE8            __end_of_LCDInit 110E            __end_of_LCDGoto 1368  
             ?_LCDWriteInt 000C               ?_LCDWriteStr 0007                       l1201 148E  
                     l1211 14A2                       l1203 1494                       l1221 14AC  
                     l1213 14A4                       l1205 1496                       l1301 1184  
                     l1215 14A6                       l1207 1498                       l1231 13DE  
                     l1303 119A                       l1311 11B0                       l1217 14A8  
                     l1209 149A                       l1241 13FE                       l1233 13E6  
                     l1225 13B8                       l1401 10B6                       l1313 11C0  
                     l1305 11A2                       l1321 11D6                       l1219 14AA  
                     l1243 1564                       l1235 13E8                       l1227 13DA  
                     l1411 10DC                       l1403 10C0                       l1251 15F6  
                     l1315 11C8                       l1307 11A4                       l1331 1206  
                     l1323 11E4                       l1245 1568                       l1237 13FA  
                     l1229 13DC                       l1421 1108                       l1413 10E6  
                     l1405 10C4                       l1261 1300                       l1253 1282  
                     l1309 11AA                       l1341 124C                       l1333 1218  
                     l1325 11EC                       l1247 156E                       l1239 13FC  
                     l1423 1528                       l1415 10F0                       l1407 10CE  
                     l1271 1358                       l1263 1310                       l1255 128A  
                     l1351 1278                       l1343 1254                       l1335 1220  
                     l1327 11F0                       l1319 11D2                       l1431 139A  
                     l1249 1582                       l1425 1532                       l1417 10F4  
                     l1409 10D8                       l1273 1362                       l1265 1324  
                     l1257 12BC                       l1281 1128                       l1345 125A  
                     l1337 1228                       l1329 11FE                       l1433 139E  
                     l1361 1452                       l1441 1416                       l1427 1542  
                     l1419 10FE                       l1267 1334                       l1259 12BE  
                     l1291 114E                       l1283 112C                       l1275 110E  
                     l1339 1236                       l1347 1260                       l1435 13A8  
                     l1371 1472                       l1363 1458                       l1355 1444  
                     l1381 1048                       l1269 1348                       l1293 1160  
                     l1285 113A                       l1277 1112                       l1349 1270  
                     l1429 136A                       l1373 1476                       l1365 145C  
                     l1357 1448                       l1437 1402                       l1199 1480  
                     l1391 1090                       l1383 1052                       l1295 1168  
                     l1287 1142                       l1279 1120                       l1367 1462  
                     l1359 144C                       l1439 140A                       l1393 1094  
                     l1385 106C                       l1377 1026                       l1297 1170  
                     l1289 1146                       l1369 146E                       l1395 109E  
                     l1387 1074                       l1379 1038                       l1299 117E  
                     l1397 10A8                       l1389 1086                       l1399 10AC  
                     STR_1 1012                       STR_2 1021                       STR_3 1001  
                     _LATD 000F8C                       _main 1402                       fsr0h 000FEA  
                     indf0 000FEF                       fsr0l 000FE9          ??_i2c_waitForIdle 0001  
                     start 0000              ?_i2c_repStart 0001            __end_of_i2c_NAK 15E0  
             ___param_bank 000000           __end_of_LCDClear 1548            __end_of_WaitLCD 1580  
                    ?_main 0001            __end_of___awdiv 11D2            __end_of___awmod 1282  
          ___awdiv@divisor 0003            ___awdiv@counter 0005                      _PORTD 000F83  
                    tablat 000FF5        __size_of_LCDPutChar 0012                      status 000FD8  
            WaitLCD@status 0002             ??_i2c_repStart 0002            __initialization 1606  
             __end_of_main 1444           __end_of_i2c_init 1508           __end_of_i2c_read 1528  
         __end_of_ReadByte 14B0           __end_of_i2c_stop 15B2                     ??_main 0012  
            __activetblptr 000002                  ??_LCDInit 0004                  ??_LCDGoto 0007  
         ___awdiv@dividend 0001              LCDGoto@column 000B                  ??_i2c_NAK 0001  
       __size_of_i2c_start 0014         __size_of_i2c_write 001C                  ??_WaitLCD 0002  
                ??___awdiv 0005                  ??___awmod 0005           ___awdiv@quotient 0007  
          ___awmod@divisor 0003            ___awmod@counter 0005      i2c_write@i2cWriteData 0002  
             __mediumconst 0000                     tblptrh 000FF7               LCDWriteStr@i 000B  
                   tblptrl 000FF6                     tblptru 000FF8                  ?_LCDClear 0001  
     __size_of_LCDWriteInt 004E       __size_of_LCDWriteStr 007C                 __accesstop 0060  
  __end_of__initialization 1606         __size_of_WriteByte 001A              ___rparam_used 000001  
           __pcstackCOMRAM 0001             WriteNibble@cmd 0003               ??_LCDPutChar 0006  
        __end_of_i2c_start 15F4          __end_of_i2c_write 1564       __end_of_i2c_repStart 15CA  
          _i2c_waitForIdle 14B0        i2c_read@i2cReadData 0002               WriteByte@cmd 0005  
               ??_LCDClear 0006                  ?_i2c_init 0001                  ?_i2c_read 0001  
                ?_ReadByte 0001                  ?_i2c_stop 0001         __end_of_LCDPutChar 1606  
            ??_WriteNibble 0002          LCDWriteInt@column 000E          LCDWriteInt@string 000F  
        __end_of_WriteByte 159A                    _LCDInit 1026                    _LCDGoto 12FE  
                  _SSP1ADD 000FC8                    _SSP1BUF 000FC9                 ??_i2c_init 0001  
               ??_i2c_read 0002                 ??_ReadByte 0001                 ??_i2c_stop 0002  
getTemperature@temperature 0006                    _i2c_NAK 15CA                    __Hparam 0000  
                  _WaitLCD 1564                    __Lparam 0000                    ___awdiv 110E  
                  ___awmod 11D2               __psmallconst 1000                    __pcinit 1606  
                  __ramtop 1000    __end_of_i2c_waitForIdle 14DC                    __ptext0 1402  
                  __ptext1 1444                    __ptext2 1548                    __ptext3 159A  
                  __ptext4 15E0                    __ptext5 15B2                    __ptext6 1508  
                  __ptext7 14B0                    __ptext8 14DC                    __ptext9 15CA  
      __end_of_WriteNibble 1402           ___awmod@dividend 0001       end_of_initialization 1606  
  __size_of_getTemperature 003C              __Lmediumconst 0000          LCDWriteStr@string 0007  
    __size_of_i2c_repStart 0018                  _TRISCbits 000F94                  _TRISDbits 000F95  
               LCDGoto@row 0006          __size_of_LCDClear 0020               _i2c_repStart 15B2  
          WriteNibble@data 0001                _WriteNibble 13B6           ?_i2c_waitForIdle 0001  
      start_initialization 1606                  _i2c_start 15E0                  _i2c_write 1548  
            ??_LCDWriteInt 000E              ??_LCDWriteStr 0009          __size_of_i2c_init 002C  
        __size_of_i2c_read 0020          __size_of_ReadByte 0030          __size_of_i2c_stop 0018  
                 ?_LCDInit 0001                   ?_LCDGoto 0006              WriteByte@data 0004  
               ?_i2c_start 0001                 ?_i2c_write 0001                  _WriteByte 1580  
           _getTemperature 1444             LCDPutChar@data 0006                   ?_i2c_NAK 0001  
      __end_of_LCDWriteInt 13B6        __end_of_LCDWriteStr 12FE                   ?_WaitLCD 0001  
                 ?___awdiv 0001                   ?___awmod 0001           LCDWriteInt@value 000D  
              __smallconst 1000     __end_of_getTemperature 1480                 ?_WriteByte 0004  
                 _LCDClear 1528                   _LATDbits 000F8C                _LCDGoto$682 0009  
                 _PIR1bits 000F9E                   _PIR2bits 000FA1                   _SSP1CON1 000FC6  
                 _SSP1CON2 000FC5           __size_of_LCDInit 00E8           __size_of_LCDGoto 006A  
              ??_i2c_start 0001            ?_getTemperature 0003                ??_i2c_write 0002  
              _LCDWriteInt 1368                _LCDWriteStr 1282                   _i2c_init 14DC  
                 _i2c_read 1508                   _ReadByte 1480                   _i2c_stop 159A  
         __size_of_i2c_NAK 0016                   __Hrparam 0000                   __Lrparam 0000  
         __size_of_WaitLCD 001C           __size_of___awdiv 00C4               ?_WriteNibble 0001  
         __size_of___awmod 00B0                 _ANSELCbits 000F3A                ??_WriteByte 0005  
                 __ptext10 1368                   __ptext11 11D2                   __ptext20 1564  
                 __ptext12 110E                   __ptext21 1480                   __ptext13 1282  
                 __ptext14 15F4                   __ptext15 12FE                   __ptext16 1026  
                 __ptext17 1528                   __ptext18 1580                   __ptext19 13B6  
             _SSP1CON2bits 000FC5               _SSP1CON3bits 000FCB              __size_of_main 0042  
           ReadByte@status 0001                 _LCDPutChar 15F4               _SSP1STATbits 000FC7  
          main@temperature 0012   __size_of_i2c_waitForIdle 002C             LCDWriteInt@row 000C  
