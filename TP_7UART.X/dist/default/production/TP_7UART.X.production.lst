

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb  5 15:27:27 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    45                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    46  0000                     
    47                           ; Version 2.20
    48                           ; Generated 05/05/2020 GMT
    49                           ; 
    50                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F46K22 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _ANSELCbits	set	3898
    82  0000                     _PIR1bits	set	3998
    83  0000                     _RCREG1	set	4014
    84  0000                     _TXREG1	set	4013
    85  0000                     _SPBRGH1	set	4016
    86  0000                     _SPBRG1	set	4015
    87  0000                     _BAUDCON1bits	set	4024
    88  0000                     _PIE1bits	set	3997
    89  0000                     _RCSTA1bits	set	4011
    90  0000                     _TXSTA1bits	set	4012
    91  0000                     _RCSTA1	set	4011
    92  0000                     _TXSTA1	set	4012
    93  0000                     _TRISCbits	set	3988
    94  0000                     _LATD	set	3980
    95  0000                     _PORTD	set	3971
    96  0000                     _LATDbits	set	3980
    97  0000                     _TRISDbits	set	3989
    98  0000                     _PEIE	set	32662
    99  0000                     _RCIE	set	31981
   100  0000                     _RCIP	set	31997
   101  0000                     _RCIF	set	31989
   102                           
   103                           	psect	smallconst
   104  001000                     __psmallconst:
   105                           	callstack 0
   106  001000  00                 	db	0
   107  001001  30                 	db	48	;'0'
   108  001002  31                 	db	49	;'1'
   109  001003  32                 	db	50	;'2'
   110  001004  33                 	db	51	;'3'
   111  001005  34                 	db	52	;'4'
   112  001006  35                 	db	53	;'5'
   113  001007  36                 	db	54	;'6'
   114  001008  37                 	db	55	;'7'
   115  001009  38                 	db	56	;'8'
   116  00100A  39                 	db	57	;'9'
   117  00100B  41                 	db	65	;'A'
   118  00100C  42                 	db	66	;'B'
   119  00100D  43                 	db	67	;'C'
   120  00100E  44                 	db	68	;'D'
   121  00100F  45                 	db	69	;'E'
   122  001010  46                 	db	70	;'F'
   123  001011  00                 	db	0
   124  001012                     STR_2:
   125  001012  46                 	db	70	;'F'
   126  001013  72                 	db	114	;'r'
   127  001014  61                 	db	97	;'a'
   128  001015  6D                 	db	109	;'m'
   129  001016  69                 	db	105	;'i'
   130  001017  6E                 	db	110	;'n'
   131  001018  67                 	db	103	;'g'
   132  001019  20                 	db	32
   133  00101A  45                 	db	69	;'E'
   134  00101B  72                 	db	114	;'r'
   135  00101C  72                 	db	114	;'r'
   136  00101D  6F                 	db	111	;'o'
   137  00101E  72                 	db	114	;'r'
   138  00101F  00                 	db	0
   139  001020                     STR_3:
   140  001020  4F                 	db	79	;'O'
   141  001021  76                 	db	118	;'v'
   142  001022  65                 	db	101	;'e'
   143  001023  72                 	db	114	;'r'
   144  001024  72                 	db	114	;'r'
   145  001025  75                 	db	117	;'u'
   146  001026  6E                 	db	110	;'n'
   147  001027  20                 	db	32
   148  001028  45                 	db	69	;'E'
   149  001029  72                 	db	114	;'r'
   150  00102A  72                 	db	114	;'r'
   151  00102B  6F                 	db	111	;'o'
   152  00102C  72                 	db	114	;'r'
   153  00102D  00                 	db	0
   154  00102E  00                 	db	0	; dummy byte at the end
   155  0000                     
   156                           ; #config settings
   157                           
   158                           	psect	cinit
   159  00180E                     __pcinit:
   160                           	callstack 0
   161  00180E                     start_initialization:
   162                           	callstack 0
   163  00180E                     __initialization:
   164                           	callstack 0
   165                           
   166                           ; Clear objects allocated to BANK1 (130 bytes)
   167  00180E  EE01  F000         	lfsr	0,__pbssBANK1
   168  001812  0E82               	movlw	130
   169  001814                     clear_0:
   170  001814  6AEE               	clrf	postinc0,c
   171  001816  06E8               	decf	wreg,f,c
   172  001818  E1FD               	bnz	clear_0
   173                           
   174                           ; Clear objects allocated to COMRAM (4 bytes)
   175  00181A  6A2D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   176  00181C  6A2C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   177  00181E  6A2B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   178  001820  6A2A               	clrf	__pbssCOMRAM& (0+255),c
   179  001822                     end_of_initialization:
   180                           	callstack 0
   181  001822                     __end_of__initialization:
   182                           	callstack 0
   183  001822  902E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   184  001824  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   185  001826  0100               	movlb	0
   186  001828  EF23  F00B         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMRAM
   189  00002A                     __pbssCOMRAM:
   190                           	callstack 0
   191  00002A                     _slot:
   192                           	callstack 0
   193  00002A                     	ds	2
   194  00002C                     _head:
   195                           	callstack 0
   196  00002C                     	ds	2
   197                           
   198                           	psect	bssBANK1
   199  000100                     __pbssBANK1:
   200                           	callstack 0
   201  000100                     _builtin:
   202                           	callstack 0
   203  000100                     	ds	130
   204                           
   205                           	psect	cstackCOMRAM
   206  000001                     __pcstackCOMRAM:
   207                           	callstack 0
   208  000001                     i2ReadByte@status:
   209                           	callstack 0
   210  000001                     i2WriteNibble@data:
   211                           	callstack 0
   212  000001                     __Exit@ec:
   213                           	callstack 0
   214  000001                     call@p:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0x0
   218  000001                     	ds	1
   219  000002                     ??i2_WriteNibble:
   220  000002                     i2WaitLCD@status:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0x1
   224  000002                     	ds	1
   225  000003                     ??___funcs_on_exit:
   226  000003                     i2WriteNibble@cmd:
   227                           	callstack 0
   228                           
   229                           ; 1 bytes @ 0x2
   230  000003                     	ds	1
   231  000004                     i2WriteByte@data:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0x3
   235  000004                     	ds	1
   236  000005                     i2WriteByte@cmd:
   237                           	callstack 0
   238                           
   239                           ; 1 bytes @ 0x4
   240  000005                     	ds	1
   241  000006                     i2LCDGoto@row:
   242                           	callstack 0
   243  000006                     i2LCDPutChar@data:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0x5
   247  000006                     	ds	1
   248  000007                     ??i2_LCDGoto:
   249  000007                     ___funcs_on_exit@func:
   250                           	callstack 0
   251  000007                     i2LCDWriteStr@string:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x6
   255  000007                     	ds	2
   256  000009                     ??i2_LCDWriteStr:
   257  000009                     ___funcs_on_exit@arg:
   258                           	callstack 0
   259  000009                     i2_LCDGoto$151:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x8
   263  000009                     	ds	2
   264  00000B                     i2LCDGoto@column:
   265                           	callstack 0
   266  00000B                     i2LCDWriteStr@i:
   267                           	callstack 0
   268  00000B                     exit@code:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0xA
   272  00000B                     	ds	2
   273  00000D                     ??_SerialRxPinInterrupt:
   274                           
   275                           ; 1 bytes @ 0xC
   276  00000D                     	ds	10
   277  000017                     ?___awdiv:
   278                           	callstack 0
   279  000017                     ?___awmod:
   280                           	callstack 0
   281  000017                     ?___lldiv:
   282                           	callstack 0
   283  000017                     ReadByte@status:
   284                           	callstack 0
   285  000017                     WriteNibble@data:
   286                           	callstack 0
   287  000017                     UARTWriteByte@data:
   288                           	callstack 0
   289  000017                     ___awdiv@dividend:
   290                           	callstack 0
   291  000017                     ___awmod@dividend:
   292                           	callstack 0
   293  000017                     ___lldiv@dividend:
   294                           	callstack 0
   295                           
   296                           ; 4 bytes @ 0x16
   297  000017                     	ds	1
   298  000018                     ??_WriteNibble:
   299  000018                     WaitLCD@status:
   300                           	callstack 0
   301                           
   302                           ; 1 bytes @ 0x17
   303  000018                     	ds	1
   304  000019                     WriteNibble@cmd:
   305                           	callstack 0
   306  000019                     ___awdiv@divisor:
   307                           	callstack 0
   308  000019                     ___awmod@divisor:
   309                           	callstack 0
   310                           
   311                           ; 2 bytes @ 0x18
   312  000019                     	ds	1
   313  00001A                     ??_LCDInit:
   314  00001A                     WriteByte@data:
   315                           	callstack 0
   316                           
   317                           ; 1 bytes @ 0x19
   318  00001A                     	ds	1
   319  00001B                     WriteByte@cmd:
   320                           	callstack 0
   321  00001B                     ___awdiv@counter:
   322                           	callstack 0
   323  00001B                     ___awmod@counter:
   324                           	callstack 0
   325  00001B                     ___lldiv@divisor:
   326                           	callstack 0
   327                           
   328                           ; 4 bytes @ 0x1A
   329  00001B                     	ds	1
   330  00001C                     ??_LCDClear:
   331  00001C                     LCDGoto@row:
   332                           	callstack 0
   333  00001C                     LCDPutChar@data:
   334                           	callstack 0
   335  00001C                     ___awdiv@sign:
   336                           	callstack 0
   337  00001C                     ___awmod@sign:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x1B
   341  00001C                     	ds	1
   342  00001D                     ??_LCDGoto:
   343  00001D                     LCDWriteStr@string:
   344                           	callstack 0
   345  00001D                     ___awdiv@quotient:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x1C
   349  00001D                     	ds	2
   350  00001F                     ??_LCDWriteStr:
   351  00001F                     _LCDGoto$151:
   352                           	callstack 0
   353  00001F                     ___lldiv@quotient:
   354                           	callstack 0
   355                           
   356                           ; 4 bytes @ 0x1E
   357  00001F                     	ds	2
   358  000021                     LCDGoto@column:
   359                           	callstack 0
   360  000021                     LCDWriteStr@i:
   361                           	callstack 0
   362                           
   363                           ; 1 bytes @ 0x20
   364  000021                     	ds	1
   365  000022                     LCDWriteInt@row:
   366                           	callstack 0
   367                           
   368                           ; 1 bytes @ 0x21
   369  000022                     	ds	1
   370  000023                     LCDWriteInt@value:
   371                           	callstack 0
   372  000023                     ___lldiv@counter:
   373                           	callstack 0
   374                           
   375                           ; 1 bytes @ 0x22
   376  000023                     	ds	1
   377  000024                     LCDWriteInt@column:
   378                           	callstack 0
   379  000024                     UARTInit@baudRate:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x23
   383  000024                     	ds	1
   384  000025                     LCDWriteInt@string:
   385                           	callstack 0
   386                           
   387                           ; 3 bytes @ 0x24
   388  000025                     	ds	1
   389  000026                     ??_UARTInit:
   390                           
   391                           ; 1 bytes @ 0x25
   392  000026                     	ds	2
   393  000028                     ??_main:
   394                           
   395                           ; 1 bytes @ 0x27
   396  000028                     	ds	2
   397                           
   398 ;;
   399 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   400 ;;
   401 ;; *************** function _main *****************
   402 ;; Defined at:
   403 ;;		line 81 in file "main.c"
   404 ;; Parameters:    Size  Location     Type
   405 ;;		None
   406 ;; Auto vars:     Size  Location     Type
   407 ;;		None
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   421 ;;Total ram usage:        2 bytes
   422 ;; Hardware stack levels required when called:   10
   423 ;; This function calls:
   424 ;;		_LCDClear
   425 ;;		_LCDInit
   426 ;;		_LCDWriteInt
   427 ;;		_UARTInit
   428 ;;		_UARTReadByte
   429 ;;		_UARTWriteByte
   430 ;; This function is called by:
   431 ;;		Startup code after reset
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435                           	psect	text0
   436  001646                     __ptext0:
   437                           	callstack 0
   438  001646                     _main:
   439                           	callstack 21
   440  001646                     
   441                           ;main.c: 83:   UARTInit(9600);
   442  001646  0E25               	movlw	37
   443  001648  6E25               	movwf	(UARTInit@baudRate+1)^0,c
   444  00164A  0E80               	movlw	128
   445  00164C  6E24               	movwf	UARTInit@baudRate^0,c
   446  00164E  EC83  F00A         	call	_UARTInit	;wreg free
   447                           
   448                           ;main.c: 84:   LCDInit();
   449  001652  EC18  F008         	call	_LCDInit	;wreg free
   450                           
   451                           ;main.c: 85:   LCDClear();
   452  001656  ECF7  F00B         	call	_LCDClear	;wreg free
   453  00165A                     l152:
   454                           
   455                           ;main.c: 88:       LCDClear();
   456  00165A  ECF7  F00B         	call	_LCDClear	;wreg free
   457  00165E                     
   458                           ;main.c: 89:       UARTWriteByte(3);
   459  00165E  0E03               	movlw	3
   460  001660  EC4C  F00C         	call	_UARTWriteByte
   461  001664                     
   462                           ;main.c: 90:       _delay((unsigned long)((1000)*(1000000UL/4000.0)));
   463  001664  0E02               	movlw	2
   464  001666  6E29               	movwf	(??_main+1)^0,c
   465  001668  0E45               	movlw	69
   466  00166A  6E28               	movwf	??_main^0,c
   467  00166C  0EAA               	movlw	170
   468  00166E                     u827:
   469  00166E  2EE8               	decfsz	wreg,f,c
   470  001670  D7FE               	bra	u827
   471  001672  2E28               	decfsz	??_main^0,f,c
   472  001674  D7FC               	bra	u827
   473  001676  2E29               	decfsz	(??_main+1)^0,f,c
   474  001678  D7FA               	bra	u827
   475  00167A                     
   476                           ;main.c: 91:       LCDWriteInt(1,1,UARTReadByte());
   477  00167A  0E01               	movlw	1
   478  00167C  6E22               	movwf	LCDWriteInt@row^0,c
   479  00167E  EC75  F00C         	call	_UARTReadByte	;wreg free
   480  001682  6E23               	movwf	LCDWriteInt@value^0,c
   481  001684  0E01               	movlw	1
   482  001686  EC54  F00B         	call	_LCDWriteInt
   483  00168A                     
   484                           ;main.c: 92:       _delay((unsigned long)((1000)*(1000000UL/4000.0)));
   485  00168A  0E02               	movlw	2
   486  00168C  6E29               	movwf	(??_main+1)^0,c
   487  00168E  0E45               	movlw	69
   488  001690  6E28               	movwf	??_main^0,c
   489  001692  0EAA               	movlw	170
   490  001694                     u837:
   491  001694  2EE8               	decfsz	wreg,f,c
   492  001696  D7FE               	bra	u837
   493  001698  2E28               	decfsz	??_main^0,f,c
   494  00169A  D7FC               	bra	u837
   495  00169C  2E29               	decfsz	(??_main+1)^0,f,c
   496  00169E  D7FA               	bra	u837
   497  0016A0  EF2D  F00B         	goto	l152
   498  0016A4  EF68  F000         	goto	start
   499  0016A8                     __end_of_main:
   500                           	callstack 0
   501                           
   502 ;; *************** function _UARTWriteByte *****************
   503 ;; Defined at:
   504 ;;		line 53 in file "uart.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;  data            1    wreg     unsigned char 
   507 ;; Auto vars:     Size  Location     Type
   508 ;;  data            1   22[COMRAM] unsigned char 
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;Total ram usage:        1 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    5
   525 ;; This function calls:
   526 ;;		Nothing
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  001898                     __ptext1:
   534                           	callstack 0
   535  001898                     _UARTWriteByte:
   536                           	callstack 25
   537                           
   538                           ;incstack = 0
   539                           ;UARTWriteByte@data stored from wreg
   540  001898  6E17               	movwf	UARTWriteByte@data^0,c
   541  00189A                     l117:
   542  00189A  A2AC               	btfss	172,1,c	;volatile
   543  00189C  EF52  F00C         	goto	u311
   544  0018A0  EF54  F00C         	goto	u310
   545  0018A4                     u311:
   546  0018A4  EF4D  F00C         	goto	l117
   547  0018A8                     u310:
   548  0018A8                     
   549                           ;uart.c: 57:     TXREG1 = data;
   550  0018A8  C017  FFAD         	movff	UARTWriteByte@data,4013	;volatile
   551  0018AC  0012               	return		;funcret
   552  0018AE                     __end_of_UARTWriteByte:
   553                           	callstack 0
   554                           
   555 ;; *************** function _UARTReadByte *****************
   556 ;; Defined at:
   557 ;;		line 60 in file "uart.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;		None
   560 ;; Auto vars:     Size  Location     Type
   561 ;;		None
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      unsigned char 
   564 ;; Registers used:
   565 ;;		wreg, status,2
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;Total ram usage:        0 bytes
   576 ;; Hardware stack levels used:    1
   577 ;; Hardware stack levels required when called:    5
   578 ;; This function calls:
   579 ;;		Nothing
   580 ;; This function is called by:
   581 ;;		_main
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	text2
   586  0018EA                     __ptext2:
   587                           	callstack 0
   588  0018EA                     _UARTReadByte:
   589                           	callstack 25
   590  0018EA                     
   591                           ;uart.c: 62:     return(RCREG1);
   592  0018EA  50AE               	movf	174,w,c	;volatile
   593  0018EC  0012               	return		;funcret
   594  0018EE                     __end_of_UARTReadByte:
   595                           	callstack 0
   596                           
   597 ;; *************** function _UARTInit *****************
   598 ;; Defined at:
   599 ;;		line 20 in file "uart.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  baudRate        2   35[COMRAM] unsigned int 
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, status,2, status,0, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;Total ram usage:        4 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; Hardware stack levels required when called:    6
   620 ;; This function calls:
   621 ;;		___lldiv
   622 ;; This function is called by:
   623 ;;		_main
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           	psect	text3
   628  001506                     __ptext3:
   629                           	callstack 0
   630  001506                     _UARTInit:
   631                           	callstack 24
   632  001506                     
   633                           ;uart.c: 22:     TRISCbits.TRISC6 = 1;
   634  001506  8C94               	bsf	148,6,c	;volatile
   635                           
   636                           ;uart.c: 23:     TRISCbits.TRISC7 = 1;
   637  001508  8E94               	bsf	148,7,c	;volatile
   638                           
   639                           ;uart.c: 24:     ANSELCbits.ANSC7 = 0;
   640  00150A  010F               	movlb	15	; () banked
   641  00150C  9F3A               	bcf	58,7,b	;volatile
   642  00150E                     
   643                           ; BSR set to: 15
   644                           ;uart.c: 26:     TXSTA1 = 0;
   645  00150E  0E00               	movlw	0
   646  001510  6EAC               	movwf	172,c	;volatile
   647                           
   648                           ;uart.c: 27:     RCSTA1 = 0;
   649  001512  0E00               	movlw	0
   650  001514  6EAB               	movwf	171,c	;volatile
   651  001516                     
   652                           ; BSR set to: 15
   653                           ;uart.c: 29:     TXSTA1bits.SYNC = 0;
   654  001516  98AC               	bcf	172,4,c	;volatile
   655  001518                     
   656                           ; BSR set to: 15
   657                           ;uart.c: 30:     TXSTA1bits.TX9 = 0;
   658  001518  9CAC               	bcf	172,6,c	;volatile
   659  00151A                     
   660                           ; BSR set to: 15
   661                           ;uart.c: 31:     RCSTA1bits.RX9 = 0;
   662  00151A  9CAB               	bcf	171,6,c	;volatile
   663  00151C                     
   664                           ; BSR set to: 15
   665                           ;uart.c: 32:     RCSTA1bits.CREN = 1;
   666  00151C  88AB               	bsf	171,4,c	;volatile
   667  00151E                     
   668                           ; BSR set to: 15
   669                           ;uart.c: 33:     RCSTA1bits.ADDEN = 1;
   670  00151E  86AB               	bsf	171,3,c	;volatile
   671  001520                     
   672                           ; BSR set to: 15
   673                           ;uart.c: 34:     PIE1bits.RC1IE = 1;
   674  001520  8A9D               	bsf	157,5,c	;volatile
   675  001522                     
   676                           ; BSR set to: 15
   677                           ;uart.c: 35:     PIE1bits.TX1IE = 0;
   678  001522  989D               	bcf	157,4,c	;volatile
   679  001524                     
   680                           ; BSR set to: 15
   681                           ;uart.c: 37:     TXSTA1bits.BRGH = 1;
   682  001524  84AC               	bsf	172,2,c	;volatile
   683  001526                     
   684                           ; BSR set to: 15
   685                           ;uart.c: 38:     BAUDCON1bits.BRG16 = 1;
   686  001526  86B8               	bsf	184,3,c	;volatile
   687  001528                     
   688                           ; BSR set to: 15
   689                           ;uart.c: 39:     SPBRG1 = (UINT8_T)(((1000000UL / (4 * baudRate)) - 1));
   690  001528  0E40               	movlw	64
   691  00152A  6E17               	movwf	___lldiv@dividend^0,c
   692  00152C  0E42               	movlw	66
   693  00152E  6E18               	movwf	(___lldiv@dividend+1)^0,c
   694  001530  0E0F               	movlw	15
   695  001532  6E19               	movwf	(___lldiv@dividend+2)^0,c
   696  001534  0E00               	movlw	0
   697  001536  6E1A               	movwf	(___lldiv@dividend+3)^0,c
   698  001538  C024  F026         	movff	UARTInit@baudRate,??_UARTInit
   699  00153C  C025  F027         	movff	UARTInit@baudRate+1,??_UARTInit+1
   700  001540  90D8               	bcf	status,0,c
   701  001542  3626               	rlcf	??_UARTInit^0,f,c
   702  001544  3627               	rlcf	(??_UARTInit+1)^0,f,c
   703  001546  90D8               	bcf	status,0,c
   704  001548  3626               	rlcf	??_UARTInit^0,f,c
   705  00154A  3627               	rlcf	(??_UARTInit+1)^0,f,c
   706  00154C  C026  F01B         	movff	??_UARTInit,___lldiv@divisor
   707  001550  C027  F01C         	movff	??_UARTInit+1,___lldiv@divisor+1
   708  001554  6A1D               	clrf	(___lldiv@divisor+2)^0,c
   709  001556  6A1E               	clrf	(___lldiv@divisor+3)^0,c
   710  001558  ECB5  F009         	call	___lldiv	;wreg free
   711  00155C  0417               	decf	?___lldiv^0,w,c
   712  00155E  6EAF               	movwf	175,c	;volatile
   713  001560                     
   714                           ;uart.c: 40:     SPBRGH1 = 0;
   715  001560  0E00               	movlw	0
   716  001562  6EB0               	movwf	176,c	;volatile
   717  001564                     
   718                           ;uart.c: 44:     TXSTA1bits.TXEN = 1;
   719  001564  8AAC               	bsf	172,5,c	;volatile
   720  001566                     
   721                           ;uart.c: 45:     RCSTA1bits.SPEN = 1;
   722  001566  8EAB               	bsf	171,7,c	;volatile
   723  001568                     
   724                           ;uart.c: 47:     RCIF = 0;
   725  001568  9A9E               	bcf	3998,5,c	;volatile
   726  00156A                     
   727                           ;uart.c: 48:     RCIP = 0;
   728  00156A  9A9F               	bcf	3999,5,c	;volatile
   729  00156C                     
   730                           ;uart.c: 49:     RCIE = 1;
   731  00156C  8A9D               	bsf	3997,5,c	;volatile
   732  00156E                     
   733                           ;uart.c: 50:     PEIE = 1;
   734  00156E  8CF2               	bsf	4082,6,c	;volatile
   735  001570  0012               	return		;funcret
   736  001572                     __end_of_UARTInit:
   737                           	callstack 0
   738                           
   739 ;; *************** function ___lldiv *****************
   740 ;; Defined at:
   741 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/__lldiv.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;  dividend        4   22[COMRAM] unsigned long 
   744 ;;  divisor         4   26[COMRAM] unsigned long 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  quotient        4   30[COMRAM] unsigned long 
   747 ;;  counter         1   34[COMRAM] unsigned char 
   748 ;; Return value:  Size  Location     Type
   749 ;;                  4   22[COMRAM] unsigned long 
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   757 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;Total ram usage:       13 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    5
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_UARTInit
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text4
   772  00136A                     __ptext4:
   773                           	callstack 0
   774  00136A                     ___lldiv:
   775                           	callstack 24
   776  00136A  0E00               	movlw	0
   777  00136C  6E1F               	movwf	___lldiv@quotient^0,c
   778  00136E  0E00               	movlw	0
   779  001370  6E20               	movwf	(___lldiv@quotient+1)^0,c
   780  001372  0E00               	movlw	0
   781  001374  6E21               	movwf	(___lldiv@quotient+2)^0,c
   782  001376  0E00               	movlw	0
   783  001378  6E22               	movwf	(___lldiv@quotient+3)^0,c
   784  00137A  501B               	movf	___lldiv@divisor^0,w,c
   785  00137C  101C               	iorwf	(___lldiv@divisor+1)^0,w,c
   786  00137E  101D               	iorwf	(___lldiv@divisor+2)^0,w,c
   787  001380  101E               	iorwf	(___lldiv@divisor+3)^0,w,c
   788  001382  B4D8               	btfsc	status,2,c
   789  001384  EFC6  F009         	goto	u541
   790  001388  EFC8  F009         	goto	u540
   791  00138C                     u541:
   792  00138C  EFFE  F009         	goto	l185
   793  001390                     u540:
   794  001390  0E01               	movlw	1
   795  001392  6E23               	movwf	___lldiv@counter^0,c
   796  001394  EFD2  F009         	goto	l1449
   797  001398                     l1447:
   798  001398  90D8               	bcf	status,0,c
   799  00139A  361B               	rlcf	___lldiv@divisor^0,f,c
   800  00139C  361C               	rlcf	(___lldiv@divisor+1)^0,f,c
   801  00139E  361D               	rlcf	(___lldiv@divisor+2)^0,f,c
   802  0013A0  361E               	rlcf	(___lldiv@divisor+3)^0,f,c
   803  0013A2  2A23               	incf	___lldiv@counter^0,f,c
   804  0013A4                     l1449:
   805  0013A4  AE1E               	btfss	(___lldiv@divisor+3)^0,7,c
   806  0013A6  EFD7  F009         	goto	u551
   807  0013AA  EFD9  F009         	goto	u550
   808  0013AE                     u551:
   809  0013AE  EFCC  F009         	goto	l1447
   810  0013B2                     u550:
   811  0013B2                     l1451:
   812  0013B2  90D8               	bcf	status,0,c
   813  0013B4  361F               	rlcf	___lldiv@quotient^0,f,c
   814  0013B6  3620               	rlcf	(___lldiv@quotient+1)^0,f,c
   815  0013B8  3621               	rlcf	(___lldiv@quotient+2)^0,f,c
   816  0013BA  3622               	rlcf	(___lldiv@quotient+3)^0,f,c
   817  0013BC  501B               	movf	___lldiv@divisor^0,w,c
   818  0013BE  5C17               	subwf	___lldiv@dividend^0,w,c
   819  0013C0  501C               	movf	(___lldiv@divisor+1)^0,w,c
   820  0013C2  5818               	subwfb	(___lldiv@dividend+1)^0,w,c
   821  0013C4  501D               	movf	(___lldiv@divisor+2)^0,w,c
   822  0013C6  5819               	subwfb	(___lldiv@dividend+2)^0,w,c
   823  0013C8  501E               	movf	(___lldiv@divisor+3)^0,w,c
   824  0013CA  581A               	subwfb	(___lldiv@dividend+3)^0,w,c
   825  0013CC  A0D8               	btfss	status,0,c
   826  0013CE  EFEB  F009         	goto	u561
   827  0013D2  EFED  F009         	goto	u560
   828  0013D6                     u561:
   829  0013D6  EFF6  F009         	goto	l1459
   830  0013DA                     u560:
   831  0013DA  501B               	movf	___lldiv@divisor^0,w,c
   832  0013DC  5E17               	subwf	___lldiv@dividend^0,f,c
   833  0013DE  501C               	movf	(___lldiv@divisor+1)^0,w,c
   834  0013E0  5A18               	subwfb	(___lldiv@dividend+1)^0,f,c
   835  0013E2  501D               	movf	(___lldiv@divisor+2)^0,w,c
   836  0013E4  5A19               	subwfb	(___lldiv@dividend+2)^0,f,c
   837  0013E6  501E               	movf	(___lldiv@divisor+3)^0,w,c
   838  0013E8  5A1A               	subwfb	(___lldiv@dividend+3)^0,f,c
   839  0013EA  801F               	bsf	___lldiv@quotient^0,0,c
   840  0013EC                     l1459:
   841  0013EC  90D8               	bcf	status,0,c
   842  0013EE  321E               	rrcf	(___lldiv@divisor+3)^0,f,c
   843  0013F0  321D               	rrcf	(___lldiv@divisor+2)^0,f,c
   844  0013F2  321C               	rrcf	(___lldiv@divisor+1)^0,f,c
   845  0013F4  321B               	rrcf	___lldiv@divisor^0,f,c
   846  0013F6  2E23               	decfsz	___lldiv@counter^0,f,c
   847  0013F8  EFD9  F009         	goto	l1451
   848  0013FC                     l185:
   849  0013FC  C01F  F017         	movff	___lldiv@quotient,?___lldiv
   850  001400  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
   851  001404  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
   852  001408  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
   853  00140C  0012               	return		;funcret
   854  00140E                     __end_of___lldiv:
   855                           	callstack 0
   856                           
   857 ;; *************** function _LCDWriteInt *****************
   858 ;; Defined at:
   859 ;;		line 199 in file "lcd.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;  column          1    wreg     unsigned char 
   862 ;;  row             1   33[COMRAM] unsigned char 
   863 ;;  value           1   34[COMRAM] unsigned char 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  column          1   35[COMRAM] unsigned char 
   866 ;;  string          3   36[COMRAM] unsigned char [3]
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;Total ram usage:        6 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    9
   883 ;; This function calls:
   884 ;;		_LCDGoto
   885 ;;		_LCDWriteStr
   886 ;;		___awdiv
   887 ;;		___awmod
   888 ;; This function is called by:
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text5
   894  0016A8                     __ptext5:
   895                           	callstack 0
   896  0016A8                     _LCDWriteInt:
   897                           	callstack 21
   898                           
   899                           ;incstack = 0
   900                           ;LCDWriteInt@column stored from wreg
   901  0016A8  6E24               	movwf	LCDWriteInt@column^0,c
   902  0016AA                     
   903                           ;lcd.c: 200:     char string[3];;lcd.c: 202:     string[0] = value / 10 + '0';
   904  0016AA  C023  F017         	movff	LCDWriteInt@value,___awdiv@dividend
   905  0016AE  6A18               	clrf	(___awdiv@dividend+1)^0,c
   906  0016B0  0E00               	movlw	0
   907  0016B2  6E1A               	movwf	(___awdiv@divisor+1)^0,c
   908  0016B4  0E0A               	movlw	10
   909  0016B6  6E19               	movwf	___awdiv@divisor^0,c
   910  0016B8  ECFB  F008         	call	___awdiv	;wreg free
   911  0016BC  5017               	movf	?___awdiv^0,w,c
   912  0016BE  0F30               	addlw	48
   913  0016C0  6E25               	movwf	LCDWriteInt@string^0,c
   914                           
   915                           ;lcd.c: 203:     string[1] = value % 10 + '0';
   916  0016C2  C023  F017         	movff	LCDWriteInt@value,___awmod@dividend
   917  0016C6  6A18               	clrf	(___awmod@dividend+1)^0,c
   918  0016C8  0E00               	movlw	0
   919  0016CA  6E1A               	movwf	(___awmod@divisor+1)^0,c
   920  0016CC  0E0A               	movlw	10
   921  0016CE  6E19               	movwf	___awmod@divisor^0,c
   922  0016D0  EC5D  F009         	call	___awmod	;wreg free
   923  0016D4  5017               	movf	?___awmod^0,w,c
   924  0016D6  0F30               	addlw	48
   925  0016D8  6E26               	movwf	(LCDWriteInt@string+1)^0,c
   926  0016DA                     
   927                           ;lcd.c: 204:     string[2] = '\0';
   928  0016DA  0E00               	movlw	0
   929  0016DC  6E27               	movwf	(LCDWriteInt@string+2)^0,c
   930  0016DE                     
   931                           ;lcd.c: 206:     LCDGoto(column, row);
   932  0016DE  C022  F01C         	movff	LCDWriteInt@row,LCDGoto@row
   933  0016E2  5024               	movf	LCDWriteInt@column^0,w,c
   934  0016E4  ECB9  F00A         	call	_LCDGoto
   935  0016E8                     
   936                           ;lcd.c: 207:     LCDWriteStr(string);
   937  0016E8  0E25               	movlw	low LCDWriteInt@string
   938  0016EA  6E1D               	movwf	LCDWriteStr@string^0,c
   939  0016EC  0E00               	movlw	high LCDWriteInt@string
   940  0016EE  6E1E               	movwf	(LCDWriteStr@string+1)^0,c
   941  0016F0  EC07  F00A         	call	_LCDWriteStr	;wreg free
   942  0016F4  0012               	return		;funcret
   943  0016F6                     __end_of_LCDWriteInt:
   944                           	callstack 0
   945                           
   946 ;; *************** function ___awmod *****************
   947 ;; Defined at:
   948 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awmod.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  dividend        2   22[COMRAM] int 
   951 ;;  divisor         2   24[COMRAM] int 
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  sign            1   27[COMRAM] unsigned char 
   954 ;;  counter         1   26[COMRAM] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  2   22[COMRAM] int 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;Total ram usage:        6 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    5
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_LCDWriteInt
   975 ;;		_LCDPutByte
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text6
   980  0012BA                     __ptext6:
   981                           	callstack 0
   982  0012BA                     ___awmod:
   983                           	callstack 24
   984  0012BA  0E00               	movlw	0
   985  0012BC  6E1C               	movwf	___awmod@sign^0,c
   986  0012BE  BE18               	btfsc	(___awmod@dividend+1)^0,7,c
   987  0012C0  EF66  F009         	goto	u630
   988  0012C4  EF64  F009         	goto	u631
   989  0012C8                     u631:
   990  0012C8  EF6C  F009         	goto	l1515
   991  0012CC                     u630:
   992  0012CC  6C17               	negf	___awmod@dividend^0,c
   993  0012CE  1E18               	comf	(___awmod@dividend+1)^0,f,c
   994  0012D0  B0D8               	btfsc	status,0,c
   995  0012D2  2A18               	incf	(___awmod@dividend+1)^0,f,c
   996  0012D4  0E01               	movlw	1
   997  0012D6  6E1C               	movwf	___awmod@sign^0,c
   998  0012D8                     l1515:
   999  0012D8  BE1A               	btfsc	(___awmod@divisor+1)^0,7,c
  1000  0012DA  EF73  F009         	goto	u640
  1001  0012DE  EF71  F009         	goto	u641
  1002  0012E2                     u641:
  1003  0012E2  EF77  F009         	goto	l1519
  1004  0012E6                     u640:
  1005  0012E6  6C19               	negf	___awmod@divisor^0,c
  1006  0012E8  1E1A               	comf	(___awmod@divisor+1)^0,f,c
  1007  0012EA  B0D8               	btfsc	status,0,c
  1008  0012EC  2A1A               	incf	(___awmod@divisor+1)^0,f,c
  1009  0012EE                     l1519:
  1010  0012EE  5019               	movf	___awmod@divisor^0,w,c
  1011  0012F0  101A               	iorwf	(___awmod@divisor+1)^0,w,c
  1012  0012F2  B4D8               	btfsc	status,2,c
  1013  0012F4  EF7E  F009         	goto	u651
  1014  0012F8  EF80  F009         	goto	u650
  1015  0012FC                     u651:
  1016  0012FC  EFA4  F009         	goto	l1535
  1017  001300                     u650:
  1018  001300  0E01               	movlw	1
  1019  001302  6E1B               	movwf	___awmod@counter^0,c
  1020  001304  EF88  F009         	goto	l1525
  1021  001308                     l1523:
  1022  001308  90D8               	bcf	status,0,c
  1023  00130A  3619               	rlcf	___awmod@divisor^0,f,c
  1024  00130C  361A               	rlcf	(___awmod@divisor+1)^0,f,c
  1025  00130E  2A1B               	incf	___awmod@counter^0,f,c
  1026  001310                     l1525:
  1027  001310  AE1A               	btfss	(___awmod@divisor+1)^0,7,c
  1028  001312  EF8D  F009         	goto	u661
  1029  001316  EF8F  F009         	goto	u660
  1030  00131A                     u661:
  1031  00131A  EF84  F009         	goto	l1523
  1032  00131E                     u660:
  1033  00131E                     l1527:
  1034  00131E  5019               	movf	___awmod@divisor^0,w,c
  1035  001320  5C17               	subwf	___awmod@dividend^0,w,c
  1036  001322  501A               	movf	(___awmod@divisor+1)^0,w,c
  1037  001324  5818               	subwfb	(___awmod@dividend+1)^0,w,c
  1038  001326  A0D8               	btfss	status,0,c
  1039  001328  EF98  F009         	goto	u671
  1040  00132C  EF9A  F009         	goto	u670
  1041  001330                     u671:
  1042  001330  EF9E  F009         	goto	l1531
  1043  001334                     u670:
  1044  001334  5019               	movf	___awmod@divisor^0,w,c
  1045  001336  5E17               	subwf	___awmod@dividend^0,f,c
  1046  001338  501A               	movf	(___awmod@divisor+1)^0,w,c
  1047  00133A  5A18               	subwfb	(___awmod@dividend+1)^0,f,c
  1048  00133C                     l1531:
  1049  00133C  90D8               	bcf	status,0,c
  1050  00133E  321A               	rrcf	(___awmod@divisor+1)^0,f,c
  1051  001340  3219               	rrcf	___awmod@divisor^0,f,c
  1052  001342  2E1B               	decfsz	___awmod@counter^0,f,c
  1053  001344  EF8F  F009         	goto	l1527
  1054  001348                     l1535:
  1055  001348  501C               	movf	___awmod@sign^0,w,c
  1056  00134A  B4D8               	btfsc	status,2,c
  1057  00134C  EFAA  F009         	goto	u681
  1058  001350  EFAC  F009         	goto	u680
  1059  001354                     u681:
  1060  001354  EFB0  F009         	goto	l1539
  1061  001358                     u680:
  1062  001358  6C17               	negf	___awmod@dividend^0,c
  1063  00135A  1E18               	comf	(___awmod@dividend+1)^0,f,c
  1064  00135C  B0D8               	btfsc	status,0,c
  1065  00135E  2A18               	incf	(___awmod@dividend+1)^0,f,c
  1066  001360                     l1539:
  1067  001360  C017  F017         	movff	___awmod@dividend,?___awmod
  1068  001364  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  1069  001368  0012               	return		;funcret
  1070  00136A                     __end_of___awmod:
  1071                           	callstack 0
  1072                           
  1073 ;; *************** function ___awdiv *****************
  1074 ;; Defined at:
  1075 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awdiv.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  dividend        2   22[COMRAM] int 
  1078 ;;  divisor         2   24[COMRAM] int 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  quotient        2   28[COMRAM] int 
  1081 ;;  sign            1   27[COMRAM] unsigned char 
  1082 ;;  counter         1   26[COMRAM] unsigned char 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  2   22[COMRAM] int 
  1085 ;; Registers used:
  1086 ;;		wreg, status,2, status,0
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;Total ram usage:        8 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    5
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_LCDWriteInt
  1103 ;;		_LCDPutByte
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           	psect	text7
  1108  0011F6                     __ptext7:
  1109                           	callstack 0
  1110  0011F6                     ___awdiv:
  1111                           	callstack 24
  1112  0011F6  0E00               	movlw	0
  1113  0011F8  6E1C               	movwf	___awdiv@sign^0,c
  1114  0011FA  BE1A               	btfsc	(___awdiv@divisor+1)^0,7,c
  1115  0011FC  EF04  F009         	goto	u570
  1116  001200  EF02  F009         	goto	u571
  1117  001204                     u571:
  1118  001204  EF0A  F009         	goto	l1471
  1119  001208                     u570:
  1120  001208  6C19               	negf	___awdiv@divisor^0,c
  1121  00120A  1E1A               	comf	(___awdiv@divisor+1)^0,f,c
  1122  00120C  B0D8               	btfsc	status,0,c
  1123  00120E  2A1A               	incf	(___awdiv@divisor+1)^0,f,c
  1124  001210  0E01               	movlw	1
  1125  001212  6E1C               	movwf	___awdiv@sign^0,c
  1126  001214                     l1471:
  1127  001214  BE18               	btfsc	(___awdiv@dividend+1)^0,7,c
  1128  001216  EF11  F009         	goto	u580
  1129  00121A  EF0F  F009         	goto	u581
  1130  00121E                     u581:
  1131  00121E  EF17  F009         	goto	l1477
  1132  001222                     u580:
  1133  001222  6C17               	negf	___awdiv@dividend^0,c
  1134  001224  1E18               	comf	(___awdiv@dividend+1)^0,f,c
  1135  001226  B0D8               	btfsc	status,0,c
  1136  001228  2A18               	incf	(___awdiv@dividend+1)^0,f,c
  1137  00122A  0E01               	movlw	1
  1138  00122C  1A1C               	xorwf	___awdiv@sign^0,f,c
  1139  00122E                     l1477:
  1140  00122E  0E00               	movlw	0
  1141  001230  6E1E               	movwf	(___awdiv@quotient+1)^0,c
  1142  001232  0E00               	movlw	0
  1143  001234  6E1D               	movwf	___awdiv@quotient^0,c
  1144  001236  5019               	movf	___awdiv@divisor^0,w,c
  1145  001238  101A               	iorwf	(___awdiv@divisor+1)^0,w,c
  1146  00123A  B4D8               	btfsc	status,2,c
  1147  00123C  EF22  F009         	goto	u591
  1148  001240  EF24  F009         	goto	u590
  1149  001244                     u591:
  1150  001244  EF4C  F009         	goto	l1499
  1151  001248                     u590:
  1152  001248  0E01               	movlw	1
  1153  00124A  6E1B               	movwf	___awdiv@counter^0,c
  1154  00124C  EF2C  F009         	goto	l1485
  1155  001250                     l1483:
  1156  001250  90D8               	bcf	status,0,c
  1157  001252  3619               	rlcf	___awdiv@divisor^0,f,c
  1158  001254  361A               	rlcf	(___awdiv@divisor+1)^0,f,c
  1159  001256  2A1B               	incf	___awdiv@counter^0,f,c
  1160  001258                     l1485:
  1161  001258  AE1A               	btfss	(___awdiv@divisor+1)^0,7,c
  1162  00125A  EF31  F009         	goto	u601
  1163  00125E  EF33  F009         	goto	u600
  1164  001262                     u601:
  1165  001262  EF28  F009         	goto	l1483
  1166  001266                     u600:
  1167  001266                     l1487:
  1168  001266  90D8               	bcf	status,0,c
  1169  001268  361D               	rlcf	___awdiv@quotient^0,f,c
  1170  00126A  361E               	rlcf	(___awdiv@quotient+1)^0,f,c
  1171  00126C  5019               	movf	___awdiv@divisor^0,w,c
  1172  00126E  5C17               	subwf	___awdiv@dividend^0,w,c
  1173  001270  501A               	movf	(___awdiv@divisor+1)^0,w,c
  1174  001272  5818               	subwfb	(___awdiv@dividend+1)^0,w,c
  1175  001274  A0D8               	btfss	status,0,c
  1176  001276  EF3F  F009         	goto	u611
  1177  00127A  EF41  F009         	goto	u610
  1178  00127E                     u611:
  1179  00127E  EF46  F009         	goto	l1495
  1180  001282                     u610:
  1181  001282  5019               	movf	___awdiv@divisor^0,w,c
  1182  001284  5E17               	subwf	___awdiv@dividend^0,f,c
  1183  001286  501A               	movf	(___awdiv@divisor+1)^0,w,c
  1184  001288  5A18               	subwfb	(___awdiv@dividend+1)^0,f,c
  1185  00128A  801D               	bsf	___awdiv@quotient^0,0,c
  1186  00128C                     l1495:
  1187  00128C  90D8               	bcf	status,0,c
  1188  00128E  321A               	rrcf	(___awdiv@divisor+1)^0,f,c
  1189  001290  3219               	rrcf	___awdiv@divisor^0,f,c
  1190  001292  2E1B               	decfsz	___awdiv@counter^0,f,c
  1191  001294  EF33  F009         	goto	l1487
  1192  001298                     l1499:
  1193  001298  501C               	movf	___awdiv@sign^0,w,c
  1194  00129A  B4D8               	btfsc	status,2,c
  1195  00129C  EF52  F009         	goto	u621
  1196  0012A0  EF54  F009         	goto	u620
  1197  0012A4                     u621:
  1198  0012A4  EF58  F009         	goto	l1503
  1199  0012A8                     u620:
  1200  0012A8  6C1D               	negf	___awdiv@quotient^0,c
  1201  0012AA  1E1E               	comf	(___awdiv@quotient+1)^0,f,c
  1202  0012AC  B0D8               	btfsc	status,0,c
  1203  0012AE  2A1E               	incf	(___awdiv@quotient+1)^0,f,c
  1204  0012B0                     l1503:
  1205  0012B0  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  1206  0012B4  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  1207  0012B8  0012               	return		;funcret
  1208  0012BA                     __end_of___awdiv:
  1209                           	callstack 0
  1210                           
  1211 ;; *************** function _LCDWriteStr *****************
  1212 ;; Defined at:
  1213 ;;		line 163 in file "lcd.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  string          2   28[COMRAM] PTR const unsigned char 
  1216 ;;		 -> STR_3(14), STR_2(14), LCDWriteInt@string(3), LCDWriteFloat@string(5), 
  1217 ;;		 -> LCDWriteHexa@string(3), 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  i               1   32[COMRAM] unsigned char 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;Total ram usage:        5 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    8
  1236 ;; This function calls:
  1237 ;;		_LCDPutChar
  1238 ;; This function is called by:
  1239 ;;		_LCDWriteInt
  1240 ;;		_LCDWriteHexa
  1241 ;;		_LCDWriteFloat
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text8
  1246  00140E                     __ptext8:
  1247                           	callstack 0
  1248  00140E                     _LCDWriteStr:
  1249                           	callstack 21
  1250  00140E                     
  1251                           ;lcd.c: 163: void LCDWriteStr(const char *string);lcd.c: 164: {;lcd.c: 165:   UINT8_T i 
      +                          = 0;
  1252  00140E  0E00               	movlw	0
  1253  001410  6E21               	movwf	LCDWriteStr@i^0,c
  1254                           
  1255                           ;lcd.c: 167:   while (string[i])
  1256  001412  EF25  F00A         	goto	l1439
  1257  001416                     l1435:
  1258                           
  1259                           ;lcd.c: 168:     LCDPutChar(string[i++]);
  1260  001416  5021               	movf	LCDWriteStr@i^0,w,c
  1261  001418  241D               	addwf	LCDWriteStr@string^0,w,c
  1262  00141A  6E1F               	movwf	??_LCDWriteStr^0,c
  1263  00141C  0E00               	movlw	0
  1264  00141E  201E               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1265  001420  6E20               	movwf	(??_LCDWriteStr+1)^0,c
  1266  001422  C01F  FFF6         	movff	??_LCDWriteStr,tblptrl
  1267  001426  C020  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1268  00142A  0E00               	movlw	low (__smallconst shr (0+16))
  1269  00142C  6EF8               	movwf	tblptru,c
  1270  00142E  0E0F               	movlw	(high __ramtop+-1)
  1271  001430  64F7               	cpfsgt	tblptrh,c
  1272  001432  D003               	bra	u517
  1273  001434  0008               	tblrd		*
  1274  001436  50F5               	movf	tablat,w,c
  1275  001438  D005               	bra	u510
  1276  00143A                     u517:
  1277  00143A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1278  00143E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1279  001442  50EF               	movf	indf0,w,c
  1280  001444                     u510:
  1281  001444  EC57  F00C         	call	_LCDPutChar
  1282  001448  2A21               	incf	LCDWriteStr@i^0,f,c
  1283  00144A                     l1439:
  1284                           
  1285                           ;lcd.c: 167:   while (string[i])
  1286  00144A  5021               	movf	LCDWriteStr@i^0,w,c
  1287  00144C  241D               	addwf	LCDWriteStr@string^0,w,c
  1288  00144E  6E1F               	movwf	??_LCDWriteStr^0,c
  1289  001450  0E00               	movlw	0
  1290  001452  201E               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1291  001454  6E20               	movwf	(??_LCDWriteStr+1)^0,c
  1292  001456  C01F  FFF6         	movff	??_LCDWriteStr,tblptrl
  1293  00145A  C020  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1294  00145E  0E00               	movlw	low (__smallconst shr (0+16))
  1295  001460  6EF8               	movwf	tblptru,c
  1296  001462  0E0F               	movlw	(high __ramtop+-1)
  1297  001464  64F7               	cpfsgt	tblptrh,c
  1298  001466  D003               	bra	u527
  1299  001468  0008               	tblrd		*
  1300  00146A  50F5               	movf	tablat,w,c
  1301  00146C  D005               	bra	u520
  1302  00146E                     u527:
  1303  00146E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1304  001472  CFF7 FFEA          	movff	tblptrh,fsr0h
  1305  001476  50EF               	movf	indf0,w,c
  1306  001478                     u520:
  1307  001478  0900               	iorlw	0
  1308  00147A  A4D8               	btfss	status,2,c
  1309  00147C  EF42  F00A         	goto	u531
  1310  001480  EF44  F00A         	goto	u530
  1311  001484                     u531:
  1312  001484  EF0B  F00A         	goto	l1435
  1313  001488                     u530:
  1314  001488  0012               	return		;funcret
  1315  00148A                     __end_of_LCDWriteStr:
  1316                           	callstack 0
  1317                           
  1318 ;; *************** function _LCDPutChar *****************
  1319 ;; Defined at:
  1320 ;;		line 150 in file "lcd.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  data            1    wreg     unsigned char 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  data            1   27[COMRAM] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1338 ;;Total ram usage:        1 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    7
  1341 ;; This function calls:
  1342 ;;		_WaitLCD
  1343 ;;		_WriteByte
  1344 ;; This function is called by:
  1345 ;;		_LCDWriteStr
  1346 ;;		_LCDPutByte
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text9
  1351  0018AE                     __ptext9:
  1352                           	callstack 0
  1353  0018AE                     _LCDPutChar:
  1354                           	callstack 21
  1355                           
  1356                           ;incstack = 0
  1357                           ;LCDPutChar@data stored from wreg
  1358  0018AE  6E1C               	movwf	LCDPutChar@data^0,c
  1359  0018B0                     
  1360                           ;lcd.c: 150: void LCDPutChar(UINT8_T data);lcd.c: 151: {;lcd.c: 152:     WriteByte(0, da
      +                          ta);
  1361  0018B0  C01C  F01A         	movff	LCDPutChar@data,WriteByte@data
  1362  0018B4  0E00               	movlw	0
  1363  0018B6  EC32  F00C         	call	_WriteByte
  1364                           
  1365                           ;lcd.c: 153:     WaitLCD();
  1366  0018BA  EC16  F00C         	call	_WaitLCD	;wreg free
  1367  0018BE  0012               	return		;funcret
  1368  0018C0                     __end_of_LCDPutChar:
  1369                           	callstack 0
  1370                           
  1371 ;; *************** function _LCDGoto *****************
  1372 ;; Defined at:
  1373 ;;		line 141 in file "lcd.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  column          1    wreg     unsigned char 
  1376 ;;  row             1   27[COMRAM] unsigned char 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  column          1   32[COMRAM] unsigned char 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, status,2, status,0, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1388 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;Total ram usage:        6 bytes
  1393 ;; Hardware stack levels used:    1
  1394 ;; Hardware stack levels required when called:    7
  1395 ;; This function calls:
  1396 ;;		_WaitLCD
  1397 ;;		_WriteByte
  1398 ;; This function is called by:
  1399 ;;		_LCDWriteInt
  1400 ;;		_LCDWriteHexa
  1401 ;;		_LCDWriteFloat
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text10
  1406  001572                     __ptext10:
  1407                           	callstack 0
  1408  001572                     _LCDGoto:
  1409                           	callstack 22
  1410                           
  1411                           ;incstack = 0
  1412                           ;LCDGoto@column stored from wreg
  1413  001572  6E21               	movwf	LCDGoto@column^0,c
  1414  001574                     
  1415                           ;lcd.c: 141: void LCDGoto(UINT8_T column, UINT8_T row);lcd.c: 142: {;lcd.c: 143:     if 
      +                          ((row > (2 - 1)) || (column > (16 - 1)))
  1416  001574  0E02               	movlw	2
  1417  001576  601C               	cpfslt	LCDGoto@row^0,c
  1418  001578  EFC0  F00A         	goto	u481
  1419  00157C  EFC2  F00A         	goto	u480
  1420  001580                     u481:
  1421  001580  EFED  F00A         	goto	l38
  1422  001584                     u480:
  1423  001584  0E0F               	movlw	15
  1424  001586  6421               	cpfsgt	LCDGoto@column^0,c
  1425  001588  EFC8  F00A         	goto	u491
  1426  00158C  EFCA  F00A         	goto	u490
  1427  001590                     u491:
  1428  001590  EFCC  F00A         	goto	l1423
  1429  001594                     u490:
  1430  001594  EFED  F00A         	goto	l38
  1431  001598                     l1423:
  1432                           
  1433                           ;lcd.c: 146:     WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1434  001598  041C               	decf	LCDGoto@row^0,w,c
  1435  00159A  B4D8               	btfsc	status,2,c
  1436  00159C  EFD2  F00A         	goto	u501
  1437  0015A0  EFD4  F00A         	goto	u500
  1438  0015A4                     u501:
  1439  0015A4  EFDE  F00A         	goto	l1427
  1440  0015A8                     u500:
  1441  0015A8  0E80               	movlw	128
  1442  0015AA  C021  F01D         	movff	LCDGoto@column,??_LCDGoto
  1443  0015AE  6A1E               	clrf	(??_LCDGoto+1)^0,c
  1444  0015B0  101D               	iorwf	??_LCDGoto^0,w,c
  1445  0015B2  6E1F               	movwf	_LCDGoto$151^0,c
  1446  0015B4  501E               	movf	(??_LCDGoto+1)^0,w,c
  1447  0015B6  6E20               	movwf	(_LCDGoto$151+1)^0,c
  1448  0015B8  EFE6  F00A         	goto	l1429
  1449  0015BC                     l1427:
  1450  0015BC  0EC0               	movlw	192
  1451  0015BE  C021  F01D         	movff	LCDGoto@column,??_LCDGoto
  1452  0015C2  6A1E               	clrf	(??_LCDGoto+1)^0,c
  1453  0015C4  101D               	iorwf	??_LCDGoto^0,w,c
  1454  0015C6  6E1F               	movwf	_LCDGoto$151^0,c
  1455  0015C8  501E               	movf	(??_LCDGoto+1)^0,w,c
  1456  0015CA  6E20               	movwf	(_LCDGoto$151+1)^0,c
  1457  0015CC                     l1429:
  1458  0015CC  C01F  F01A         	movff	_LCDGoto$151,WriteByte@data
  1459  0015D0  0E01               	movlw	1
  1460  0015D2  EC32  F00C         	call	_WriteByte
  1461  0015D6                     
  1462                           ;lcd.c: 147:     WaitLCD();
  1463  0015D6  EC16  F00C         	call	_WaitLCD	;wreg free
  1464  0015DA                     l38:
  1465  0015DA  0012               	return		;funcret
  1466  0015DC                     __end_of_LCDGoto:
  1467                           	callstack 0
  1468                           
  1469 ;; *************** function _LCDInit *****************
  1470 ;; Defined at:
  1471 ;;		line 94 in file "lcd.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        1 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    7
  1492 ;; This function calls:
  1493 ;;		_WaitLCD
  1494 ;;		_WriteNibble
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text11
  1501  001030                     __ptext11:
  1502                           	callstack 0
  1503  001030                     _LCDInit:
  1504                           	callstack 23
  1505  001030                     
  1506                           ;lcd.c: 96:     TRISDbits.TRISD7 = 0;
  1507  001030  9E95               	bcf	149,7,c	;volatile
  1508                           
  1509                           ;lcd.c: 97:     TRISDbits.TRISD6 = 0;
  1510  001032  9C95               	bcf	149,6,c	;volatile
  1511                           
  1512                           ;lcd.c: 98:     TRISDbits.TRISD5 = 0;
  1513  001034  9A95               	bcf	149,5,c	;volatile
  1514                           
  1515                           ;lcd.c: 99:     TRISDbits.TRISD4 = 0;
  1516  001036  9895               	bcf	149,4,c	;volatile
  1517                           
  1518                           ;lcd.c: 100:     TRISDbits.TRISD0 = 0;
  1519  001038  9095               	bcf	149,0,c	;volatile
  1520                           
  1521                           ;lcd.c: 101:     TRISDbits.TRISD1 = 0;
  1522  00103A  9295               	bcf	149,1,c	;volatile
  1523                           
  1524                           ;lcd.c: 102:     TRISDbits.TRISD2 = 0;
  1525  00103C  9495               	bcf	149,2,c	;volatile
  1526                           
  1527                           ;lcd.c: 103:     TRISDbits.TRISD3 = 0;
  1528  00103E  9695               	bcf	149,3,c	;volatile
  1529                           
  1530                           ;lcd.c: 105:     LATDbits.LATD7 = 1;
  1531  001040  8E8C               	bsf	140,7,c	;volatile
  1532  001042                     
  1533                           ;lcd.c: 106:     _delay(30000);
  1534  001042  0E27               	movlw	39
  1535  001044  6E1A               	movwf	??_LCDInit^0,c
  1536  001046  0EF5               	movlw	245
  1537  001048                     u847:
  1538  001048  2EE8               	decfsz	wreg,f,c
  1539  00104A  D7FE               	bra	u847
  1540  00104C  2E1A               	decfsz	??_LCDInit^0,f,c
  1541  00104E  D7FC               	bra	u847
  1542  001050  F000               	nop	
  1543  001052                     
  1544                           ;lcd.c: 107:     WriteNibble(1, 0x03);
  1545  001052  0E03               	movlw	3
  1546  001054  6E17               	movwf	WriteNibble@data^0,c
  1547  001056  0E01               	movlw	1
  1548  001058  EC7B  F00B         	call	_WriteNibble
  1549  00105C                     
  1550                           ;lcd.c: 108:     _delay(3000);
  1551  00105C  0E04               	movlw	4
  1552  00105E  6E1A               	movwf	??_LCDInit^0,c
  1553  001060  0EE4               	movlw	228
  1554  001062                     u857:
  1555  001062  2EE8               	decfsz	wreg,f,c
  1556  001064  D7FE               	bra	u857
  1557  001066  2E1A               	decfsz	??_LCDInit^0,f,c
  1558  001068  D7FC               	bra	u857
  1559  00106A  D000               	nop2	
  1560                           
  1561                           ;lcd.c: 109:     WriteNibble(1, 0x03);
  1562  00106C  0E03               	movlw	3
  1563  00106E  6E17               	movwf	WriteNibble@data^0,c
  1564  001070  0E01               	movlw	1
  1565  001072  EC7B  F00B         	call	_WriteNibble
  1566  001076                     
  1567                           ;lcd.c: 110:     _delay(100);
  1568  001076  0E21               	movlw	33
  1569  001078                     u867:
  1570  001078  2EE8               	decfsz	wreg,f,c
  1571  00107A  D7FE               	bra	u867
  1572  00107C  F000               	nop	
  1573  00107E                     
  1574                           ;lcd.c: 111:     WriteNibble(1, 0x03);
  1575  00107E  0E03               	movlw	3
  1576  001080  6E17               	movwf	WriteNibble@data^0,c
  1577  001082  0E01               	movlw	1
  1578  001084  EC7B  F00B         	call	_WriteNibble
  1579                           
  1580                           ;lcd.c: 112:     _delay(100);
  1581  001088  0E21               	movlw	33
  1582  00108A                     u877:
  1583  00108A  2EE8               	decfsz	wreg,f,c
  1584  00108C  D7FE               	bra	u877
  1585  00108E  F000               	nop	
  1586  001090                     
  1587                           ;lcd.c: 113:     WriteNibble(1, 0b00000010);
  1588  001090  0E02               	movlw	2
  1589  001092  6E17               	movwf	WriteNibble@data^0,c
  1590  001094  0E01               	movlw	1
  1591  001096  EC7B  F00B         	call	_WriteNibble
  1592  00109A                     
  1593                           ;lcd.c: 114:     WaitLCD();
  1594  00109A  EC16  F00C         	call	_WaitLCD	;wreg free
  1595  00109E                     
  1596                           ;lcd.c: 115:     WriteNibble(1, 0b00000010);
  1597  00109E  0E02               	movlw	2
  1598  0010A0  6E17               	movwf	WriteNibble@data^0,c
  1599  0010A2  0E01               	movlw	1
  1600  0010A4  EC7B  F00B         	call	_WriteNibble
  1601  0010A8                     
  1602                           ;lcd.c: 116:     WriteNibble(1, 0b00001000);
  1603  0010A8  0E08               	movlw	8
  1604  0010AA  6E17               	movwf	WriteNibble@data^0,c
  1605  0010AC  0E01               	movlw	1
  1606  0010AE  EC7B  F00B         	call	_WriteNibble
  1607  0010B2                     
  1608                           ;lcd.c: 117:     WaitLCD();
  1609  0010B2  EC16  F00C         	call	_WaitLCD	;wreg free
  1610  0010B6                     
  1611                           ;lcd.c: 118:     WriteNibble(1, 0b00000000);
  1612  0010B6  0E00               	movlw	0
  1613  0010B8  6E17               	movwf	WriteNibble@data^0,c
  1614  0010BA  0E01               	movlw	1
  1615  0010BC  EC7B  F00B         	call	_WriteNibble
  1616  0010C0                     
  1617                           ;lcd.c: 119:     WriteNibble(1, 0b00001000);
  1618  0010C0  0E08               	movlw	8
  1619  0010C2  6E17               	movwf	WriteNibble@data^0,c
  1620  0010C4  0E01               	movlw	1
  1621  0010C6  EC7B  F00B         	call	_WriteNibble
  1622  0010CA                     
  1623                           ;lcd.c: 120:     WaitLCD();
  1624  0010CA  EC16  F00C         	call	_WaitLCD	;wreg free
  1625  0010CE                     
  1626                           ;lcd.c: 121:     WriteNibble(1, 0b00000000);
  1627  0010CE  0E00               	movlw	0
  1628  0010D0  6E17               	movwf	WriteNibble@data^0,c
  1629  0010D2  0E01               	movlw	1
  1630  0010D4  EC7B  F00B         	call	_WriteNibble
  1631  0010D8                     
  1632                           ;lcd.c: 122:     WriteNibble(1, 0b00001100);
  1633  0010D8  0E0C               	movlw	12
  1634  0010DA  6E17               	movwf	WriteNibble@data^0,c
  1635  0010DC  0E01               	movlw	1
  1636  0010DE  EC7B  F00B         	call	_WriteNibble
  1637  0010E2                     
  1638                           ;lcd.c: 125:     WaitLCD();
  1639  0010E2  EC16  F00C         	call	_WaitLCD	;wreg free
  1640  0010E6                     
  1641                           ;lcd.c: 126:     WriteNibble(1, 0b00000000);
  1642  0010E6  0E00               	movlw	0
  1643  0010E8  6E17               	movwf	WriteNibble@data^0,c
  1644  0010EA  0E01               	movlw	1
  1645  0010EC  EC7B  F00B         	call	_WriteNibble
  1646  0010F0                     
  1647                           ;lcd.c: 127:     WriteNibble(1, 0b00000001);
  1648  0010F0  0E01               	movlw	1
  1649  0010F2  6E17               	movwf	WriteNibble@data^0,c
  1650  0010F4  0E01               	movlw	1
  1651  0010F6  EC7B  F00B         	call	_WriteNibble
  1652  0010FA                     
  1653                           ;lcd.c: 128:     WaitLCD();
  1654  0010FA  EC16  F00C         	call	_WaitLCD	;wreg free
  1655  0010FE                     
  1656                           ;lcd.c: 129:     WriteNibble(1, 0b00000000);
  1657  0010FE  0E00               	movlw	0
  1658  001100  6E17               	movwf	WriteNibble@data^0,c
  1659  001102  0E01               	movlw	1
  1660  001104  EC7B  F00B         	call	_WriteNibble
  1661  001108                     
  1662                           ;lcd.c: 130:     WriteNibble(1, 0b00000110);
  1663  001108  0E06               	movlw	6
  1664  00110A  6E17               	movwf	WriteNibble@data^0,c
  1665  00110C  0E01               	movlw	1
  1666  00110E  EC7B  F00B         	call	_WriteNibble
  1667  001112                     
  1668                           ;lcd.c: 131:     WaitLCD();
  1669  001112  EC16  F00C         	call	_WaitLCD	;wreg free
  1670  001116  0012               	return		;funcret
  1671  001118                     __end_of_LCDInit:
  1672                           	callstack 0
  1673                           
  1674 ;; *************** function _LCDClear *****************
  1675 ;; Defined at:
  1676 ;;		line 134 in file "lcd.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;Total ram usage:        1 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    7
  1697 ;; This function calls:
  1698 ;;		_WaitLCD
  1699 ;;		_WriteByte
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text12
  1706  0017EE                     __ptext12:
  1707                           	callstack 0
  1708  0017EE                     _LCDClear:
  1709                           	callstack 23
  1710  0017EE                     
  1711                           ;lcd.c: 136:      WriteByte(1, 0x01);
  1712  0017EE  0E01               	movlw	1
  1713  0017F0  6E1A               	movwf	WriteByte@data^0,c
  1714  0017F2  0E01               	movlw	1
  1715  0017F4  EC32  F00C         	call	_WriteByte
  1716  0017F8                     
  1717                           ;lcd.c: 137:      _delay(12500);
  1718  0017F8  0E11               	movlw	17
  1719  0017FA  6E1C               	movwf	??_LCDClear^0,c
  1720  0017FC  0E3A               	movlw	58
  1721  0017FE                     u887:
  1722  0017FE  2EE8               	decfsz	wreg,f,c
  1723  001800  D7FE               	bra	u887
  1724  001802  2E1C               	decfsz	??_LCDClear^0,f,c
  1725  001804  D7FC               	bra	u887
  1726  001806  D000               	nop2	
  1727  001808                     
  1728                           ;lcd.c: 138:      WaitLCD();
  1729  001808  EC16  F00C         	call	_WaitLCD	;wreg free
  1730  00180C  0012               	return		;funcret
  1731  00180E                     __end_of_LCDClear:
  1732                           	callstack 0
  1733                           
  1734 ;; *************** function _WriteByte *****************
  1735 ;; Defined at:
  1736 ;;		line 88 in file "lcd.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  cmd             1    wreg     unsigned char 
  1739 ;;  data            1   25[COMRAM] unsigned char 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  cmd             1   26[COMRAM] unsigned char 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1751 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;Total ram usage:        2 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    6
  1758 ;; This function calls:
  1759 ;;		_WriteNibble
  1760 ;; This function is called by:
  1761 ;;		_LCDClear
  1762 ;;		_LCDGoto
  1763 ;;		_LCDPutChar
  1764 ;;		_LCDShiftDisplay
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text13
  1769  001864                     __ptext13:
  1770                           	callstack 0
  1771  001864                     _WriteByte:
  1772                           	callstack 21
  1773                           
  1774                           ;incstack = 0
  1775                           ;WriteByte@cmd stored from wreg
  1776  001864  6E1B               	movwf	WriteByte@cmd^0,c
  1777  001866                     
  1778                           ;lcd.c: 88: void WriteByte(UINT8_T cmd, UINT8_T data);lcd.c: 89: {;lcd.c: 90:     WriteN
      +                          ibble(cmd, data >> 4);
  1779  001866  381A               	swapf	WriteByte@data^0,w,c
  1780  001868  0B0F               	andlw	15
  1781  00186A  6E17               	movwf	WriteNibble@data^0,c
  1782  00186C  501B               	movf	WriteByte@cmd^0,w,c
  1783  00186E  EC7B  F00B         	call	_WriteNibble
  1784                           
  1785                           ;lcd.c: 91:     WriteNibble(cmd, data);
  1786  001872  C01A  F017         	movff	WriteByte@data,WriteNibble@data
  1787  001876  501B               	movf	WriteByte@cmd^0,w,c
  1788  001878  EC7B  F00B         	call	_WriteNibble
  1789  00187C  0012               	return		;funcret
  1790  00187E                     __end_of_WriteByte:
  1791                           	callstack 0
  1792                           
  1793 ;; *************** function _WriteNibble *****************
  1794 ;; Defined at:
  1795 ;;		line 71 in file "lcd.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  cmd             1    wreg     unsigned char 
  1798 ;;  data            1   22[COMRAM] unsigned char 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  cmd             1   24[COMRAM] unsigned char 
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1810 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;Total ram usage:        3 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    5
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_WriteByte
  1821 ;;		_LCDInit
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text14
  1826  0016F6                     __ptext14:
  1827                           	callstack 0
  1828  0016F6                     _WriteNibble:
  1829                           	callstack 21
  1830                           
  1831                           ;incstack = 0
  1832                           ;WriteNibble@cmd stored from wreg
  1833  0016F6  6E19               	movwf	WriteNibble@cmd^0,c
  1834  0016F8                     
  1835                           ;lcd.c: 71: void WriteNibble(UINT8_T cmd, UINT8_T data);lcd.c: 72: {;lcd.c: 73:     LATD
      +                          bits.LATD4 = (cmd ? 0 : 1);
  1836  0016F8  5019               	movf	WriteNibble@cmd^0,w,c
  1837  0016FA  B4D8               	btfsc	status,2,c
  1838  0016FC  EF82  F00B         	goto	u421
  1839  001700  EF86  F00B         	goto	u420
  1840  001704                     u421:
  1841  001704  6A18               	clrf	??_WriteNibble^0,c
  1842  001706  2A18               	incf	??_WriteNibble^0,f,c
  1843  001708  EF87  F00B         	goto	u438
  1844  00170C                     u420:
  1845  00170C  6A18               	clrf	??_WriteNibble^0,c
  1846  00170E                     u438:
  1847  00170E  3A18               	swapf	??_WriteNibble^0,f,c
  1848  001710  508C               	movf	140,w,c	;volatile
  1849  001712  1818               	xorwf	??_WriteNibble^0,w,c
  1850  001714  0BEF               	andlw	-17
  1851  001716  1818               	xorwf	??_WriteNibble^0,w,c
  1852  001718  6E8C               	movwf	140,c	;volatile
  1853  00171A                     
  1854                           ;lcd.c: 74:     LATDbits.LATD5 = 0;
  1855  00171A  9A8C               	bcf	140,5,c	;volatile
  1856  00171C                     
  1857                           ;lcd.c: 75:     LATDbits.LATD6 = 1;
  1858  00171C  8C8C               	bsf	140,6,c	;volatile
  1859  00171E                     
  1860                           ;lcd.c: 77:     LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1861  00171E  968C               	bcf	140,3,c	;volatile
  1862  001720  948C               	bcf	140,2,c	;volatile
  1863  001722  928C               	bcf	140,1,c	;volatile
  1864  001724  908C               	bcf	140,0,c	;volatile
  1865  001726                     
  1866                           ;lcd.c: 78:     __nop();
  1867  001726  F000               	nop	
  1868  001728                     
  1869                           ;lcd.c: 79:     __nop();
  1870  001728  F000               	nop	
  1871                           
  1872                           ;lcd.c: 81:     LATD = (LATD & 0xF0) | (data & 0x0F);
  1873  00172A  C017  F018         	movff	WriteNibble@data,??_WriteNibble
  1874  00172E  0E0F               	movlw	15
  1875  001730  1618               	andwf	??_WriteNibble^0,f,c
  1876  001732  508C               	movf	140,w,c	;volatile
  1877  001734  0BF0               	andlw	240
  1878  001736  1018               	iorwf	??_WriteNibble^0,w,c
  1879  001738  6E8C               	movwf	140,c	;volatile
  1880  00173A                     
  1881                           ;lcd.c: 82:     __nop();
  1882  00173A  F000               	nop	
  1883  00173C                     
  1884                           ;lcd.c: 83:     __nop();
  1885  00173C  F000               	nop	
  1886  00173E                     
  1887                           ;lcd.c: 85:     LATDbits.LATD6 = 0;
  1888  00173E  9C8C               	bcf	140,6,c	;volatile
  1889  001740  0012               	return		;funcret
  1890  001742                     __end_of_WriteNibble:
  1891                           	callstack 0
  1892                           
  1893 ;; *************** function _WaitLCD *****************
  1894 ;; Defined at:
  1895 ;;		line 57 in file "lcd.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  status          1   23[COMRAM] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, status,0, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;Total ram usage:        1 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    6
  1916 ;; This function calls:
  1917 ;;		_ReadByte
  1918 ;; This function is called by:
  1919 ;;		_LCDInit
  1920 ;;		_LCDClear
  1921 ;;		_LCDGoto
  1922 ;;		_LCDPutChar
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text15
  1927  00182C                     __ptext15:
  1928                           	callstack 0
  1929  00182C                     _WaitLCD:
  1930                           	callstack 21
  1931  00182C                     
  1932                           ;lcd.c: 59:     UINT8_T status;;lcd.c: 61:     LATDbits.LATD4 = 0;
  1933  00182C  988C               	bcf	140,4,c	;volatile
  1934                           
  1935                           ;lcd.c: 62:     LATDbits.LATD5 = 1;
  1936  00182E  8A8C               	bsf	140,5,c	;volatile
  1937  001830                     l1359:
  1938                           
  1939                           ;lcd.c: 65:         status = ReadByte();
  1940  001830  ECC7  F00B         	call	_ReadByte	;wreg free
  1941  001834  6E18               	movwf	WaitLCD@status^0,c
  1942  001836                     
  1943                           ;lcd.c: 66:     } while (status & 0x80);
  1944  001836  BE18               	btfsc	WaitLCD@status^0,7,c
  1945  001838  EF20  F00C         	goto	u441
  1946  00183C  EF22  F00C         	goto	u440
  1947  001840                     u441:
  1948  001840  EF18  F00C         	goto	l1359
  1949  001844                     u440:
  1950  001844                     
  1951                           ;lcd.c: 68:     LATDbits.LATD5 = 0;
  1952  001844  9A8C               	bcf	140,5,c	;volatile
  1953  001846  0012               	return		;funcret
  1954  001848                     __end_of_WaitLCD:
  1955                           	callstack 0
  1956                           
  1957 ;; *************** function _ReadByte *****************
  1958 ;; Defined at:
  1959 ;;		line 26 in file "lcd.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  status          1   22[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      unsigned char 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    5
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_WaitLCD
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text16
  1988  00178E                     __ptext16:
  1989                           	callstack 0
  1990  00178E                     _ReadByte:
  1991                           	callstack 21
  1992  00178E                     
  1993                           ;lcd.c: 28:     UINT8_T status;;lcd.c: 30:     TRISDbits.TRISD0 = 1;
  1994  00178E  8095               	bsf	149,0,c	;volatile
  1995                           
  1996                           ;lcd.c: 31:     TRISDbits.TRISD1 = 1;
  1997  001790  8295               	bsf	149,1,c	;volatile
  1998                           
  1999                           ;lcd.c: 32:     TRISDbits.TRISD2 = 1;
  2000  001792  8495               	bsf	149,2,c	;volatile
  2001                           
  2002                           ;lcd.c: 33:     TRISDbits.TRISD3 = 1;
  2003  001794  8695               	bsf	149,3,c	;volatile
  2004                           
  2005                           ;lcd.c: 35:     LATDbits.LATD6 = 1;
  2006  001796  8C8C               	bsf	140,6,c	;volatile
  2007                           
  2008                           ;lcd.c: 36:     __nop();
  2009  001798  F000               	nop	
  2010                           
  2011                           ;lcd.c: 37:     __nop();
  2012  00179A  F000               	nop	
  2013  00179C                     
  2014                           ;lcd.c: 39:     status = PORTD << 4;
  2015  00179C  3883               	swapf	131,w,c	;volatile
  2016  00179E  0BF0               	andlw	240
  2017  0017A0  6E17               	movwf	ReadByte@status^0,c
  2018  0017A2                     
  2019                           ;lcd.c: 40:     LATDbits.LATD6 = 0;
  2020  0017A2  9C8C               	bcf	140,6,c	;volatile
  2021  0017A4                     
  2022                           ;lcd.c: 42:     LATDbits.LATD6 = 1;
  2023  0017A4  8C8C               	bsf	140,6,c	;volatile
  2024  0017A6                     
  2025                           ;lcd.c: 43:     __nop();
  2026  0017A6  F000               	nop	
  2027  0017A8                     
  2028                           ;lcd.c: 44:     __nop();
  2029  0017A8  F000               	nop	
  2030                           
  2031                           ;lcd.c: 46:     status |= PORTD & 0x0F;
  2032  0017AA  5083               	movf	131,w,c	;volatile
  2033  0017AC  0B0F               	andlw	15
  2034  0017AE  1217               	iorwf	ReadByte@status^0,f,c
  2035  0017B0                     
  2036                           ;lcd.c: 47:     LATDbits.LATD6 = 0;
  2037  0017B0  9C8C               	bcf	140,6,c	;volatile
  2038  0017B2                     
  2039                           ;lcd.c: 49:     TRISDbits.TRISD0 = 0;
  2040  0017B2  9095               	bcf	149,0,c	;volatile
  2041  0017B4                     
  2042                           ;lcd.c: 50:     TRISDbits.TRISD1 = 0;
  2043  0017B4  9295               	bcf	149,1,c	;volatile
  2044  0017B6                     
  2045                           ;lcd.c: 51:     TRISDbits.TRISD2 = 0;
  2046  0017B6  9495               	bcf	149,2,c	;volatile
  2047  0017B8                     
  2048                           ;lcd.c: 52:     TRISDbits.TRISD3 = 0;
  2049  0017B8  9695               	bcf	149,3,c	;volatile
  2050  0017BA                     
  2051                           ;lcd.c: 54:     return(status);
  2052  0017BA  5017               	movf	ReadByte@status^0,w,c
  2053  0017BC  0012               	return		;funcret
  2054  0017BE                     __end_of_ReadByte:
  2055                           	callstack 0
  2056                           
  2057 ;; *************** function _SerialRxPinInterrupt *****************
  2058 ;; Defined at:
  2059 ;;		line 65 in file "uart.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;		None
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;Total ram usage:       10 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    4
  2080 ;; This function calls:
  2081 ;;		_exit
  2082 ;;		i2_LCDGoto
  2083 ;;		i2_LCDPutChar
  2084 ;;		i2_LCDWriteStr
  2085 ;;		i2_UARTReadByte
  2086 ;; This function is called by:
  2087 ;;		Interrupt level 2
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	intcode
  2092  000008                     __pintcode:
  2093                           	callstack 0
  2094  000008                     _SerialRxPinInterrupt:
  2095                           	callstack 21
  2096                           
  2097                           ;incstack = 0
  2098  000008  822E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2099  00000A  CFFA F00D          	movff	pclath,??_SerialRxPinInterrupt
  2100  00000E  CFFB F00E          	movff	pclatu,??_SerialRxPinInterrupt+1
  2101  000012  CFE9 F00F          	movff	fsr0l,??_SerialRxPinInterrupt+2
  2102  000016  CFEA F010          	movff	fsr0h,??_SerialRxPinInterrupt+3
  2103  00001A  CFD9 F011          	movff	fsr2l,??_SerialRxPinInterrupt+4
  2104  00001E  CFDA F012          	movff	fsr2h,??_SerialRxPinInterrupt+5
  2105  000022  CFF6 F013          	movff	tblptrl,??_SerialRxPinInterrupt+6
  2106  000026  CFF7 F014          	movff	tblptrh,??_SerialRxPinInterrupt+7
  2107  00002A  CFF8 F015          	movff	tblptru,??_SerialRxPinInterrupt+8
  2108  00002E  CFF5 F016          	movff	tablat,??_SerialRxPinInterrupt+9
  2109  000032                     
  2110                           ;uart.c: 67:     if (PIR1bits.RCIF == 1) {
  2111  000032  AA9E               	btfss	158,5,c	;volatile
  2112  000034  EF1E  F000         	goto	i2u79_41
  2113  000038  EF20  F000         	goto	i2u79_40
  2114  00003C                     i2u79_41:
  2115  00003C  EF52  F000         	goto	i2l133
  2116  000040                     i2u79_40:
  2117  000040                     
  2118                           ;uart.c: 69:         if (RCSTA1bits.FERR) {
  2119  000040  A4AB               	btfss	171,2,c	;volatile
  2120  000042  EF25  F000         	goto	i2u80_41
  2121  000046  EF27  F000         	goto	i2u80_40
  2122  00004A                     i2u80_41:
  2123  00004A  EF3A  F000         	goto	i2l129
  2124  00004E                     i2u80_40:
  2125  00004E                     
  2126                           ;uart.c: 70:             LCDGoto(0, 1);
  2127  00004E  0E01               	movlw	1
  2128  000050  6E06               	movwf	i2LCDGoto@row^0,c
  2129  000052  0E00               	movlw	0
  2130  000054  ECEE  F00A         	call	i2_LCDGoto
  2131  000058                     
  2132                           ;uart.c: 71:             LCDWriteStr("Framing Error");
  2133  000058  0E12               	movlw	low STR_2
  2134  00005A  6E07               	movwf	i2LCDWriteStr@string^0,c
  2135  00005C  0E10               	movlw	high STR_2
  2136  00005E  6E08               	movwf	(i2LCDWriteStr@string+1)^0,c
  2137  000060  EC45  F00A         	call	i2_LCDWriteStr	;wreg free
  2138  000064                     i2l1725:
  2139                           
  2140                           ;uart.c: 72:             exit(1);
  2141  000064  0E00               	movlw	0
  2142  000066  6E0C               	movwf	(exit@code+1)^0,c
  2143  000068  0E01               	movlw	1
  2144  00006A  6E0B               	movwf	exit@code^0,c
  2145  00006C  EC69  F00C         	call	_exit	;wreg free
  2146                           
  2147                           ;uart.c: 73:         } else if (RCSTA1bits.OERR) {
  2148  000070  EF52  F000         	goto	i2l133
  2149  000074                     i2l129:
  2150  000074  A2AB               	btfss	171,1,c	;volatile
  2151  000076  EF3F  F000         	goto	i2u81_41
  2152  00007A  EF41  F000         	goto	i2u81_40
  2153  00007E                     i2u81_41:
  2154  00007E  EF4E  F000         	goto	i2l1733
  2155  000082                     i2u81_40:
  2156  000082                     
  2157                           ;uart.c: 74:             LCDGoto(0, 1);
  2158  000082  0E01               	movlw	1
  2159  000084  6E06               	movwf	i2LCDGoto@row^0,c
  2160  000086  0E00               	movlw	0
  2161  000088  ECEE  F00A         	call	i2_LCDGoto
  2162  00008C                     
  2163                           ;uart.c: 75:             LCDWriteStr("Overrun Error");
  2164  00008C  0E20               	movlw	low STR_3
  2165  00008E  6E07               	movwf	i2LCDWriteStr@string^0,c
  2166  000090  0E10               	movlw	high STR_3
  2167  000092  6E08               	movwf	(i2LCDWriteStr@string+1)^0,c
  2168  000094  EC45  F00A         	call	i2_LCDWriteStr	;wreg free
  2169  000098  EF32  F000         	goto	i2l1725
  2170  00009C                     i2l1733:
  2171                           
  2172                           ;uart.c: 78:             LCDPutChar(UARTReadByte());
  2173  00009C  EC77  F00C         	call	i2_UARTReadByte	;wreg free
  2174  0000A0  EC60  F00C         	call	i2_LCDPutChar
  2175  0000A4                     i2l133:
  2176  0000A4  C016  FFF5         	movff	??_SerialRxPinInterrupt+9,tablat
  2177  0000A8  C015  FFF8         	movff	??_SerialRxPinInterrupt+8,tblptru
  2178  0000AC  C014  FFF7         	movff	??_SerialRxPinInterrupt+7,tblptrh
  2179  0000B0  C013  FFF6         	movff	??_SerialRxPinInterrupt+6,tblptrl
  2180  0000B4  C012  FFDA         	movff	??_SerialRxPinInterrupt+5,fsr2h
  2181  0000B8  C011  FFD9         	movff	??_SerialRxPinInterrupt+4,fsr2l
  2182  0000BC  C010  FFEA         	movff	??_SerialRxPinInterrupt+3,fsr0h
  2183  0000C0  C00F  FFE9         	movff	??_SerialRxPinInterrupt+2,fsr0l
  2184  0000C4  C00E  FFFB         	movff	??_SerialRxPinInterrupt+1,pclatu
  2185  0000C8  C00D  FFFA         	movff	??_SerialRxPinInterrupt,pclath
  2186  0000CC  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2187  0000CE  0011               	retfie		f
  2188  0000D0                     __end_of_SerialRxPinInterrupt:
  2189                           	callstack 0
  2190                           
  2191 ;; *************** function i2_UARTReadByte *****************
  2192 ;; Defined at:
  2193 ;;		line 60 in file "uart.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      unsigned char 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;Total ram usage:        0 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_SerialRxPinInterrupt
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text18
  2221  0018EE                     __ptext18:
  2222                           	callstack 0
  2223  0018EE                     i2_UARTReadByte:
  2224                           	callstack 24
  2225  0018EE                     
  2226                           ;uart.c: 62:     return(RCREG1);
  2227  0018EE  50AE               	movf	174,w,c	;volatile
  2228  0018F0  0012               	return		;funcret
  2229  0018F2                     __end_ofi2_UARTReadByte:
  2230                           	callstack 0
  2231                           
  2232 ;; *************** function i2_LCDWriteStr *****************
  2233 ;; Defined at:
  2234 ;;		line 163 in file "lcd.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  string          2    6[COMRAM] PTR const unsigned char 
  2237 ;;		 -> STR_3(14), STR_2(14), LCDWriteInt@string(3), LCDWriteFloat@string(5), 
  2238 ;;		 -> LCDWriteHexa@string(3), 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  i               1   10[COMRAM] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2250 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;Total ram usage:        5 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    3
  2257 ;; This function calls:
  2258 ;;		i2_LCDPutChar
  2259 ;; This function is called by:
  2260 ;;		_SerialRxPinInterrupt
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text19
  2265  00148A                     __ptext19:
  2266                           	callstack 0
  2267  00148A                     i2_LCDWriteStr:
  2268                           	callstack 21
  2269  00148A                     
  2270                           ;lcd.c: 163: void LCDWriteStr(const char *string);lcd.c: 164: {;lcd.c: 165:   UINT8_T i 
      +                          = 0;
  2271  00148A  0E00               	movlw	0
  2272  00148C  6E0B               	movwf	i2LCDWriteStr@i^0,c
  2273                           
  2274                           ;lcd.c: 167:   while (string[i])
  2275  00148E  EF63  F00A         	goto	i2l1681
  2276  001492                     i2l1677:
  2277                           
  2278                           ;lcd.c: 168:     LCDPutChar(string[i++]);
  2279  001492  500B               	movf	i2LCDWriteStr@i^0,w,c
  2280  001494  2407               	addwf	i2LCDWriteStr@string^0,w,c
  2281  001496  6E09               	movwf	??i2_LCDWriteStr^0,c
  2282  001498  0E00               	movlw	0
  2283  00149A  2008               	addwfc	(i2LCDWriteStr@string+1)^0,w,c
  2284  00149C  6E0A               	movwf	(??i2_LCDWriteStr+1)^0,c
  2285  00149E  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  2286  0014A2  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  2287  0014A6  0E00               	movlw	low (__smallconst shr (0+16))
  2288  0014A8  6EF8               	movwf	tblptru,c
  2289  0014AA  0E0F               	movlw	(high __ramtop+-1)
  2290  0014AC  64F7               	cpfsgt	tblptrh,c
  2291  0014AE  D003               	bra	i2u75_47
  2292  0014B0  0008               	tblrd		*
  2293  0014B2  50F5               	movf	tablat,w,c
  2294  0014B4  D005               	bra	i2u75_40
  2295  0014B6                     i2u75_47:
  2296  0014B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2297  0014BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2298  0014BE  50EF               	movf	indf0,w,c
  2299  0014C0                     i2u75_40:
  2300  0014C0  EC60  F00C         	call	i2_LCDPutChar
  2301  0014C4  2A0B               	incf	i2LCDWriteStr@i^0,f,c
  2302  0014C6                     i2l1681:
  2303                           
  2304                           ;lcd.c: 167:   while (string[i])
  2305  0014C6  500B               	movf	i2LCDWriteStr@i^0,w,c
  2306  0014C8  2407               	addwf	i2LCDWriteStr@string^0,w,c
  2307  0014CA  6E09               	movwf	??i2_LCDWriteStr^0,c
  2308  0014CC  0E00               	movlw	0
  2309  0014CE  2008               	addwfc	(i2LCDWriteStr@string+1)^0,w,c
  2310  0014D0  6E0A               	movwf	(??i2_LCDWriteStr+1)^0,c
  2311  0014D2  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  2312  0014D6  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  2313  0014DA  0E00               	movlw	low (__smallconst shr (0+16))
  2314  0014DC  6EF8               	movwf	tblptru,c
  2315  0014DE  0E0F               	movlw	(high __ramtop+-1)
  2316  0014E0  64F7               	cpfsgt	tblptrh,c
  2317  0014E2  D003               	bra	i2u76_47
  2318  0014E4  0008               	tblrd		*
  2319  0014E6  50F5               	movf	tablat,w,c
  2320  0014E8  D005               	bra	i2u76_40
  2321  0014EA                     i2u76_47:
  2322  0014EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2323  0014EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2324  0014F2  50EF               	movf	indf0,w,c
  2325  0014F4                     i2u76_40:
  2326  0014F4  0900               	iorlw	0
  2327  0014F6  A4D8               	btfss	status,2,c
  2328  0014F8  EF80  F00A         	goto	i2u77_41
  2329  0014FC  EF82  F00A         	goto	i2u77_40
  2330  001500                     i2u77_41:
  2331  001500  EF49  F00A         	goto	i2l1677
  2332  001504                     i2u77_40:
  2333  001504  0012               	return		;funcret
  2334  001506                     __end_ofi2_LCDWriteStr:
  2335                           	callstack 0
  2336                           
  2337 ;; *************** function i2_LCDPutChar *****************
  2338 ;; Defined at:
  2339 ;;		line 150 in file "lcd.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  data            1    wreg     unsigned char 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  data            1    5[COMRAM] unsigned char 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;Total ram usage:        1 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    2
  2360 ;; This function calls:
  2361 ;;		i2_WaitLCD
  2362 ;;		i2_WriteByte
  2363 ;; This function is called by:
  2364 ;;		_SerialRxPinInterrupt
  2365 ;;		i2_LCDWriteStr
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text20
  2370  0018C0                     __ptext20:
  2371                           	callstack 0
  2372  0018C0                     i2_LCDPutChar:
  2373                           	callstack 21
  2374                           
  2375                           ;incstack = 0
  2376                           ;i2LCDPutChar@data stored from wreg
  2377  0018C0  6E06               	movwf	i2LCDPutChar@data^0,c
  2378  0018C2                     
  2379                           ;lcd.c: 150: void LCDPutChar(UINT8_T data);lcd.c: 151: {;lcd.c: 152:     WriteByte(0, da
      +                          ta);
  2380  0018C2  C006  F004         	movff	i2LCDPutChar@data,i2WriteByte@data
  2381  0018C6  0E00               	movlw	0
  2382  0018C8  EC3F  F00C         	call	i2_WriteByte
  2383                           
  2384                           ;lcd.c: 153:     WaitLCD();
  2385  0018CC  EC24  F00C         	call	i2_WaitLCD	;wreg free
  2386  0018D0  0012               	return		;funcret
  2387  0018D2                     __end_ofi2_LCDPutChar:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function i2_LCDGoto *****************
  2391 ;; Defined at:
  2392 ;;		line 141 in file "lcd.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  column          1    wreg     unsigned char 
  2395 ;;  row             1    5[COMRAM] unsigned char 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  column          1   10[COMRAM] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      void 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2407 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;Total ram usage:        6 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    2
  2414 ;; This function calls:
  2415 ;;		i2_WaitLCD
  2416 ;;		i2_WriteByte
  2417 ;; This function is called by:
  2418 ;;		_SerialRxPinInterrupt
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text21
  2423  0015DC                     __ptext21:
  2424                           	callstack 0
  2425  0015DC                     i2_LCDGoto:
  2426                           	callstack 22
  2427                           
  2428                           ;incstack = 0
  2429                           ;i2LCDGoto@column stored from wreg
  2430  0015DC  6E0B               	movwf	i2LCDGoto@column^0,c
  2431  0015DE                     
  2432                           ;lcd.c: 141: void LCDGoto(UINT8_T column, UINT8_T row);lcd.c: 142: {;lcd.c: 143:     if 
      +                          ((row > (2 - 1)) || (column > (16 - 1)))
  2433  0015DE  0E02               	movlw	2
  2434  0015E0  6006               	cpfslt	i2LCDGoto@row^0,c
  2435  0015E2  EFF5  F00A         	goto	i2u72_41
  2436  0015E6  EFF7  F00A         	goto	i2u72_40
  2437  0015EA                     i2u72_41:
  2438  0015EA  EF22  F00B         	goto	i2l38
  2439  0015EE                     i2u72_40:
  2440  0015EE  0E0F               	movlw	15
  2441  0015F0  640B               	cpfsgt	i2LCDGoto@column^0,c
  2442  0015F2  EFFD  F00A         	goto	i2u73_41
  2443  0015F6  EFFF  F00A         	goto	i2u73_40
  2444  0015FA                     i2u73_41:
  2445  0015FA  EF01  F00B         	goto	i2l1665
  2446  0015FE                     i2u73_40:
  2447  0015FE  EF22  F00B         	goto	i2l38
  2448  001602                     i2l1665:
  2449                           
  2450                           ;lcd.c: 146:     WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  2451  001602  0406               	decf	i2LCDGoto@row^0,w,c
  2452  001604  B4D8               	btfsc	status,2,c
  2453  001606  EF07  F00B         	goto	i2u74_41
  2454  00160A  EF09  F00B         	goto	i2u74_40
  2455  00160E                     i2u74_41:
  2456  00160E  EF13  F00B         	goto	i2l1669
  2457  001612                     i2u74_40:
  2458  001612  0E80               	movlw	128
  2459  001614  C00B  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  2460  001618  6A08               	clrf	(??i2_LCDGoto+1)^0,c
  2461  00161A  1007               	iorwf	??i2_LCDGoto^0,w,c
  2462  00161C  6E09               	movwf	i2_LCDGoto$151^0,c
  2463  00161E  5008               	movf	(??i2_LCDGoto+1)^0,w,c
  2464  001620  6E0A               	movwf	(i2_LCDGoto$151+1)^0,c
  2465  001622  EF1B  F00B         	goto	i2l1671
  2466  001626                     i2l1669:
  2467  001626  0EC0               	movlw	192
  2468  001628  C00B  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  2469  00162C  6A08               	clrf	(??i2_LCDGoto+1)^0,c
  2470  00162E  1007               	iorwf	??i2_LCDGoto^0,w,c
  2471  001630  6E09               	movwf	i2_LCDGoto$151^0,c
  2472  001632  5008               	movf	(??i2_LCDGoto+1)^0,w,c
  2473  001634  6E0A               	movwf	(i2_LCDGoto$151+1)^0,c
  2474  001636                     i2l1671:
  2475  001636  C009  F004         	movff	i2_LCDGoto$151,i2WriteByte@data
  2476  00163A  0E01               	movlw	1
  2477  00163C  EC3F  F00C         	call	i2_WriteByte
  2478  001640                     
  2479                           ;lcd.c: 147:     WaitLCD();
  2480  001640  EC24  F00C         	call	i2_WaitLCD	;wreg free
  2481  001644                     i2l38:
  2482  001644  0012               	return		;funcret
  2483  001646                     __end_ofi2_LCDGoto:
  2484                           	callstack 0
  2485                           
  2486 ;; *************** function i2_WriteByte *****************
  2487 ;; Defined at:
  2488 ;;		line 88 in file "lcd.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  cmd             1    wreg     unsigned char 
  2491 ;;  data            1    3[COMRAM] unsigned char 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  cmd             1    4[COMRAM] unsigned char 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2503 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;Total ram usage:        2 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    1
  2510 ;; This function calls:
  2511 ;;		i2_WriteNibble
  2512 ;; This function is called by:
  2513 ;;		i2_LCDGoto
  2514 ;;		i2_LCDPutChar
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text22
  2519  00187E                     __ptext22:
  2520                           	callstack 0
  2521  00187E                     i2_WriteByte:
  2522                           	callstack 21
  2523                           
  2524                           ;incstack = 0
  2525                           ;i2WriteByte@cmd stored from wreg
  2526  00187E  6E05               	movwf	i2WriteByte@cmd^0,c
  2527  001880                     
  2528                           ;lcd.c: 88: void WriteByte(UINT8_T cmd, UINT8_T data);lcd.c: 89: {;lcd.c: 90:     WriteN
      +                          ibble(cmd, data >> 4);
  2529  001880  3804               	swapf	i2WriteByte@data^0,w,c
  2530  001882  0B0F               	andlw	15
  2531  001884  6E01               	movwf	i2WriteNibble@data^0,c
  2532  001886  5005               	movf	i2WriteByte@cmd^0,w,c
  2533  001888  ECA1  F00B         	call	i2_WriteNibble
  2534                           
  2535                           ;lcd.c: 91:     WriteNibble(cmd, data);
  2536  00188C  C004  F001         	movff	i2WriteByte@data,i2WriteNibble@data
  2537  001890  5005               	movf	i2WriteByte@cmd^0,w,c
  2538  001892  ECA1  F00B         	call	i2_WriteNibble
  2539  001896  0012               	return		;funcret
  2540  001898                     __end_ofi2_WriteByte:
  2541                           	callstack 0
  2542                           
  2543 ;; *************** function i2_WriteNibble *****************
  2544 ;; Defined at:
  2545 ;;		line 71 in file "lcd.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  cmd             1    wreg     unsigned char 
  2548 ;;  data            1    0[COMRAM] unsigned char 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  cmd             1    2[COMRAM] unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2560 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;Total ram usage:        3 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		i2_WriteByte
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text23
  2574  001742                     __ptext23:
  2575                           	callstack 0
  2576  001742                     i2_WriteNibble:
  2577                           	callstack 21
  2578                           
  2579                           ;incstack = 0
  2580                           ;i2WriteNibble@cmd stored from wreg
  2581  001742  6E03               	movwf	i2WriteNibble@cmd^0,c
  2582  001744                     
  2583                           ;lcd.c: 71: void WriteNibble(UINT8_T cmd, UINT8_T data);lcd.c: 72: {;lcd.c: 73:     LATD
      +                          bits.LATD4 = (cmd ? 0 : 1);
  2584  001744  5003               	movf	i2WriteNibble@cmd^0,w,c
  2585  001746  B4D8               	btfsc	status,2,c
  2586  001748  EFA8  F00B         	goto	i2u45_41
  2587  00174C  EFAC  F00B         	goto	i2u45_40
  2588  001750                     i2u45_41:
  2589  001750  6A02               	clrf	??i2_WriteNibble^0,c
  2590  001752  2A02               	incf	??i2_WriteNibble^0,f,c
  2591  001754  EFAD  F00B         	goto	i2u46_48
  2592  001758                     i2u45_40:
  2593  001758  6A02               	clrf	??i2_WriteNibble^0,c
  2594  00175A                     i2u46_48:
  2595  00175A  3A02               	swapf	??i2_WriteNibble^0,f,c
  2596  00175C  508C               	movf	140,w,c	;volatile
  2597  00175E  1802               	xorwf	??i2_WriteNibble^0,w,c
  2598  001760  0BEF               	andlw	-17
  2599  001762  1802               	xorwf	??i2_WriteNibble^0,w,c
  2600  001764  6E8C               	movwf	140,c	;volatile
  2601  001766                     
  2602                           ;lcd.c: 74:     LATDbits.LATD5 = 0;
  2603  001766  9A8C               	bcf	140,5,c	;volatile
  2604  001768                     
  2605                           ;lcd.c: 75:     LATDbits.LATD6 = 1;
  2606  001768  8C8C               	bsf	140,6,c	;volatile
  2607  00176A                     
  2608                           ;lcd.c: 77:     LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  2609  00176A  968C               	bcf	140,3,c	;volatile
  2610  00176C  948C               	bcf	140,2,c	;volatile
  2611  00176E  928C               	bcf	140,1,c	;volatile
  2612  001770  908C               	bcf	140,0,c	;volatile
  2613  001772                     
  2614                           ;lcd.c: 78:     __nop();
  2615  001772  F000               	nop	
  2616  001774                     
  2617                           ;lcd.c: 79:     __nop();
  2618  001774  F000               	nop	
  2619                           
  2620                           ;lcd.c: 81:     LATD = (LATD & 0xF0) | (data & 0x0F);
  2621  001776  C001  F002         	movff	i2WriteNibble@data,??i2_WriteNibble
  2622  00177A  0E0F               	movlw	15
  2623  00177C  1602               	andwf	??i2_WriteNibble^0,f,c
  2624  00177E  508C               	movf	140,w,c	;volatile
  2625  001780  0BF0               	andlw	240
  2626  001782  1002               	iorwf	??i2_WriteNibble^0,w,c
  2627  001784  6E8C               	movwf	140,c	;volatile
  2628  001786                     
  2629                           ;lcd.c: 82:     __nop();
  2630  001786  F000               	nop	
  2631  001788                     
  2632                           ;lcd.c: 83:     __nop();
  2633  001788  F000               	nop	
  2634  00178A                     
  2635                           ;lcd.c: 85:     LATDbits.LATD6 = 0;
  2636  00178A  9C8C               	bcf	140,6,c	;volatile
  2637  00178C  0012               	return		;funcret
  2638  00178E                     __end_ofi2_WriteNibble:
  2639                           	callstack 0
  2640                           
  2641 ;; *************** function i2_WaitLCD *****************
  2642 ;; Defined at:
  2643 ;;		line 57 in file "lcd.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;  status          1    1[COMRAM] unsigned char 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;Total ram usage:        1 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    1
  2664 ;; This function calls:
  2665 ;;		i2_ReadByte
  2666 ;; This function is called by:
  2667 ;;		i2_LCDGoto
  2668 ;;		i2_LCDPutChar
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text24
  2673  001848                     __ptext24:
  2674                           	callstack 0
  2675  001848                     i2_WaitLCD:
  2676                           	callstack 21
  2677  001848                     
  2678                           ;lcd.c: 59:     UINT8_T status;;lcd.c: 61:     LATDbits.LATD4 = 0;
  2679  001848  988C               	bcf	140,4,c	;volatile
  2680                           
  2681                           ;lcd.c: 62:     LATDbits.LATD5 = 1;
  2682  00184A  8A8C               	bsf	140,5,c	;volatile
  2683  00184C                     i2l1413:
  2684                           
  2685                           ;lcd.c: 65:         status = ReadByte();
  2686  00184C  ECDF  F00B         	call	i2_ReadByte	;wreg free
  2687  001850  6E02               	movwf	i2WaitLCD@status^0,c
  2688  001852                     
  2689                           ;lcd.c: 66:     } while (status & 0x80);
  2690  001852  BE02               	btfsc	i2WaitLCD@status^0,7,c
  2691  001854  EF2E  F00C         	goto	i2u47_41
  2692  001858  EF30  F00C         	goto	i2u47_40
  2693  00185C                     i2u47_41:
  2694  00185C  EF26  F00C         	goto	i2l1413
  2695  001860                     i2u47_40:
  2696  001860                     
  2697                           ;lcd.c: 68:     LATDbits.LATD5 = 0;
  2698  001860  9A8C               	bcf	140,5,c	;volatile
  2699  001862  0012               	return		;funcret
  2700  001864                     __end_ofi2_WaitLCD:
  2701                           	callstack 0
  2702                           
  2703 ;; *************** function i2_ReadByte *****************
  2704 ;; Defined at:
  2705 ;;		line 26 in file "lcd.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  status          1    0[COMRAM] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      unsigned char 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;Total ram usage:        1 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		i2_WaitLCD
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text25
  2733  0017BE                     __ptext25:
  2734                           	callstack 0
  2735  0017BE                     i2_ReadByte:
  2736                           	callstack 21
  2737  0017BE                     
  2738                           ;lcd.c: 28:     UINT8_T status;;lcd.c: 30:     TRISDbits.TRISD0 = 1;
  2739  0017BE  8095               	bsf	149,0,c	;volatile
  2740                           
  2741                           ;lcd.c: 31:     TRISDbits.TRISD1 = 1;
  2742  0017C0  8295               	bsf	149,1,c	;volatile
  2743                           
  2744                           ;lcd.c: 32:     TRISDbits.TRISD2 = 1;
  2745  0017C2  8495               	bsf	149,2,c	;volatile
  2746                           
  2747                           ;lcd.c: 33:     TRISDbits.TRISD3 = 1;
  2748  0017C4  8695               	bsf	149,3,c	;volatile
  2749                           
  2750                           ;lcd.c: 35:     LATDbits.LATD6 = 1;
  2751  0017C6  8C8C               	bsf	140,6,c	;volatile
  2752                           
  2753                           ;lcd.c: 36:     __nop();
  2754  0017C8  F000               	nop	
  2755                           
  2756                           ;lcd.c: 37:     __nop();
  2757  0017CA  F000               	nop	
  2758  0017CC                     
  2759                           ;lcd.c: 39:     status = PORTD << 4;
  2760  0017CC  3883               	swapf	131,w,c	;volatile
  2761  0017CE  0BF0               	andlw	240
  2762  0017D0  6E01               	movwf	i2ReadByte@status^0,c
  2763  0017D2                     
  2764                           ;lcd.c: 40:     LATDbits.LATD6 = 0;
  2765  0017D2  9C8C               	bcf	140,6,c	;volatile
  2766  0017D4                     
  2767                           ;lcd.c: 42:     LATDbits.LATD6 = 1;
  2768  0017D4  8C8C               	bsf	140,6,c	;volatile
  2769  0017D6                     
  2770                           ;lcd.c: 43:     __nop();
  2771  0017D6  F000               	nop	
  2772  0017D8                     
  2773                           ;lcd.c: 44:     __nop();
  2774  0017D8  F000               	nop	
  2775                           
  2776                           ;lcd.c: 46:     status |= PORTD & 0x0F;
  2777  0017DA  5083               	movf	131,w,c	;volatile
  2778  0017DC  0B0F               	andlw	15
  2779  0017DE  1201               	iorwf	i2ReadByte@status^0,f,c
  2780  0017E0                     
  2781                           ;lcd.c: 47:     LATDbits.LATD6 = 0;
  2782  0017E0  9C8C               	bcf	140,6,c	;volatile
  2783  0017E2                     
  2784                           ;lcd.c: 49:     TRISDbits.TRISD0 = 0;
  2785  0017E2  9095               	bcf	149,0,c	;volatile
  2786  0017E4                     
  2787                           ;lcd.c: 50:     TRISDbits.TRISD1 = 0;
  2788  0017E4  9295               	bcf	149,1,c	;volatile
  2789  0017E6                     
  2790                           ;lcd.c: 51:     TRISDbits.TRISD2 = 0;
  2791  0017E6  9495               	bcf	149,2,c	;volatile
  2792  0017E8                     
  2793                           ;lcd.c: 52:     TRISDbits.TRISD3 = 0;
  2794  0017E8  9695               	bcf	149,3,c	;volatile
  2795  0017EA                     
  2796                           ;lcd.c: 54:     return(status);
  2797  0017EA  5001               	movf	i2ReadByte@status^0,w,c
  2798  0017EC  0012               	return		;funcret
  2799  0017EE                     __end_ofi2_ReadByte:
  2800                           	callstack 0
  2801                           
  2802 ;; *************** function _exit *****************
  2803 ;; Defined at:
  2804 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/exit.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  code            2   10[COMRAM] int 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:        2 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    2
  2825 ;; This function calls:
  2826 ;;		__Exit
  2827 ;;		___funcs_on_exit
  2828 ;; This function is called by:
  2829 ;;		_SerialRxPinInterrupt
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text26
  2834  0018D2                     __ptext26:
  2835                           	callstack 0
  2836  0018D2                     _exit:
  2837                           	callstack 22
  2838  0018D2  EC8C  F008         	call	___funcs_on_exit	;wreg free
  2839  0018D6  C00B  F001         	movff	exit@code,__Exit@ec
  2840  0018DA  C00C  F002         	movff	exit@code+1,__Exit@ec+1
  2841  0018DE  EC72  F00C         	call	__Exit	;wreg free
  2842  0018E2  0012               	return		;funcret
  2843  0018E4                     __end_of_exit:
  2844                           	callstack 0
  2845                           
  2846 ;; *************** function ___funcs_on_exit *****************
  2847 ;; Defined at:
  2848 ;;		line 17 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/atexit.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  arg             2    8[COMRAM] PTR void 
  2853 ;;		 -> RAM(3895), 
  2854 ;;  func            2    6[COMRAM] PTR FTN(PTR void ,)void 
  2855 ;;		 -> call(1), 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;Total ram usage:        8 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    1
  2872 ;; This function calls:
  2873 ;;		_call
  2874 ;; This function is called by:
  2875 ;;		_exit
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text27
  2880  001118                     __ptext27:
  2881                           	callstack 0
  2882  001118                     ___funcs_on_exit:
  2883                           	callstack 22
  2884  001118  EFF1  F008         	goto	i2l1555
  2885  00111C                     i2l1545:
  2886  00111C  C02A  F003         	movff	_slot,??___funcs_on_exit
  2887  001120  C02B  F004         	movff	_slot+1,??___funcs_on_exit+1
  2888  001124  90D8               	bcf	status,0,c
  2889  001126  3603               	rlcf	??___funcs_on_exit^0,f,c
  2890  001128  3604               	rlcf	(??___funcs_on_exit+1)^0,f,c
  2891  00112A  C02C  F005         	movff	_head,??___funcs_on_exit+2
  2892  00112E  C02D  F006         	movff	_head+1,??___funcs_on_exit+3
  2893  001132  5003               	movf	??___funcs_on_exit^0,w,c
  2894  001134  2605               	addwf	(??___funcs_on_exit+2)^0,f,c
  2895  001136  5004               	movf	(??___funcs_on_exit+1)^0,w,c
  2896  001138  2206               	addwfc	(??___funcs_on_exit+3)^0,f,c
  2897  00113A  0E02               	movlw	2
  2898  00113C  2405               	addwf	(??___funcs_on_exit+2)^0,w,c
  2899  00113E  6ED9               	movwf	fsr2l,c
  2900  001140  0E00               	movlw	0
  2901  001142  2006               	addwfc	(??___funcs_on_exit+3)^0,w,c
  2902  001144  6EDA               	movwf	fsr2h,c
  2903  001146  CFDE F007          	movff	postinc2,___funcs_on_exit@func
  2904  00114A  CFDD F008          	movff	postdec2,___funcs_on_exit@func+1
  2905  00114E  C02A  F003         	movff	_slot,??___funcs_on_exit
  2906  001152  C02B  F004         	movff	_slot+1,??___funcs_on_exit+1
  2907  001156  90D8               	bcf	status,0,c
  2908  001158  3603               	rlcf	??___funcs_on_exit^0,f,c
  2909  00115A  3604               	rlcf	(??___funcs_on_exit+1)^0,f,c
  2910  00115C  C02C  F005         	movff	_head,??___funcs_on_exit+2
  2911  001160  C02D  F006         	movff	_head+1,??___funcs_on_exit+3
  2912  001164  5003               	movf	??___funcs_on_exit^0,w,c
  2913  001166  2605               	addwf	(??___funcs_on_exit+2)^0,f,c
  2914  001168  5004               	movf	(??___funcs_on_exit+1)^0,w,c
  2915  00116A  2206               	addwfc	(??___funcs_on_exit+3)^0,f,c
  2916  00116C  0E42               	movlw	66
  2917  00116E  2405               	addwf	(??___funcs_on_exit+2)^0,w,c
  2918  001170  6ED9               	movwf	fsr2l,c
  2919  001172  0E00               	movlw	0
  2920  001174  2006               	addwfc	(??___funcs_on_exit+3)^0,w,c
  2921  001176  6EDA               	movwf	fsr2h,c
  2922  001178  CFDE F009          	movff	postinc2,___funcs_on_exit@arg
  2923  00117C  CFDD F00A          	movff	postdec2,___funcs_on_exit@arg+1
  2924  001180  C009  F001         	movff	___funcs_on_exit@arg,call@p
  2925  001184  C00A  F002         	movff	___funcs_on_exit@arg+1,call@p+1
  2926  001188  D802               	call	i2u69_48
  2927  00118A  EFD0  F008         	goto	i2u69_49
  2928  00118E                     i2u69_48:
  2929  00118E  0005               	push	
  2930  001190  6EFA               	movwf	pclath,c
  2931  001192  5007               	movf	___funcs_on_exit@func^0,w,c
  2932  001194  6EFD               	movwf	tosl,c
  2933  001196  5008               	movf	(___funcs_on_exit@func+1)^0,w,c
  2934  001198  6EFE               	movwf	tosh,c
  2935  00119A  6AFF               	clrf	tosu,c
  2936  00119C  50FA               	movf	pclath,w,c
  2937  00119E  0012               	return		;indir
  2938  0011A0                     i2u69_49:
  2939  0011A0                     i2l1549:
  2940  0011A0  502A               	movf	_slot^0,w,c
  2941  0011A2  6E03               	movwf	??___funcs_on_exit^0,c
  2942  0011A4  502B               	movf	(_slot+1)^0,w,c
  2943  0011A6  6E04               	movwf	(??___funcs_on_exit+1)^0,c
  2944  0011A8  0E01               	movlw	1
  2945  0011AA  5E2A               	subwf	_slot^0,f,c
  2946  0011AC  0E00               	movlw	0
  2947  0011AE  5A2B               	subwfb	(_slot+1)^0,f,c
  2948  0011B0  BE04               	btfsc	(??___funcs_on_exit+1)^0,7,c
  2949  0011B2  EFE5  F008         	goto	i2u70_40
  2950  0011B6  5004               	movf	(??___funcs_on_exit+1)^0,w,c
  2951  0011B8  E106               	bnz	i2u70_41
  2952  0011BA  0403               	decf	??___funcs_on_exit^0,w,c
  2953  0011BC  B0D8               	btfsc	status,0,c
  2954  0011BE  EFE3  F008         	goto	i2u70_41
  2955  0011C2  EFE5  F008         	goto	i2u70_40
  2956  0011C6                     i2u70_41:
  2957  0011C6  EF8E  F008         	goto	i2l1545
  2958  0011CA                     i2u70_40:
  2959  0011CA  C02C  FFD9         	movff	_head,fsr2l
  2960  0011CE  C02D  FFDA         	movff	_head+1,fsr2h
  2961  0011D2  CFDE F02C          	movff	postinc2,_head
  2962  0011D6  CFDD F02D          	movff	postdec2,_head+1
  2963  0011DA  0E00               	movlw	0
  2964  0011DC  6E2B               	movwf	(_slot+1)^0,c
  2965  0011DE  0E20               	movlw	32
  2966  0011E0  6E2A               	movwf	_slot^0,c
  2967  0011E2                     i2l1555:
  2968  0011E2  502C               	movf	_head^0,w,c
  2969  0011E4  102D               	iorwf	(_head+1)^0,w,c
  2970  0011E6  A4D8               	btfss	status,2,c
  2971  0011E8  EFF8  F008         	goto	i2u71_41
  2972  0011EC  EFFA  F008         	goto	i2u71_40
  2973  0011F0                     i2u71_41:
  2974  0011F0  EFD0  F008         	goto	i2l1549
  2975  0011F4                     i2u71_40:
  2976  0011F4  0012               	return		;funcret
  2977  0011F6                     __end_of___funcs_on_exit:
  2978                           	callstack 0
  2979                           
  2980 ;; *************** function _call *****************
  2981 ;; Defined at:
  2982 ;;		line 45 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/atexit.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  p               2    0[COMRAM] PTR void 
  2985 ;;		 -> RAM(3895), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		None
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        2 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		___funcs_on_exit
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text28
  3011  0018F2                     __ptext28:
  3012                           	callstack 0
  3013  0018F2                     _call:
  3014                           	callstack 22
  3015  0018F2  0012               	return		;funcret
  3016  0018F4                     __end_of_call:
  3017                           	callstack 0
  3018                           
  3019 ;; *************** function __Exit *****************
  3020 ;; Defined at:
  3021 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/_Exit.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  ec              2    0[COMRAM] int 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		None
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3035 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;Total ram usage:        2 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_exit
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text29
  3049  0018E4                     __ptext29:
  3050                           	callstack 0
  3051  0018E4                     __Exit:
  3052                           	callstack 23
  3053  0018E4                     i2l839:
  3054  0018E4  EF72  F00C         	goto	i2l839
  3055  0018E8  0012               	return		;funcret
  3056  0018EA                     __end_of__Exit:
  3057                           	callstack 0
  3058                           
  3059                           	psect	text30
  3060  000000                     __ptext30:
  3061                           	callstack 0
  3062  000000                     
  3063                           	psect	rparam
  3064  0000                     
  3065                           	psect	temp
  3066  00002E                     btemp:
  3067                           	callstack 0
  3068  00002E                     	ds	1
  3069  0000                     int$flags	set	btemp
  3070  0000                     wtemp8	set	btemp+1
  3071  0000                     ttemp5	set	btemp+1
  3072  0000                     ttemp6	set	btemp+4
  3073  0000                     ttemp7	set	btemp+8
  3074                           
  3075                           	psect	idloc
  3076                           
  3077                           ;Config register IDLOC0 @ 0x200000
  3078                           ;	unspecified, using default values
  3079  200000                     	org	2097152
  3080  200000  FF                 	db	255
  3081                           
  3082                           ;Config register IDLOC1 @ 0x200001
  3083                           ;	unspecified, using default values
  3084  200001                     	org	2097153
  3085  200001  FF                 	db	255
  3086                           
  3087                           ;Config register IDLOC2 @ 0x200002
  3088                           ;	unspecified, using default values
  3089  200002                     	org	2097154
  3090  200002  FF                 	db	255
  3091                           
  3092                           ;Config register IDLOC3 @ 0x200003
  3093                           ;	unspecified, using default values
  3094  200003                     	org	2097155
  3095  200003  FF                 	db	255
  3096                           
  3097                           ;Config register IDLOC4 @ 0x200004
  3098                           ;	unspecified, using default values
  3099  200004                     	org	2097156
  3100  200004  FF                 	db	255
  3101                           
  3102                           ;Config register IDLOC5 @ 0x200005
  3103                           ;	unspecified, using default values
  3104  200005                     	org	2097157
  3105  200005  FF                 	db	255
  3106                           
  3107                           ;Config register IDLOC6 @ 0x200006
  3108                           ;	unspecified, using default values
  3109  200006                     	org	2097158
  3110  200006  FF                 	db	255
  3111                           
  3112                           ;Config register IDLOC7 @ 0x200007
  3113                           ;	unspecified, using default values
  3114  200007                     	org	2097159
  3115  200007  FF                 	db	255
  3116                           
  3117                           	psect	config
  3118                           
  3119                           ; Padding undefined space
  3120  300000                     	org	3145728
  3121  300000  FF                 	db	255
  3122                           
  3123                           ;Config register CONFIG1H @ 0x300001
  3124                           ;	Oscillator Selection bits
  3125                           ;	FOSC = INTIO7, Internal oscillator block, CLKOUT function on OSC2
  3126                           ;	4X PLL Enable
  3127                           ;	PLLCFG = OFF, Oscillator used directly
  3128                           ;	Primary clock enable bit
  3129                           ;	PRICLKEN = ON, Primary clock is always enabled
  3130                           ;	Fail-Safe Clock Monitor Enable bit
  3131                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3132                           ;	Internal/External Oscillator Switchover bit
  3133                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3134  300001                     	org	3145729
  3135  300001  29                 	db	41
  3136                           
  3137                           ;Config register CONFIG2L @ 0x300002
  3138                           ;	Power-up Timer Enable bit
  3139                           ;	PWRTEN = OFF, Power up timer disabled
  3140                           ;	Brown-out Reset Enable bits
  3141                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3142                           ;	Brown Out Reset Voltage bits
  3143                           ;	BORV = 190, VBOR set to 1.90 V nominal
  3144  300002                     	org	3145730
  3145  300002  1F                 	db	31
  3146                           
  3147                           ;Config register CONFIG2H @ 0x300003
  3148                           ;	Watchdog Timer Enable bits
  3149                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  3150                           ;	Watchdog Timer Postscale Select bits
  3151                           ;	WDTPS = 32768, 1:32768
  3152  300003                     	org	3145731
  3153  300003  3C                 	db	60
  3154                           
  3155                           ; Padding undefined space
  3156  300004                     	org	3145732
  3157  300004  FF                 	db	255
  3158                           
  3159                           ;Config register CONFIG3H @ 0x300005
  3160                           ;	CCP2 MUX bit
  3161                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  3162                           ;	PORTB A/D Enable bit
  3163                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  3164                           ;	P3A/CCP3 Mux bit
  3165                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  3166                           ;	HFINTOSC Fast Start-up
  3167                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  3168                           ;	Timer3 Clock input mux bit
  3169                           ;	T3CMX = PORTC0, T3CKI is on RC0
  3170                           ;	ECCP2 B output mux bit
  3171                           ;	P2BMX = PORTD2, P2B is on RD2
  3172                           ;	MCLR Pin Enable bit
  3173                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  3174  300005                     	org	3145733
  3175  300005  BF                 	db	191
  3176                           
  3177                           ;Config register CONFIG4L @ 0x300006
  3178                           ;	Stack Full/Underflow Reset Enable bit
  3179                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3180                           ;	Single-Supply ICSP Enable bit
  3181                           ;	LVP = OFF, Single-Supply ICSP disabled
  3182                           ;	Extended Instruction Set Enable bit
  3183                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3184                           ;	Background Debug
  3185                           ;	DEBUG = 0x1, unprogrammed default
  3186  300006                     	org	3145734
  3187  300006  81                 	db	129
  3188                           
  3189                           ; Padding undefined space
  3190  300007                     	org	3145735
  3191  300007  FF                 	db	255
  3192                           
  3193                           ;Config register CONFIG5L @ 0x300008
  3194                           ;	Code Protection Block 0
  3195                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3196                           ;	Code Protection Block 1
  3197                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3198                           ;	Code Protection Block 2
  3199                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3200                           ;	Code Protection Block 3
  3201                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3202  300008                     	org	3145736
  3203  300008  0F                 	db	15
  3204                           
  3205                           ;Config register CONFIG5H @ 0x300009
  3206                           ;	Boot Block Code Protection bit
  3207                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3208                           ;	Data EEPROM Code Protection bit
  3209                           ;	CPD = OFF, Data EEPROM not code-protected
  3210  300009                     	org	3145737
  3211  300009  C0                 	db	192
  3212                           
  3213                           ;Config register CONFIG6L @ 0x30000A
  3214                           ;	Write Protection Block 0
  3215                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3216                           ;	Write Protection Block 1
  3217                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3218                           ;	Write Protection Block 2
  3219                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3220                           ;	Write Protection Block 3
  3221                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3222  30000A                     	org	3145738
  3223  30000A  0F                 	db	15
  3224                           
  3225                           ;Config register CONFIG6H @ 0x30000B
  3226                           ;	Configuration Register Write Protection bit
  3227                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3228                           ;	Boot Block Write Protection bit
  3229                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3230                           ;	Data EEPROM Write Protection bit
  3231                           ;	WRTD = OFF, Data EEPROM not write-protected
  3232  30000B                     	org	3145739
  3233  30000B  E0                 	db	224
  3234                           
  3235                           ;Config register CONFIG7L @ 0x30000C
  3236                           ;	Table Read Protection Block 0
  3237                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3238                           ;	Table Read Protection Block 1
  3239                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3240                           ;	Table Read Protection Block 2
  3241                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3242                           ;	Table Read Protection Block 3
  3243                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3244  30000C                     	org	3145740
  3245  30000C  0F                 	db	15
  3246                           
  3247                           ;Config register CONFIG7H @ 0x30000D
  3248                           ;	Boot Block Table Read Protection bit
  3249                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3250  30000D                     	org	3145741
  3251  30000D  40                 	db	64
  3252                           tosu	equ	0xFFF
  3253                           tosh	equ	0xFFE
  3254                           tosl	equ	0xFFD
  3255                           stkptr	equ	0xFFC
  3256                           pclatu	equ	0xFFB
  3257                           pclath	equ	0xFFA
  3258                           pcl	equ	0xFF9
  3259                           tblptru	equ	0xFF8
  3260                           tblptrh	equ	0xFF7
  3261                           tblptrl	equ	0xFF6
  3262                           tablat	equ	0xFF5
  3263                           prodh	equ	0xFF4
  3264                           prodl	equ	0xFF3
  3265                           indf0	equ	0xFEF
  3266                           postinc0	equ	0xFEE
  3267                           postdec0	equ	0xFED
  3268                           preinc0	equ	0xFEC
  3269                           plusw0	equ	0xFEB
  3270                           fsr0h	equ	0xFEA
  3271                           fsr0l	equ	0xFE9
  3272                           wreg	equ	0xFE8
  3273                           indf1	equ	0xFE7
  3274                           postinc1	equ	0xFE6
  3275                           postdec1	equ	0xFE5
  3276                           preinc1	equ	0xFE4
  3277                           plusw1	equ	0xFE3
  3278                           fsr1h	equ	0xFE2
  3279                           fsr1l	equ	0xFE1
  3280                           bsr	equ	0xFE0
  3281                           indf2	equ	0xFDF
  3282                           postinc2	equ	0xFDE
  3283                           postdec2	equ	0xFDD
  3284                           preinc2	equ	0xFDC
  3285                           plusw2	equ	0xFDB
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8

Data Sizes:
    Strings     45
    Constant    0
    Data        0
    BSS         134
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      45
    BANK0           160      0       0
    BANK1           256      0     130
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    S1053$1$0	PTR void  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    func$0	PTR void  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    func$0	PTR void  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    call@p	PTR void  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    __funcs_on_exit@arg	PTR void  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    head.a	PTR void [32] size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    head.f	PTR FTN(PTR void ,)void [32] size(2) Largest target is 1
		 -> call(), 

    head.next	PTR struct fl size(2) Largest target is 0

    head	PTR struct fl size(2) Largest target is 163
		 -> builtin(BANK1[130]), NULL(NULL[0]), 

    __funcs_on_exit@func	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> call(), 

    S1053fl$a	PTR void [32] size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    builtin.a	PTR void [32] size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    S1053fl$f	PTR FTN(PTR void ,)void [32] size(2) Largest target is 1
		 -> call(), 

    builtin.f	PTR FTN(PTR void ,)void [32] size(2) Largest target is 1
		 -> call(), 

    S1053fl$next	PTR struct fl size(2) Largest target is 0

    builtin.next	PTR struct fl size(2) Largest target is 0

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_3(CODE[14]), STR_2(CODE[14]), LCDWriteInt@string(COMRAM[3]), LCDWriteFloat@string(COMRAM[5]), 
		 -> LCDWriteHexa@string(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _main->_LCDWriteInt
    _main->_UARTInit
    _UARTInit->___lldiv
    _LCDWriteInt->_LCDGoto
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _SerialRxPinInterrupt in COMRAM

    _SerialRxPinInterrupt->_exit
    i2_LCDWriteStr->i2_LCDPutChar
    i2_LCDPutChar->i2_WriteByte
    i2_LCDGoto->i2_WriteByte
    i2_WriteByte->i2_WriteNibble
    i2_WaitLCD->i2_ReadByte
    _exit->___funcs_on_exit
    ___funcs_on_exit->_call

Critical Paths under _main in BANK0

    None.

Critical Paths under _SerialRxPinInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _SerialRxPinInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SerialRxPinInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SerialRxPinInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SerialRxPinInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SerialRxPinInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _SerialRxPinInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _SerialRxPinInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _SerialRxPinInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _SerialRxPinInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _SerialRxPinInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _SerialRxPinInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _SerialRxPinInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _SerialRxPinInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _SerialRxPinInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _SerialRxPinInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9556
                                             39 COMRAM     2     2      0
                           _LCDClear
                            _LCDInit
                        _LCDWriteInt
                           _UARTInit
                       _UARTReadByte
                      _UARTWriteByte
 ---------------------------------------------------------------------------------
 (1) _UARTWriteByte                                        1     1      0      15
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UARTReadByte                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             4     2      2     412
                                             35 COMRAM     4     2      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                          6     4      2    6123
                                             33 COMRAM     6     4      2
                            _LCDGoto
                        _LCDWriteStr
                       _UARTReadByte (ARG)
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                             22 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteStr                                          5     3      2    2139
                                             28 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           1     1      0    1721
                                             27 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (2) _LCDGoto                                              6     5      1    2161
                                             27 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1307
                                             25 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             1     1      0    1699
                                             27 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (4) _WriteByte                                            2     1      1    1652
                                             25 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (5) _WriteNibble                                          3     2      1    1260
                                             22 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _WaitLCD                                              1     1      0      47
                                             23 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (5) _ReadByte                                             1     1      0      24
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _SerialRxPinInterrupt                                10    10      0    1570
                                             12 COMRAM    10    10      0
                               _exit
                          i2_LCDGoto
                       i2_LCDPutChar
                      i2_LCDWriteStr
                     i2_UARTReadByte
 ---------------------------------------------------------------------------------
 (7) i2_UARTReadByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_LCDWriteStr                                        5     3      2     447
                                              6 COMRAM     5     3      2
                       i2_LCDPutChar
 ---------------------------------------------------------------------------------
 (8) i2_LCDPutChar                                         1     1      0     305
                                              5 COMRAM     1     1      0
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (7) i2_LCDGoto                                            6     5      1     469
                                              5 COMRAM     6     5      1
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (9) i2_WriteByte                                          2     1      1     236
                                              3 COMRAM     2     1      1
                      i2_WriteNibble
 ---------------------------------------------------------------------------------
 (10) i2_WriteNibble                                       3     2      1      96
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (9) i2_WaitLCD                                            1     1      0      47
                                              1 COMRAM     1     1      0
                         i2_ReadByte
 ---------------------------------------------------------------------------------
 (10) i2_ReadByte                                          1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _exit                                                 2     0      2     349
                                             10 COMRAM     2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (8) ___funcs_on_exit                                      8     8      0      99
                                              2 COMRAM     8     8      0
                               _call *
 ---------------------------------------------------------------------------------
 (9) _call                                                 2     0      2      53
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) __Exit                                                2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDClear
     _WaitLCD
       _ReadByte
     _WriteByte
       _WriteNibble
   _LCDInit
     _WaitLCD
       _ReadByte
     _WriteNibble
   _LCDWriteInt
     _LCDGoto
       _WaitLCD
         _ReadByte
       _WriteByte
         _WriteNibble
     _LCDWriteStr
       _LCDPutChar
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
     _UARTReadByte (ARG)
     ___awdiv (ARG)
     ___awmod (ARG)
   _UARTInit
     ___lldiv
   _UARTReadByte
   _UARTWriteByte

 _SerialRxPinInterrupt (ROOT)
   _exit
     __Exit
     ___funcs_on_exit
       _call *
   i2_LCDGoto
     i2_WaitLCD
       i2_ReadByte
     i2_WriteByte
       i2_WriteNibble
   i2_LCDPutChar
     i2_WaitLCD
       i2_ReadByte
     i2_WriteByte
       i2_WriteNibble
   i2_LCDWriteStr
     i2_LCDPutChar
       i2_WaitLCD
         i2_ReadByte
       i2_WriteByte
         i2_WriteNibble
   i2_UARTReadByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      82       7       50.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      2D       1       47.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      12        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb  5 15:27:27 2021

                           l20 1846                             l15 17BC                             l23 1740  
                           l32 180C                             l26 187C                             l19 1844  
                  ?_LCDPutChar 0001                             l29 1116                             l45 18BE  
                           l38 15DA                             l54 1488                             l63 16F4  
                 ___awdiv@sign 001C           __size_of_WriteNibble 004C                            l120 18AC  
                          l114 1570                            l123 18EC                            l117 189A  
                          l152 165A                            l402 1368                            l192 140C  
                          l185 13FC                            l389 12B8                            u310 18A8  
                          u311 18A4                            u420 170C                            u500 15A8  
                          u421 1704                            u501 15A4                            u510 1444  
                          u440 1844                            u520 1478                            u600 1266  
                          u441 1840                            u601 1262                            u530 1488  
                          u610 1282                            u531 1484                            u611 127E  
                          u620 12A8                            u540 1390                            u517 143A  
                          u621 12A4                            u541 138C                            u438 170E  
                          u630 12CC                            u550 13B2                            u527 146E  
                          u631 12C8                            u551 13AE                            u480 1584  
                          u640 12E6                            u560 13DA                            u481 1580  
                          u641 12E2                            u561 13D6                            u490 1594  
                          u570 1208                            u650 1300                            u491 1590  
                          u571 1204                            u651 12FC                            u580 1222  
                          u660 131E                            u581 121E                            u661 131A  
                          u590 1248                            u670 1334                            u591 1244  
                          u671 1330                            u680 1358                            u681 1354  
                          u827 166E                            u837 1694                            u847 1048  
                          u857 1062                            u867 1078                            u877 108A  
                          u887 17FE                   ___awmod@sign 001C                            tosl 000FFD  
                          wreg 000FE8                     _TXSTA1bits 000FAC                    i2_WriteByte 187E  
              __end_of_LCDInit 1118                __end_of_LCDGoto 15DC                   ?_LCDWriteInt 0022  
                 ?_LCDWriteStr 001D                           l1213 189A                           l1215 18A8  
                         l1321 17A6                           l1313 178E                           l1217 18EA  
                         l1331 17B6                           l1323 17A8                           l1315 179C  
                         l1333 17B8                           l1325 17B0                           l1317 17A2  
                         l1341 171A                           l1421 1584                           l1501 12A8  
                         l1335 17BA                           l1327 17B2                           l1319 17A4  
                         l1351 173A                           l1343 171C                           l1431 15D6  
                         l1423 1598                           l1503 12B0                           l1511 12CC  
                         l1329 17B4                           l1361 1836                           l1353 173C  
                         l1345 171E                           l1601 1108                           l1425 15A8  
                         l1409 18B0                           l1433 140E                           l1521 1300  
                         l1513 12D4                           l1441 136A                           l1355 173E  
                         l1347 1726                           l1339 16F8                           l1363 1866  
                         l1603 1112                           l1427 15BC                           l1419 1574  
                         l1435 1416                           l1531 133C                           l1523 1308  
                         l1515 12D8                           l1507 12BA                           l1611 16AA  
                         l1451 13B2                           l1443 137A                           l1357 182C  
                         l1349 1728                           l1605 17EE                           l1429 15CC  
                         l1437 1448                           l1533 1342                           l1525 1310  
                         l1517 12E6                           l1509 12BE                           l1613 16DA  
                         l1461 13F6                           l1453 13BC                           l1445 1390  
                         l1621 150E                           l1359 1830                           l1607 17F8  
                         l1439 144A                           l1471 1214                           l1463 11F6  
                         l1527 131E                           l1535 1348                           l1519 12EE  
                         l1615 16DE                           l1455 13DA                           l1447 1398  
                         l1631 151E                           l1623 1516                           l1609 1808  
                         l1561 1042                           l1481 1248                           l1473 1222  
                         l1465 11FA                           l1537 1358                           l1529 1334  
                         l1617 16E8                           l1457 13EA                           l1449 13A4  
                         l1641 1528                           l1633 1520                           l1625 1518  
                         l1571 1090                           l1563 1052                           l1491 1282  
                         l1483 1250                           l1475 122A                           l1467 1208  
                         l1539 1360                           l1459 13EC                           l1651 156A  
                         l1643 1560                           l1635 1522                           l1627 151A  
                         l1619 1506                           l1581 10B6                           l1573 109A  
                         l1565 105C                           l1493 128A                           l1485 1258  
                         l1477 122E                           l1469 1210                           l1653 156C  
                         l1645 1564                           l1637 1524                           l1629 151C  
                         l1741 167A                           l1591 10E2                           l1583 10C0  
                         l1575 109E                           l1567 1076                           l1559 1030  
                         l1495 128C                           l1487 1266                           l1479 1236  
                         l1655 156E                           l1647 1566                           l1639 1526  
                         l1743 168A                           l1735 1646                           l1593 10E6  
                         l1585 10CA                           l1577 10A8                           l1569 107E  
                         l1497 1292                           l1489 126C                           l1649 1568  
                         l1737 165E                           l1595 10F0                           l1587 10CE  
                         l1579 10B2                           l1499 1298                           l1739 1664  
                         l1597 10FA                           l1589 10D8                           l1599 10FE  
                         STR_1 1001                           STR_2 1012                           STR_3 1020  
                         _LATD 000F8C                           _PEIE 007F96                           _RCIE 007CED  
                         i2l20 1862                           _RCIF 007CF5                           i2l15 17EC  
                         i2l23 178C                           i2l26 1896                           i2l19 1860  
                         i2l45 18D0                           i2l38 1644                           i2l54 1504  
                         _RCIP 007CFD                i2WriteByte@data 0004                 i2_UARTReadByte 18EE  
                         _call 18F2         __size_ofi2_WriteNibble 004C                           _head 002C  
                         _main 1646                           _exit 18D2                           fsr0h 000FEA  
                         _slot 002A                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           fsr2l 000FD9                           btemp 002E  
                         start 00D0                   ___param_bank 000000               __end_of_LCDClear 180E  
              __end_of_WaitLCD 1848             __size_ofi2_LCDGoto 006A                   _BAUDCON1bits 000FB8  
                        ?_call 0001                          ?_main 0001                          ?_exit 000B  
              __end_of___awdiv 12BA                __end_of___awmod 136A                __end_of___lldiv 140E  
              ___awdiv@divisor 0019                          i2l123 18F0                          i2l133 00A4  
                        i2l129 0074                          i2l836 18E2                          i2l839 18E4  
                        i2l864 18F2                          i2l856 11F4                ___awdiv@counter 001B  
                        _PORTD 000F83                          __Exit 18E4               __end_of_UARTInit 1572  
                        call@p 0001               i2WriteNibble@cmd 0003         __end_ofi2_UARTReadByte 18F2  
                        pclath 000FFA                          tablat 000FF5            __size_of_LCDPutChar 0012  
           __size_ofi2_WaitLCD 001C                    ?i2_ReadByte 0001                          ttemp5 002F  
                        ttemp6 0032                          ttemp7 0036                          status 000FD8  
                        wtemp8 002F                  WaitLCD@status 0018                __initialization 180E  
                 __end_of_call 18F4                   __end_of_main 16A8                   __end_of_exit 18E4  
     __size_of___funcs_on_exit 00DE               __end_of_ReadByte 17BE                  i2_WriteNibble 1742  
                       ??_call 0003                         ??_main 0028                         ??_exit 000D  
                __activetblptr 000003                      ??_LCDInit 001A                      ??_LCDGoto 001D  
          i2LCDWriteStr@string 0007                         ?__Exit 0001               ___awdiv@dividend 0017  
                LCDGoto@column 0021                ?i2_UARTReadByte 0001              __end_ofi2_LCDGoto 1646  
                       i2l1401 1774                         i2l1411 1848                         i2l1403 1786  
                       i2l1413 184C                         i2l1405 1788                         i2l1415 1852  
                       i2l1407 178A                         i2l1247 18EE                         i2l1417 1880  
                       i2l1371 17D4                         i2l1381 17E4                         i2l1373 17D6  
                       i2l1365 17BE                         i2l1551 11CA                         i2l1543 1118  
                       i2l1383 17E6                         i2l1375 17D8                         i2l1367 17CC  
                       i2l1391 1744                         i2l1553 11DA                         i2l1545 111C  
                       i2l1385 17E8                         i2l1377 17E0                         i2l1369 17D2  
                       i2l1393 1766                         i2l1721 004E                         i2l1547 1180  
                       i2l1555 11E2                         i2l1387 17EA                         i2l1379 17E2  
                       i2l1395 1768                         i2l1723 0058                         i2l1549 11A0  
                       i2l1397 176A                         i2l1661 15DE                         i2l1557 18C2  
                       i2l1733 009C                         i2l1725 0064                         i2l1717 0032  
                       i2l1399 1772                         i2l1671 1636                         i2l1663 15EE  
                       i2l1727 0082                         i2l1719 0040                         i2l1657 18D2  
                       i2l1673 1640                         i2l1665 1602                         i2l1681 14C6  
                       i2l1729 008C                         i2l1659 18D6                         i2l1667 1612  
                       i2l1675 148A                         i2l1669 1626                         i2l1677 1492  
                       i2l1679 14C4                         _RCREG1 000FAE                         _RCSTA1 000FAB  
                       _SPBRG1 000FAF                         _TXREG1 000FAD                         _TXSTA1 000FAC  
                    ??_WaitLCD 0018                      ??___awdiv 001B                      ??___awmod 001B  
                    ??___lldiv 001F                  ?i2_LCDPutChar 0001              i2WriteNibble@data 0001  
               ?i2_WriteNibble 0001                         clear_0 1814               ___awdiv@quotient 001D  
              ___awmod@divisor 0019                ___awmod@counter 001B              __end_ofi2_WaitLCD 1864  
          __size_ofi2_ReadByte 0030                   __mediumconst 0000                         tblptrh 000FF7  
                 LCDWriteStr@i 0021                         tblptrl 000FF6                         tblptru 000FF8  
         ___funcs_on_exit@func 0007                      ?_LCDClear 0001           __size_of_LCDWriteInt 004E  
         __size_of_LCDWriteStr 007C                     __accesstop 0060        __end_of__initialization 1822  
           __size_of_WriteByte 001A                  ___rparam_used 000001  __size_of_SerialRxPinInterrupt 00C8  
               __pcstackCOMRAM 0001                 WriteNibble@cmd 0019                  __end_of__Exit 18EA  
                    ?_UARTInit 0024                 ??i2_LCDPutChar 0006                   ??_LCDPutChar 001C  
       __size_ofi2_LCDWriteStr 007C          __end_of_UARTWriteByte 18AE              ??___funcs_on_exit 0003  
                      ??__Exit 0003                   ?i2_WriteByte 0004                     __pbssBANK1 0100  
                 WriteByte@cmd 001B                     ??_LCDClear 001C                      ?_ReadByte 0001  
           __end_of_LCDPutChar 18C0                   i2LCDGoto@row 0006                  i2_LCDGoto$151 0009  
              ??i2_WriteNibble 0002                     ??_UARTInit 0026                  ??_WriteNibble 0018  
            LCDWriteInt@column 0024              LCDWriteInt@string 0025              __end_of_WriteByte 187E  
                      _LCDInit 1030                        _LCDGoto 1572                        i2u45_40 1758  
                      i2u45_41 1750                        i2u70_40 11CA                        i2u70_41 11C6  
                      i2u71_40 11F4                        i2u47_40 1860                        i2u46_48 175A  
                      i2u71_41 11F0                        i2u47_41 185C                        i2u72_40 15EE  
                      i2u80_40 004E                        i2u72_41 15EA                        i2u80_41 004A  
                      i2u73_40 15FE                        i2u81_40 0082                        i2u73_41 15FA  
                      i2u81_41 007E                        i2u74_40 1612                        i2u74_41 160E  
                      i2u75_40 14C0                        _SPBRGH1 000FB0                        i2u75_47 14B6  
                      i2u76_40 14F4                        i2u76_47 14EA                        i2u77_40 1504  
                      i2u77_41 1500                        i2u69_48 118E                        i2u69_49 11A0  
                      i2u79_40 0040                        i2u79_41 003C                  ?_UARTReadByte 0001  
                i2_LCDWriteStr 148A                   ??i2_ReadByte 0001                     ??_ReadByte 0017  
            UARTWriteByte@data 0017                        __Hparam 0000                        _WaitLCD 182C  
                      __Lparam 0000                        ___awdiv 11F6                        ___awmod 12BA  
                      ___lldiv 136A                   __psmallconst 1000                        __pcinit 180E  
                      __ramtop 1000                        __ptext0 1646                        __ptext1 1898  
                      __ptext2 18EA                        __ptext3 1506                        __ptext4 136A  
                      __ptext5 16A8                        __ptext6 12BA                        __ptext7 11F6  
                      __ptext8 140E                        __ptext9 18AE                        _builtin 0100  
           __end_ofi2_ReadByte 17EE            __end_of_WriteNibble 1742               ___awmod@dividend 0017  
             ??i2_UARTReadByte 0001                        fp__call 0000                 ??_UARTReadByte 0017  
               i2LCDWriteStr@i 000B                 ?i2_LCDWriteStr 0007           end_of_initialization 1822  
         __end_ofi2_LCDPutChar 18D2                      i2_LCDGoto 15DC                ___lldiv@divisor 001B  
            LCDWriteStr@string 001D                ___lldiv@counter 0023                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE               i2LCDPutChar@data 0006  
                    i2_WaitLCD 1848                      _TRISCbits 000F94                      _TRISDbits 000F95  
         __size_ofi2_WriteByte 001A                     LCDGoto@row 001C                 i2WriteByte@cmd 0005  
            __size_of_LCDClear 0020                     ?i2_LCDGoto 0006                WriteNibble@data 0017  
              ___funcs_on_exit 1118                i2WaitLCD@status 0002                    _WriteNibble 16F6  
            __size_of_UARTInit 006C   __end_of_SerialRxPinInterrupt 00D0            start_initialization 180E  
                   ?i2_WaitLCD 0001                ??i2_LCDWriteStr 0009                  ??_LCDWriteInt 0024  
                ??_LCDWriteStr 001F              __size_of_ReadByte 0030                i2LCDGoto@column 000B  
         __end_of_UARTReadByte 18EE            ___funcs_on_exit@arg 0009                       ?_LCDInit 0001  
                     ?_LCDGoto 001C                  WriteByte@data 001A                    __pbssCOMRAM 002A  
        __size_ofi2_LCDPutChar 0012                      _WriteByte 1864                 LCDPutChar@data 001C  
       __size_of_UARTWriteByte 0016        __end_of___funcs_on_exit 11F6            __end_of_LCDWriteInt 16F6  
          __end_of_LCDWriteStr 148A                    ??i2_LCDGoto 0007                       ?_WaitLCD 0001  
                    __pintcode 0008                       ?___awdiv 0017                       ?___awmod 0017  
                     ?___lldiv 0017               LCDWriteInt@value 0023          __end_ofi2_WriteNibble 178E  
                 i2_LCDPutChar 18C0                    __smallconst 1000                    ??i2_WaitLCD 0002  
               __size_of__Exit 0006                     ?_WriteByte 001A               i2ReadByte@status 0001  
                     _LCDClear 17EE                       _LATDbits 000F8C                       _PIE1bits 000F9D  
         _SerialRxPinInterrupt 0008                    _LCDGoto$151 001F                       _PIR1bits 000F9E  
                     _UARTInit 1506                  _UARTWriteByte 1898               __size_of_LCDInit 00E8  
             __size_of_LCDGoto 006A                    _LCDWriteInt 16A8                    _LCDWriteStr 140E  
                     _ReadByte 178E               ?___funcs_on_exit 0001          ?_SerialRxPinInterrupt 0001  
        __size_of_UARTReadByte 0004                       __Exit@ec 0001                       __Hrparam 0000  
                     __Lrparam 0000               __size_of_WaitLCD 001C               __size_of___awdiv 00C4  
                 ?_WriteNibble 0017               __size_of___awmod 00B0               __size_of___lldiv 00A4  
               ?_UARTWriteByte 0001                     _ANSELCbits 000F3A                  ??i2_WriteByte 0005  
                  ??_WriteByte 001B                       __ptext10 1572                       __ptext11 1030  
                     __ptext20 18C0                       __ptext12 17EE                       __ptext21 15DC  
                     __ptext13 1864                       __ptext30 0000                       __ptext22 187E  
                     __ptext14 16F6                       __ptext23 1742                       __ptext15 182C  
                     __ptext24 1848                       __ptext16 178E                       __ptext25 17BE  
                     __ptext26 18D2                       __ptext18 18EE                       __ptext27 1118  
                     __ptext19 148A                       __ptext28 18F2                       __ptext29 18E4  
                 _UARTReadByte 18EA                  __size_of_call 0002                  __size_of_main 0062  
      __size_ofi2_UARTReadByte 0004                  __size_of_exit 0012                 ReadByte@status 0017  
                     int$flags 002E                     _LCDPutChar 18AE                       exit@code 000B  
        __end_ofi2_LCDWriteStr 1506                       intlevel2 0000                 LCDWriteInt@row 0022  
       ??_SerialRxPinInterrupt 000D               ___lldiv@dividend 0017            __end_ofi2_WriteByte 1898  
                   _RCSTA1bits 000FAB                ??_UARTWriteByte 0017               ___lldiv@quotient 001F  
                   i2_ReadByte 17BE               UARTInit@baudRate 0024  
